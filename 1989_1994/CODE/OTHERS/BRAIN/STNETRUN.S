****************************************************************************
* ST NET-RUNNER (C) F. ROYER. 24/11/91
* UTILITAIRE DE TRANSFERT DE FICHIERS VIA MINITEL / MODEM / NULL-MODEM.
****************************************************************************
	OPT	O1+,O2+,W+

REGS	REG	D0-D7/A0-A6

F1	EQU	$3B
F2	EQU	$3C
F3	EQU	$3D
F4	EQU	$3E
HELP	EQU	$62
UNDO	EQU	$61

****************************************************************************

	MOVE.L	4(SP),A0	MSHRINK
	MOVE.L	$C(A0),D0	
	ADD.L	$14(A0),D0	
	ADD.L	$1C(A0),D0	
	ADD.L	#$100,D0
	MOVE.L	D0,-(SP)
	MOVE.L	A0,-(SP)
	CLR.W	-(SP)
	MOVE.W	#$4A,-(SP)
	TRAP	#1
	LEA	12(SP),SP

	TST.L	D0		OK ?
	BNE	EXIT		NON, ON SORT...

	DC.W	$A00A		MOUSE OFF

	MOVE.W	#4,-(SP)	GETREZ
	TRAP	#14
	ADDQ.L	#2,SP
	
	TST.W	D0		BASSE RESOLUTION ?
	BNE.S	REZ_OK		NON
	
	PEA	_WRONG_REZ	AFFICHAGE MESSAGE MAUVAISE RESOLUTION
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

	MOVE.W	#7,-(SP)	ATTENTE CLAVIER
	TRAP	#1
	ADDQ.L	#2,SP	

	BRA	EXIT

REZ_OK:
	
	CLR.L	-(SP)		MODE SUPERVISEUR
	MOVE.W	#$20,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP
	MOVE.L	D0,_SAVESSP

	MOVE.L	$70,VBL_END+2
	MOVE.L	#VBL,$70

****************************************************************************

	BSR	INIT_PATH	INITIALISE LE CHEMIN COURANT POUR F_SELECT

	LEA	_MSG_OK,A0	INIT. MESSAGE STATUS
	BSR	MSG

	LEA	_DISPLAY,A0
	MOVEQ	#0,D0		INIT. TAILLE DU FICHIER
	BSR	X2C

MAIN:
	BSR	AFF_PANEL	AFFICHAGE PANEL D'ENTREE

MAIN_WAIT:
	BSR	WAIT_KEY	ATTENTE DU CHOIX

	CMPI.W	#UNDO,_CAR	UNDO ?
	BNE.S	CHK_HELP	NON
	BSR	BAUD_RATE	MODIFIER LA VITESSE DE TRANSMISSION
	BRA.S	MAIN_WAIT

CHK_HELP:
	CMPI.W	#HELP,_CAR	HELP ?
	BNE.S	CHK_XMIT	NON
	BSR	HELP_PANEL	AFFICHAGE DU HELP
	BRA.S	MAIN

CHK_XMIT:
	CMPI.W	#F1,_CAR	TRANSMISSION ?
	BNE.S	CHK_RMIT	NON
	PEA	_PANEL_F1
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP
	BSR	TRANSMIT	TRANSMISSION
	BRA.S	MAIN
CHK_RMIT:
	CMPI.W	#F2,_CAR	RECEPTION ?
	BNE.S	CHK_SELECT	NON
	PEA	_PANEL_F2
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP
	BSR	RECEIVE		RECEPTION
	BRA.S	MAIN
CHK_SELECT:
	CMPI.W	#F3,_CAR	CHOIX DU CHEMIN ?
	BNE.S	CHK_EXIT	NON
	PEA	_PANEL_F3
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP
	BSR	F_SELECT	SELECTEUR DE FICHIER
	BRA	MAIN
CHK_EXIT:
	CMPI.W	#F4,_CAR	SORTIE
	BNE	MAIN		NON
	PEA	_PANEL_F4
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

	MOVE.L	VBL_END+2,$70	REMISE EN PLACE DE L'ANCIENNE VBL

	MOVE.L	_SAVESSP,-(SP)	MODE USER
	MOVE.W	#$20,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP
	
EXIT:
	DC.W	$A009		MOUSE ON

	CLR.W	-(SP)		THE END
	MOVE.W	#$4C,-(SP)
	TRAP	#1

****************************************************************************
* BAUD_RATE
* CHANGE LA VITESSE DE LA RS-232 ET L'AFFICHE A L'ECRAN
****************************************************************************
BAUD_RATE:
	MOVEM.L	REGS,-(SP)

	MOVE.W	_SPEED+2,D0	RECUPERATION DE LA VITESSE COURANTE
	ADDQ.W	#1,D0		+1 SUR LA VITESSE
	CMPI.W	#8,D0		INFERIEURE A 1200 BAUDS ?
	BLT.S	BAUD_OK		NON
	MOVEQ	#0,D0		REPASSER LA VITESSE A 19200 BAUDS
BAUD_OK:
	MOVE.W	D0,_SPEED+2	FIXER LA VITESSE

	LEA	_TAB_SPEED,A0	ADRESSE DE LA TABLE DES VITESSES
	MULU.W	#6,D0
	LEA	(A0,D0.W),A0	ADRESSE DU MESSAGE POUR LA VITESSE CHOISIE
	
	MOVEQ	#4,D0		RECOPIER LE MESSAGE SUR LE PANEL
	LEA	_BAUDS,A1
BAUD_BCL:
	MOVE.B	(A0)+,(A1)+
	DBRA	D0,BAUD_BCL

	BSR	AFF_SPEED
	
	MOVEM.L	(SP)+,REGS
	RTS

****************************************************************************
* DESBUF
* VIDE LE BUFFER CLAVIER
* AUCUN PARAMETRE ATTENDU
****************************************************************************
DESBUF:
	MOVEM.L	REGS,-(SP)

DESBUF_CHECK:
	MOVE.W	#2,-(SP)		CARACTERE A VIDER ?
	MOVE.W	#1,-(SP)
	TRAP	#13
	ADDQ.L	#4,SP
	TST.W	D0
	BEQ.S	DESBUF_END		NON

	MOVE.W	#2,-(SP)		RECUP DU CARACTERE.
	MOVE.W	#2,-(SP)
	TRAP	#13
	ADDQ.L	#4,SP

	BRA.S	DESBUF_CHECK		SUIVANT...

DESBUF_END:
	MOVEM.L	(SP)+,REGS
	RTS	

****************************************************************************
* DESRS
* VIDE LE BUFFER RS-232
* AUCUN PARAMETRE ATTENDU
****************************************************************************
DESRS:
	MOVEM.L	REGS,-(SP)

DESRS_CHECK:
	MOVE.W	#1,-(SP)		CARACTERE A VIDER ?
	MOVE.W	#1,-(SP)
	TRAP	#13
	ADDQ.L	#4,SP
	TST.W	D0
	BEQ.S	DESRS_END		NON

	MOVE.W	#1,-(SP)		RECUP DU CARACTERE.
	MOVE.W	#2,-(SP)
	TRAP	#13
	ADDQ.L	#4,SP

	BRA.S	DESRS_CHECK		SUIVANT...

DESRS_END:
	MOVEM.L	(SP)+,REGS
	RTS	

****************************************************************************
* WAIT_KEY
* ATTEND UNE TOUCHE DU CLAVIER
****************************************************************************
WAIT_KEY:
	MOVEM.L	REGS,-(SP)
	
	BSR.S	DESBUF		VIDANGE BUFFER CLAVIER

WAIT_KEY_BCL:
	MOVE.W	#2,-(SP)	ATTENTE CLAVIER
	MOVE.W	#2,-(SP)
	TRAP	#13
	ADDQ.L	#4,SP
	SWAP	D0		RECUP CODE CLAVIER	

	CMPI.W	#F1,D0		CODE < F1 ?
	BLT.S	WAIT_KEY_BCL	ALORS ON BOUCLE.
	CMPI.W	#HELP,D0	CODE HELP
	BEQ.S	WAIT_KEY_END	OUI
	CMPI.W	#UNDO,D0	CODE UNDO
	BEQ.S	WAIT_KEY_END	OUI
	CMPI.W	#F4,D0		CODE > F4 ?
	BGT.S	WAIT_KEY_BCL	ALORS ON BOUCLE.

WAIT_KEY_END:
	MOVE.W	D0,_CAR		STOCKAGE DU CODE CLAVIER

	MOVEM.L	(SP)+,REGS
	RTS
	
****************************************************************************
* AFF_PANEL
* AFFICHE LE PANEL D'ENTREE
****************************************************************************
AFF_PANEL:
	MOVEM.L	REGS,-(SP)
	
	PEA	_PANEL		AFFICHAGE PANEL D'ENTREE
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

	BSR	AFF_SPEED	AFFICHAGE DE LA VITESSE DE LA RS-232

	BSR	AFF_STATUS	AFFICHAGE MESSAGE STATUS

	BSR	AFF_PATH	AFFICHAGE CHEMIN COURANT
	
	BSR	AFF_SIZE	AFFICHAGE DE LA TAILLE DU FICHIER

	BSR	AFF_FN		AFFICHAGE DU NOM DU FICHIER
		
	MOVEM.L	(SP)+,REGS
	RTS

_PANEL:
	DC.B	27,'E',11,13
	DC.B	' ------------------------------------------------------------------------------',11,13
	DC.B	' ',27,'p',' ST NET-RUNNER',$BF,' 1.0 ',27,'q'
	DC.B	' was written with DEVPAC 2 by Fabien ROYER. ',$BD,' 1991-92 ',11,13
	DC.B	' ------------------------------------------------------------------------------',11,13,11,13
	DC.B	' F1 : SEND A FILE                         UNDO :       BAUDS',11,13
	DC.B	' F2 : RECEIVE A FILE',11,13
	DC.B	' F3 : SELECT PATH / FILE',11,13
	DC.B	' F4 : QUIT                                HELP : INFOS & GREETINGS',0
	EVEN

_PANEL_F1:
	DC.B	27,'Y',32+5,32,27,'p'
	DC.B	' F1 : SEND A FILE       ',27,'q',0
	EVEN
_PANEL_F2:
	DC.B	27,'Y',32+6,32,27,'p'
	DC.B	' F2 : RECEIVE A FILE    ',27,'q',0
	EVEN
_PANEL_F3:
	DC.B	27,'Y',32+7,32,27,'p'
	DC.B	' F3 : SELECT PATH / FILE',27,'q',0
	EVEN
_PANEL_F4:
	DC.B	27,'Y',32+8,32,27,'p'
	DC.B	' F4 : QUIT              ',27,'q',0
	EVEN

****************************************************************************
* HANDSHAKING
* SYNCHRONISATION DES 2 ST PAR ENVOI/RECEPTION DE MESSAGES
****************************************************************************
HANDSHAKING:
	MOVEM.L	REGS,-(SP)
	
	LEA	_MSG_HANDSHK,A0	MESSAGE DE HANDSHAKING EN COURS
	BSR	MSG
	BSR	AFF_STATUS

HANDSHK_BCL
	MOVE.W	#2,-(SP)		APPUI SUR UNE TOUCHE ?
	MOVE.W	#1,-(SP)
	TRAP	#13
	ADDQ.L	#4,SP
	TST.W	D0
	BMI.S	HANDSHK_ERROR		OUI, HANDSHAKING STOPPE
	
	LEA	_R_75_1200,A0	MODE EMISSION
	BSR	XMIT
	LEA	_HEADER,A0	ENVOI DU HEADER
	BSR	XMIT
	LEA	_R_1200_75,A0	MODE RECEPTION
	BSR	XMIT

	CLR.W	_TMP_SIZE	EFFACEMENT DE LA ZONE COMPTEUR

HANDSHK_REP:
	ADDQ.W	#1,_TMP_SIZE	+1 -> COMPTEUR
	CMPI.W	#5,_TMP_SIZE	DEJA A 5 ?
	BEQ.S	HANDSHK_BCL	OUI
	
	MOVE.W	#1,-(SP)	CARACTERE A RECEVOIR ?
	MOVE.W	#1,-(SP)
	TRAP	#13
	ADDQ.L	#4,SP
	TST.W	D0
	BEQ.S	HANDSHK_REP	NON

	MOVE.W	#1,-(SP)	RECUP DU CARACTERE.
	MOVE.W	#2,-(SP)
	TRAP	#13
	ADDQ.L	#4,SP

	MOVE.L	_CHKSUM,D1	RECUP DE LA VARIABLE DANS D1
	LSL.L	#8,D1		DECALAGE DE 8 BITS VERS LA GAUCHE
	MOVE.B	D0,D1		TRANSFERT DE L'OCTET RECU DANS D1
	MOVE.L	D1,_CHKSUM

	CMPI.L	#'EOF!',D1	SIGNAL DE HANDSHAKING REUSSI ?
	BNE.S	HANDSHK_REP	NON
	CLR.W	_CAR		OUI, METTRE _CAR A 0

HANDSHK_END:
	MOVEM.L	(SP)+,REGS	SORTIE
	RTS

HANDSHK_ERROR:
	MOVE.W	#-1,_CAR	HANDSHAKING INTERROMPU
	BRA.S	HANDSHK_END

****************************************************************************
* RECEIVE
* RECEPTION DU FICHIER 
****************************************************************************
RECEIVE:
	MOVEM.L	REGS,-(SP)

	BSR	RS_CFG		CONFIG RS-232	

	MOVEQ	#5,D0		PAUSE DE 5 VBLS
	BSR	PAUSE

	LEA	_LOCK_MINITEL,A0	POSITIONNEMENT DES AIGUILLAGES
	BSR	XMIT

	LEA	_CNX,A0		CONNEXION
	BSR	XMIT

	BSR	HANDSHAKING	PHASE DE HANDSHAKING
	TST.W	_CAR
	BMI	R_TIME_OUT	HANDSHAKING ARRETE VOLONTAIREMENT ?
	
	LEA	_MSG_CNX,A0	MESSAGE DE LIGNE CONNECTEE
	BSR	MSG
	BSR	AFF_STATUS

	TST.B	_FN		NOM DE FICHIER IMPOSE PAR USER ?
	BNE.S	R_FN_IMPOSE	OUI
	LEA	_FN,A0		SINON, PRENDRE CELUI QUI EST TRANSMIT
	BRA.S	R_FILENAME	RECEPTION DES 12 OCTETS DU NOM DE FICHIER
R_FN_IMPOSE:
	LEA	_BUFFER,A0	OCTETS A LA POUBELLE
R_FILENAME:

	BSR	WAIT_HEADER	ATTENTE DU HEADER DE DONNEES
	TST.W	_CAR		TIME OUT ?
	BMI	R_TIME_OUT	OUI

	MOVEQ	#12,D0		12 OCTETS A RECEVOIR
	BSR	RMIT_II
	TST.W	_CAR		TIME OUT ?
	BMI	R_TIME_OUT	OUI
	
	BSR	AFF_FN		AFFICHAGE DU NOM DE FICHIER RECU OU FIXE PAR LE USER
	
	BSR	WAIT_HEADER	ATTENTE DU HEADER DE DONNEES
	TST.W	_CAR		TIME OUT ?
	BMI	R_TIME_OUT	OUI
	
	LEA	_FILE_SIZE,A0	RECEPTION DE LA TAILLE DU FICHIER
	MOVEQ	#6,D0		6 OCTETS A RECEVOIR
	BSR	RMIT_II
	TST.W	_CAR		TIME OUT ?
	BMI	R_TIME_OUT	OUI
	
	LEA	_FILE_SIZE,A0	CONVERSION 6 BITS / 8 BITS
	MOVEQ	#4,D0
	BSR	CONV_6_8
	
	MOVE.L	_FILE_SIZE,_SIZE	RECOPIE DE LA TAILLE DU FICHIER
	
	LEA	_DISPLAY,A0	AFFICHAGE DE LA TAILLE DU FICHIER
	MOVE.L	_SIZE,D0
	BSR	X2C
	BSR	AFF_SIZE

	MOVE.L	_SIZE,D0	CALCUL DU NOMBRE DE BLOCKS A TRANSFERER
	LSR.L	#8,D0
	LSR.L	#1,D0
	MOVE.L	D0,_NB_BLOCKS
	
	BSR	AFF_BLOCKS	AFFICHAGE DU NOMBRE DE BLOCS A TRANSFERER

	CLR.W	-(SP)		OUVERTURE DU FICHIER EN ECRITURE
	PEA	_FN
	MOVE.W	#$3C,-(SP)	FCREATE
	TRAP	#1
	ADDQ.L	#8,SP

	TST.W	D0		ERREUR A LA CREATION ?
	BPL.S	R_CREATE_OK	NON

	LEA	_MSG_CREATE,A0	MESSAGE D'ERREUR A LA CREATION
	BSR	MSG
	BRA	R_END		SORTIE
	
R_CREATE_OK:
	MOVE.W	D0,_HANDLE	RECUP DU HANDLE
	
	LEA	_R_75_1200,A0	MODE EMISSION
	BSR	XMIT
	
	LEA	_W_SUITE,A0	ENVOI CODE SEP 'SUITE'
	MOVEQ	#2,D0
	BSR	XMIT_II

R_RECEPTION:

	LEA	_R_1200_75,A0	MODE RECEPTION
	BSR	XMIT
	
	BSR	WAIT_HEADER	ATTENTE DU HEADER DE DONNEES
	TST.W	_CAR
	BMI	R_TIME_OUT	TIME OUT ?
	BEQ	R_OVER		EOF ?
	
	LEA	_BLK_READ,A0	RECEPTION DE LA TAILLE DU BLOC DES DATAS 'UTILES'
	MOVEQ	#3,D0		NOMBRE D'OCTETS A RECEVOIR
	BSR	RMIT_II
	TST.W	_CAR		TIME OUT ?
	BMI	R_TIME_OUT	OUI

	LEA	_BLK_READ,A0	PASSAGE DE LA ZONE DE 6 A 8 BITS
	MOVEQ	#2,D0		
	BSR	CONV_6_8

	BSR	WAIT_HEADER	ATTENTE DU HEADER DE DONNEES
	TST.W	_CAR		TIME OUT ?
	BMI	R_TIME_OUT	OUI
		
	LEA	_BLK_SIZE,A0	RECEPTION DE LA TAILLE DES DATAS (DATAS + 8EMES BITS)
	MOVEQ	#3,D0		NOMBRE D'OCTETS A RECEVOIR
	BSR	RMIT_II
	TST.W	_CAR		TIME OUT ?
	BMI	R_TIME_OUT	OUI

	LEA	_BLK_SIZE,A0	PASSAGE DE LA ZONE DE 6 A 8 BITS
	MOVEQ	#2,D0		
	BSR	CONV_6_8

	BSR	WAIT_HEADER	ATTENTE DU HEADER DE DONNEES
	TST.W	_CAR		TIME OUT ?
	BMI	R_TIME_OUT	OUI

	LEA	_CHKSUM,A0	RECEPTION DU CHECKSUM POUR LE BLOC A RECEVOIR
	MOVEQ	#6,D0		NOMBRE D'OCTETS A RECEVOIR
	BSR	RMIT_II
	TST.W	_CAR		TIME OUT ?
	BMI	R_TIME_OUT	OUI
		
	LEA	_CHKSUM,A0	PASSAGE DE LA ZONE DE 6 A 8 BITS
	MOVEQ	#4,D0		
	BSR	CONV_6_8

	LEA	_R_75_1200,A0	MODE EMISSION
	BSR	XMIT

	LEA	_W_SUITE,A0	ENVOI CODE SEP 'SUITE'
	MOVEQ	#2,D0
	BSR	XMIT_II

	LEA	_R_1200_75,A0	MODE RECEPTION
	BSR	XMIT

	BSR	WAIT_HEADER	ATTENTE DU HEADER DE DONNEES
	TST.W	_CAR		TIME OUT ?
	BMI	R_TIME_OUT	OUI

	LEA	_MSG_RUNNING,A0	MESSAGE DE TRANSFERT
	BSR	MSG
	BSR	AFF_STATUS

	LEA	_BUFFER,A0	RECEPTION DES DATAS POUR LA LONGUEUR DU BLOC
	MOVE.W	_BLK_SIZE,D0
	BSR	RMIT_II
	TST.W	_CAR		TIME OUT ?
	BMI	R_TIME_OUT	OUI
	
	LEA	_BUFFER,A0	CONVERSION DES DATAS RECUS (+ 7 & 8EMES BITS) DE 6 BITS EN 8 BITS
	MOVE.W	_BLK_READ,D0
	BSR	CONV_6_8

	LEA	_BUFFER,A0	CALCUL DU CHECKSUM POUR LE BLOC RECU
	MOVE.W	_BLK_READ,D0
	BSR	CHKSUM
	
	MOVE.L	_CHKSUM,D0	ERREUR DURANT LA TRANSMISSION ?
	CMP.L	_TMP_CHKSUM,D0
	BEQ.S	R_OK		NON

	LEA	_MSG_CHK_ERR,A0	BLOC MAL RECU
	BSR	MSG
	BSR	AFF_STATUS
	
	LEA	_R_75_1200,A0	MODE EMISSION
	BSR	XMIT

	LEA	_W_CORR,A0	ENVOI CODE SEP 'CORRECTION'
	MOVEQ	#2,D0
	BSR	XMIT_II

	BRA	R_RECEPTION
	
R_OK:
	PEA	_BUFFER		ECRITURE DANS LE FICHIER DES OCTETS RECUS
	MOVEQ	#0,D7		MENAGE DANS D7
	MOVE.W	_BLK_READ,D7
	MOVE.L	D7,-(SP)
	MOVE.W	_HANDLE,-(SP)
	MOVE.W	#$40,-(SP)	FWRITE
	TRAP	#1
	LEA	12(SP),SP

	LEA	_MSG_BLOCK_OK,A0	BLOC BIEN RECU
	BSR	MSG
	BSR	AFF_STATUS
	
	LEA	_R_75_1200,A0	MODE EMISSION
	BSR	XMIT

	LEA	_W_SUITE,A0	ENVOI CODE SEP 'SUITE'
	MOVEQ	#2,D0
	BSR	XMIT_II

	SUBQ.L	#1,_NB_BLOCKS	-1 SUR LE NOMBRE DE BLOCS A TRANSFERER
	BSR	AFF_BLOCKS	AFFICHAGE DU NOMBRE DE BLOCS A TRANSFERER

	BRA	R_RECEPTION

R_OVER:
	LEA	_MSG_OVER,A0	MESSAGE DE FIN DE TRANSMISSION
	BSR	MSG

R_END:
	LEA	_DSC,A0		DECONNEXION
	BSR	XMIT

R_CLOSE:
	MOVE.W	_HANDLE,-(SP)	FCLOSE FICHIER
	MOVE.W	#$3E,-(SP)
	TRAP	#1
	ADDQ.L	#4,SP

	MOVEM.L	(SP)+,REGS
	RTS

R_TIME_OUT:
	LEA	_MSG_TIME_OUT,A0	MESSAGE DE TIME OUT
	BSR	MSG
	BRA.S	R_CLOSE			SORTIE

****************************************************************************
* TRANSMIT
* TRANSFERT DU FICHIER SELECTIONNE
****************************************************************************
TRANSMIT:
	MOVEM.L	REGS,-(SP)

	BSR	DESRS		VIDE LE BUFFER DE LA RS-232
	
	MOVE.L	_SIZE,D0	CALCUL DU NOMBRE DE BLOCKS A TRANSFERER
	LSR.L	#8,D0
	LSR.L	#1,D0
	MOVE.L	D0,_NB_BLOCKS

	CLR.W	-(SP)		FOPEN R/O DU FICHIER A ENVOYER
	PEA	_FN
	MOVE.W	#$3D,-(SP)
	TRAP	#1
	ADDQ.L	#8,SP
	
	TST.W	D0		BIEN OUVERT ?
	BPL.S	TR_OPEN_OK	OUI
	
	LEA	_MSG_OPEN,A0	MSG ERREUR A L'OUVERTURE
	BSR	MSG
	BRA	TR_END		SORTIE

TR_OPEN_OK:
	MOVE.W	D0,_HANDLE	RECUPERATION DU HANDLE

	BSR	RS_CFG		CONFIG RS-232	

	MOVEQ	#5,D0		PAUSE DE 5 VBLS
	BSR	PAUSE

	LEA	_LOCK_MINITEL,A0	AIGUILLAGES
	BSR	XMIT

	LEA	_R_75_1200,A0	MODE EMISSION
	BSR	XMIT
	
	LEA	_MAITRE,A0	MODE MAITRE
	BSR	XMIT
	
	LEA	_CNX,A0		CONNEXION MODEM
	BSR	XMIT
	
	LEA	_PORTEUSE,A0	ENVOIE LA PORTEUSE
	BSR	XMIT
	
	LEA	_MSG_HANDSHK,A0	AFFICHAGE DU MESSAGE D'ATTENTE DE CONNEXION DU CORRESPONDANT
	BSR	MSG
	BSR	AFF_STATUS

	* PHASE DE HANDSHAKING

	LEA	_R_1200_75,A0	MODE RECEPTION
	BSR	XMIT

	BSR	WAIT_HEADER	ATTENTE DU MESSAGE DE CONNEXION
	TST.W	_CAR		TIME OUT ?
	BMI	TR_TIME_OUT	OUI

	LEA	_R_75_1200,A0	MODE EMISSION
	BSR	XMIT

	LEA	_EOF,A0		SIGNAL DE HANDSHAKING REUSSI
	BSR	XMIT
	
	BSR	DESRS		VIDANGE BUFFER RS

	* FIN DE HANDSHAKING

*	MOVE.W	_W_CNX,D0
*	BSR	WAIT_REPLY
*	TST.W	_CAR
*	BMI	TR_TIME_OUT	
	
	LEA	_MSG_CNX,A0	AFFICHAGE DU MESSAGE DE CONNEXION DU CORRESPONDANT
	BSR	MSG
	BSR	AFF_STATUS

	BSR	AFF_BLOCKS	AFFICHAGE DU NOMBRE DE BLOCS A TRANSFERER

	LEA	_HEADER,A0	ENVOI DU HEADER DE DONNEES
	BSR	XMIT

	LEA	_FN,A0		ENVOI DU NOM DE FICHIER A TRANSMETTRE
	MOVEQ	#12,D0
	BSR	XMIT_II

	LEA	_HEADER,A0	ENVOI DU HEADER DE DONNEES
	BSR	XMIT
	
	MOVE.L	_SIZE,_FILE_SIZE	RECOPIE DE LA TAILLE DU FICHIER DANS ZONE DE TRAVAIL

	LEA	_FILE_SIZE,A0	CONVERSION 8 BITS / 6 BITS
	MOVEQ	#4,D0
	BSR	CONV_8_6

	LEA	_FILE_SIZE,A0	ENVOI DE LA TAILLE DU FICHIER
	MOVEQ	#6,D0
	BSR	XMIT_II

	LEA	_R_1200_75,A0	MODE RECEPTION
	BSR	XMIT

	MOVE.W	_W_SUITE,D0	ATTENTE DU CODE 'SUITE'
	BSR	WAIT_REPLY
	TST.W	_CAR		TIME OUT ?
	BMI	TR_TIME_OUT	OUI

TR_READ:	
	PEA	_BUFFER		LECTURE DE 512 OCTETS DU FICHIER
	MOVE.L	#512,-(SP)
	MOVE.W	_HANDLE,-(SP)
	MOVE.W	#$3F,-(SP)
	TRAP	#1
	LEA	12(SP),SP

	MOVE.W	D0,_BLK_READ	SAUVEGARDE DU NOMBRE D'OCTETS LUS
	
	TST.W	D0		TEST CODE RETOUR
	BEQ	TR_EOF		END OF FILE
	BPL.S	TR_BLOC		LECTURE OK
	
	LEA	_MSG_READ,A0	MESSAGE D'ERREUR EN LECTURE DU FICHIER
	BSR	MSG
	BRA	TR_CLOSE	SORTIE
	
TR_BLOC:
	LEA	_BUFFER,A0
	MOVE.W	_BLK_READ,D0
	BSR	CHKSUM			CALCUL DU CHECKSUM
	MOVE.L	_TMP_CHKSUM,_CHKSUM	RECUP DU CHECKSUM

	LEA	_BUFFER,A0		CONVERSION 8/6 BITS DES DATAS DU BUFFER
	MOVE.W	_BLK_READ,D0		NOMBRE D'OCTETS A CONVERTIR
	BSR	CONV_8_6		CONVERTIR
	MOVE.W	_TMP_SIZE,_BLK_SIZE	SAUVEGARDE DE LA TAILLE REELLE DES DATAS
	MOVE.W	_TMP_SIZE,_BLK_DATA	SAUVEGARDE DE LA TAILLE REELLE DES DATAS

	LEA	_BLK_READ,A0		CONVERSION 8/6 BITS DE LA TAILLE DU BLOC LU
	MOVEQ	#2,D0			NOMBRE D'OCTETS A CONVERTIR
	BSR	CONV_8_6		CONVERTIR

	LEA	_BLK_SIZE,A0		CONVERSION 8/6 BITS DE LA TAILLE REELLE DES DATAS A TRANSMETTRE (BLOC CONVERTI + 8EMES BITS)
	MOVEQ	#2,D0			NOMBRE D'OCTETS A CONVERTIR
	BSR	CONV_8_6		CONVERTIR
	
	LEA	_CHKSUM,A0		CONVERSION 8/6 BITS DE LA VALEUR DU CHECKSUM
	MOVEQ	#4,D0			NOMBRE D'OCTETS A CONVERTIR
	BSR	CONV_8_6		CONVERTIR
	
TR_SAME_BLOC:

	LEA	_R_75_1200,A0	MODE EMISSION
	BSR	XMIT
	
	LEA	_HEADER,A0	ENVOI DU HEADER DE DONNEES
	BSR	XMIT

	MOVEQ	#3,D0		TRANSMISSION DE LA TAILLE DU BLOC LU
	LEA	_BLK_READ,A0
	BSR	XMIT_II

	LEA	_HEADER,A0	ENVOI DU HEADER DE DONNEES
	BSR	XMIT

	MOVEQ	#3,D0		TRANSMISSION DE LA TAILLE REELLE DES DATAS
	LEA	_BLK_SIZE,A0
	BSR	XMIT_II

	LEA	_HEADER,A0	ENVOI DU HEADER DE DONNEES
	BSR	XMIT

	MOVEQ	#6,D0		TRANSMISSION DU CHECKSUM
	LEA	_CHKSUM,A0
	BSR	XMIT_II
	
	LEA	_R_1200_75,A0	MODE RECEPTION
	BSR	XMIT

	MOVE.W	_W_SUITE,D0	ATTENTE DE REPONSE
	BSR	WAIT_REPLY
	TST.W	_CAR		TIME OUT ?
	BMI	TR_TIME_OUT	OUI

	LEA	_R_75_1200,A0	MODE EMISSION
	BSR	XMIT
	
	LEA	_MSG_RUNNING,A0	MESSAGE DE TRANSFERT
	BSR	MSG
	BSR	AFF_STATUS

	LEA	_HEADER,A0	ENVOI DU HEADER DE DONNEES
	BSR	XMIT

	MOVE.W	_BLK_DATA,D0	TRANSMISSION DES DATAS (BLOC + 8EMES BITS)
	LEA	_BUFFER,A0
 	BSR	XMIT_II
 	
TR_BLOC_STAT:

	LEA	_R_1200_75,A0	MODE RECEPTION
	BSR	XMIT

TR_BLOC_STAT_2
 	BSR	RMIT		ATTENTE REPONSE SUR L'ETAT DU BLOC
	TST.W	_CAR		TIME OUT ?
	BMI	TR_TIME_OUT	OUI
	CMPI.W	#$13,_CAR	DEBUT D'UN CODE SEP ?
	BNE.S	TR_BLOC_STAT_2	NON
	BSR	RMIT		ATTENTE REPONSE SUR L'ETAT DU BLOC
	CMPI.W	#'H',_CAR	'SUITE' ?
	BNE.S	TR_CHK_CORR	NON
	LEA	_MSG_BLOCK_OK,A0	BLOC BIEN RECU
	BSR	MSG
	BSR	AFF_STATUS
	SUBQ.L	#1,_NB_BLOCKS	-1 SUR LE NOMBRE DE BLOCS A TRANSFERER
	BSR	AFF_BLOCKS	AFFICHAGE DU NOMBRE DE BLOCS A TRANSFERER
	BRA	TR_READ		BLOC SUIVANT

TR_CHK_CORR:
	CMPI.W	#'G',_CAR	'CORRECTION' ?
	BNE.S	TR_BLOC_STAT_2	NON
	LEA	_MSG_CHK_ERR,A0	ERREUR PENDANT LE TRANSFER
	BSR	MSG
	BSR	AFF_STATUS
	BRA	TR_SAME_BLOC	RENVOYER LE MEME BLOC

TR_EOF:	
	LEA	_EOF,A0		SIGNAL DE FIN DE FICHIER / TRANSMISSION
	BSR	XMIT

	LEA	_MSG_OVER,A0
	BSR	MSG

TR_CLOSE:
	MOVE.W	_HANDLE,-(SP)	FCLOSE FICHIER
	MOVE.W	#$3E,-(SP)
	TRAP	#1
	ADDQ.L	#4,SP

	LEA	_DSC,A0		DECONNEXION MODEM
	BSR	XMIT

TR_END:
	MOVEM.L	(SP)+,REGS
	RTS			FIN DE TRANSMISSION

TR_TIME_OUT:
	LEA	_MSG_TIME_OUT,A0	MESSAGE DE TIME OUT
	BSR	MSG
	BRA.S	TR_CLOSE	SORTIE

****************************************************************************
* CONV_8_6
* CONVERSION D'OCTETS CODES SUR 8 BITS EN OCTETS CODES SUR 6 BITS
* PARAMETRES ATTENDUS :
* D0 : NOMBRE D'OCTETS A CONVERTIR
* A0 : ADRESSE DES DONNEES
****************************************************************************
CONV_8_6:
	MOVEM.L	REGS,-(SP)
	
	MOVE.L	A0,-(SP)		SAUVEGARDE DE A0
	LEA	(A0,D0.W),A1		ADRESSE RECUPERATION DES BITS 7 & 8
	SUBQ.W	#1,D0			D0=D0-1
	MOVEQ	#0,D2			MISE A 0 DU COMPTEUR D'OCTETS
	MOVEQ	#0,D3			IDEM POUR LE REGISTRE DE RECUPERATION DES BITS 7 & 8

CONV_BCL:
	MOVE.B	(A0)+,D1		RECUP D'UN OCTET A CONVERTIR
	ADDQ.W	#1,D2			+1 -> COMPTEUR D'OCTETS
	LSL.B	#2,D3			DECALAGE DE 2 BITS VERS LA GAUCHE DE D3
	ANDI.B	#%11000000,D1		NE GARDER QUE LES BITS 7 & 8 DE L'OCTET
	LSR.B	#6,D1			CADRER D1 A DROITE
	OR.B	D1,D3			ECRIRE D1 DANS D3
	ANDI.B	#%00111111,-1(A0)	EFFACEMENT DES BITS 7 & 8 BITS DE L'OCTET SOURCE
	ADDI.B	#32,-1(A0)		+32 -> OCTET SOURCE
	CMPI.W	#3,D2			3 OCTETS TRAITES ?
	BNE.S	CONV_NEXT		PAS ENCORE
	ADDI.B	#32,D3			+32 -> IMAGE DES BITS 7 & 8
	MOVE.B	D3,(A1)+		STOCKAGE DE L'IMAGE DES BITS 7 & 8 POUR CES 3 OCTETS
	MOVEQ	#0,D2			MISE A 0 DU COMPTEUR D'OCTETS
	MOVEQ	#0,D3			IDEM POUR LE REGISTRE DE RECUPERATION DE 8EME BITS
CONV_NEXT:
	DBRA	D0,CONV_BCL	

	TST.W	D2			EST-CE NECESSAIRE DE PADDER ?
	BEQ.S	CONV_NOPAD		NON CAR TROIS OCTETS ONT ETE TRAITES

	MOVEQ	#3,D4			VALEUR DE REFERENCE
	SUB.W	D2,D4			REFERENCE = REFERENCE - COMPTEUR
	LSL.B	#1,D4			REFERENCE = REFERENCE * 2
	LSL.B	D4,D3			DECALER D3 DE (REFERENCE) BITS VERS LA GAUCHE
	ADDI.B	#32,D3			+32 -> IMAGE DES BITS 7 & 8
	MOVE.B	D3,(A1)+		STOCKAGE DE L'IMAGE DES 8EMES BITS

CONV_NOPAD:
	MOVE.L	(SP)+,A0	RESTITUTION DE A0
	SUB.L	A0,A1		CALCUL DE LA TAILLE DU BLOC + L'IMAGE DES BITS 7 & 8
	MOVE.W	A1,_TMP_SIZE	SAUVEGARDE DE LA TAILLE DU BLOC
		
	MOVEM.L	(SP)+,REGS
	RTS

****************************************************************************
* CONV_6_8
* CONVERSION D'OCTETS CODES SUR 6 BITS EN OCTETS CODES SUR 8 BITS
* PARAMETRES ATTENDUS :
* D0 : NOMBRE D'OCTETS A CONVERTIR
* A0 : ADRESSE DES DONNEES
****************************************************************************
CONV_6_8:
	MOVEM.L	REGS,-(SP)

	LEA	(A0,D0.W),A1	RECUPERATION DE L'ADRESSE DE STOCKAGE DES BITS 7 & 8
	SUBQ.W	#1,D0		-1 -> NOMBRE D'OCTETS A CONVERTIR

CONV_6_8_IMG:
	MOVE.B	(A1)+,D1	RECUPERATION DE L'IMAGE DES BITS 7 & 8
	SUBI.B	#32,D1		-32 -> IMAGE DES BITS 7 & 8
	MOVEQ	#0,D2		INITIALISATION DU COMPTEUR DE DECALAGES

CONV_6_8_BCL:
	CMPI.W	#3,D2		3 DECALAGES SUR CETTE IMAGE ?
	BEQ.S	CONV_6_8_IMG	OUI
	ADDQ.W	#1,D2		+1 AU COMPTEUR DE DECALAGES
	LSL.B	#2,D1		DECALAGE DE D1 DE 2 BITS VERS LA GAUCHE
	MOVE.B	D1,D3		COPIE DE D1 DANS D3
	ANDI.B	#%11000000,D3	NE GARDER QUE LES BITS 7 & 8 DE D3
	SUBI.B	#32,(A0)	-32 -> OCTET DATA
	OR.B	D3,(A0)+	REMISE EN PLACE DES BITS 7 & 8 DE L'OCTET DATA
	DBRA	D0,CONV_6_8_BCL	OCTET SUIVANT ...
	
	MOVEM.L	(SP)+,REGS
	RTS

****************************************************************************
* XMIT_II
* PARAMETRES ATTENDUS :
* D0 : NOMBRE D'OCTETS A TRANSMETTRE
* A0 : ADRESSE DES DONNEES
****************************************************************************
XMIT_II:
	MOVEM.L	REGS,-(SP)
	
	SUBQ.L	#1,D0		-1 -> NOMBRE D'OCTETS A TRANSMETTRE

XMIT_II_NEXT:
	MOVE.B	(A0)+,_CAR+1	RECUP D'UN OCTET DE LA CHAINE
	
	MOVEM.L	REGS,-(SP)

XMIT_II_WAIT:	
	MOVE.W	#1,-(SP)	RS PRETE ?
	MOVE.W	#8,-(SP)
	TRAP	#13
	ADDQ.L	#4,SP
	TST.W	D0
	BEQ.S	XMIT_II_WAIT	NON

	MOVE.W	_CAR,-(SP)	SORTIE DU CARACTERE SUR LA RS
	MOVE.W	#1,-(SP)
	MOVE.W	#3,-(SP)
	TRAP	#13
	ADDQ.L	#6,SP

	MOVEM.L	(SP)+,REGS

	DBRA	D0,XMIT_II_NEXT
	
XMIT_II_END:
	MOVEM.L	(SP)+,REGS
	RTS

****************************************************************************
* RS_CFG
* CONFIGURATION DE LA RS-232
****************************************************************************
RS_CFG:
	MOVEM.L	REGS,-(SP)

	MOVE.W	#-1,-(SP)	RS CONF
	MOVE.W	#-1,-(SP)
	MOVE.W	#-1,-(SP)
	MOVE.W	#174,-(SP)
	MOVE.W	#0,-(SP)	
_SPEED:	MOVE.W	#7,-(SP)	1200 DE BASE
	MOVE.W	#15,-(SP)
	TRAP	#14
	LEA	14(SP),SP
	
	MOVEM.L	(SP)+,REGS
	RTS

****************************************************************************
* WAIT_REPLY
* ATTEND LA REPONSE DU CORRESPONDANT
* PARAMETRE ATTENDU :
* D0.W : CODE SEP ATTENDU
****************************************************************************
WAIT_REPLY:
	MOVEM.L	REGS,-(SP)
	
WAIT_REPLY_BCL:
	BSR	RMIT		ATTENTE EN RECEPTION
	TST.W	_CAR		TIME OUT ?
	BMI.S	WAIT_REPLY_END	OUI !
	
	CMPI.B	#$13,_CAR+1	CARACTERE $13 ?
	BNE.S	WAIT_REPLY_BCL	NON
	
	BSR	RMIT		ATTENTE EN RECEPTION DU SUIVANT
	TST.W	_CAR		TIME OUT ?
	BMI.S	WAIT_REPLY_END	OUI !
	MOVE.W	_CAR,D1
	CMP.B	D0,D1		CODE SEP ATTENDU ?
	BNE.S	WAIT_REPLY_BCL	NON
	
WAIT_REPLY_END:
	MOVEM.L	(SP)+,REGS
	RTS

****************************************************************************
* PAUSE
* PARAMETRES ATTENDUS :
* D0 : NOMBRE DE VBLS A ATTENDRE
****************************************************************************
PAUSE:
	MOVEM.L	REGS,-(SP)

PAUSE1:
	CLR.W	_VBL
PAUSE2:
	TST.W	_VBL
	BEQ.S	PAUSE2
	DBRA	D0,PAUSE1
	
	MOVEM.L	(SP)+,REGS
	RTS

****************************************************************************
* VBL
* DETOURNE LA VBL
* AUCUN PARAMETRE ATTENDU
****************************************************************************
VBL:
	MOVEM.L	REGS,-(SP)
	ADDQ.W	#1,_TIME_OUT
	MOVE.W	#1,_VBL
	MOVEM.L	(SP)+,REGS
VBL_END:
	JMP	$0
	
****************************************************************************
* XMIT : ENVOIE DES OCTETS SUR LA PRISE SERIE
* PARAMETRES ATTENDUS :
* A0 : ADRESSE DE LA CHAINE A TRANSMETTRE (DOIT SE TERMINER PAR 0)
****************************************************************************
XMIT:
	MOVEM.L	REGS,-(SP)
	
XMIT_NEXT:
	MOVE.B	(A0)+,_CAR+1	RECUP D'UN OCTET DE LA CHAINE
	TST.B	_CAR+1		ZERO BINAIRE ?
	BEQ.S	XMIT_END	OUI, FIN DE LA CHAINE
	
	MOVEM.L	REGS,-(SP)

XMIT_WAIT:	
	MOVE.W	#1,-(SP)	RS PRETE ?
	MOVE.W	#8,-(SP)
	TRAP	#13
	ADDQ.L	#4,SP
	TST.W	D0
	BEQ.S	XMIT_WAIT	NON

	MOVE.W	_CAR,-(SP)	SORTIE DU CARACTERE SUR LA RS
	MOVE.W	#1,-(SP)
	MOVE.W	#3,-(SP)
	TRAP	#13
	ADDQ.L	#6,SP

	MOVEM.L	(SP)+,REGS

	BRA.S	XMIT_NEXT
	
XMIT_END:
	MOVEM.L	(SP)+,REGS
	RTS

****************************************************************************
* RMIT
* ATTENTE D'UN CARACTERE SUR LA PRISE SERIE
****************************************************************************
RMIT:
	MOVEM.L	REGS,-(SP)

	CLR.W	_TIME_OUT		EFFACEMENT DU TIME OUT

RMIT_BCL:
	CMPI.W	#15*50,_TIME_OUT	15 SECONDES ECOULEES SANS RIEN RECEVOIR ?
	BLE.S	RMIT_CHECK		PAS ENCORE
	MOVE.W	#-1,_CAR		TIME_OUT !
	BRA.S	RMIT_END		SORTIE
RMIT_CHECK:
	MOVE.W	#1,-(SP)		CARACTERE A RECEVOIR ?
	MOVE.W	#1,-(SP)
	TRAP	#13
	ADDQ.L	#4,SP
	TST.W	D0
	BEQ.S	RMIT_BCL		NON

	MOVE.W	#1,-(SP)		RECUP DU CARACTERE.
	MOVE.W	#2,-(SP)
	TRAP	#13
	ADDQ.L	#4,SP

	ANDI.W	#$00FF,D0		MASQUE L'OCTET DE POIDS FORT
	MOVE.W	D0,_CAR			STOCKE L'OCTET
	
RMIT_END:
	MOVEM.L	(SP)+,REGS
	RTS	

****************************************************************************
* RMIT_II
* ATTENTE DE X CARACTERES SUR LA PRISE SERIE
* PARAMETRES ATTENDUS :
* A0 : ADRESSE DE LA ZONE DE RECEPTION
* D0 : NOMBRE D'OCTETS A RECEVOIR
****************************************************************************
RMIT_II:
	MOVEM.L	REGS,-(SP)

	SUBQ.L	#1,D0
	
RMIT_II_BCL:
	BSR.S	RMIT		ATTENTE D'UN OCTET SUR LA RS
	TST.W	_CAR		TIME OUT ?
	BMI.S	RMIT_II_END	OUI
	MOVE.B	_CAR+1,(A0)+	RANGER LE CARACTERE

	DBRA	D0,RMIT_II_BCL	SUIVANT...
	
RMIT_II_END:
	MOVEM.L	(SP)+,REGS
	RTS	

****************************************************************************
* WAIT_HEADER
* ATTENTE DU HEADER DE DONNEES
****************************************************************************
WAIT_HEADER:
	MOVEM.L	REGS,-(SP)

	MOVEQ	#0,D0		MENAGE
	
WAIT_HDR_BCL:
	BSR.S	RMIT		ATTENTE EN RECEPTION
	TST.W	_CAR		TIME OUT ?
	BMI.S	WAIT_HDR_END	OUI !
	
	LSL.L	#8,D0		DECALAGE DE D0 DE 8 BITS VERS LA GAUCHE
	MOVE.B	_CAR+1,D0	TRANSFERT DE L'OCTET RECU DANS D0
	CMPI.L	#'DATA',D0	HEADER DE DONNEES COMPLETEMENT RECU ?
	BEQ.S	WAIT_HDR_END	OUI
	CMPI.L	#'EOF!',D0	SIGNAL DE FIN DE TRANSMISSION / FIN DE FICHIER ?
	BNE.S	WAIT_HDR_BCL	NON
	CLR.W	_CAR		OUI, METTRE _CAR A 0

WAIT_HDR_END:
	MOVEM.L	(SP)+,REGS
	RTS	

****************************************************************************
* X2C
* ROUTINE DE CONVERSION HEXA -> ASCII
* PARAMETRES ATTENDUS :
* D0.L : VALEUR HEXA
* A0 : ADRESSE DE LA ZONE DE RECEPTION
****************************************************************************
X2C:
	MOVEM.L	REGS,-(SP)
	
	MOVEQ	#7,D1		TRAITER 8 FOIS
X2C_BCL:
	ROL.L	#4,D0
	MOVE.B	D0,D2
	ANDI.B	#$0F,D2
	CMPI.B	#9,D2		VALEUR > 9 ?
	BGT.S	X2C_CAR		OUI
	ADDI.B	#$30,D2		VALEUR 0-9
	BRA.S	X2C_WR
X2C_CAR:
	ADDI.B	#$40-9,D2	VALEUR A-F
X2C_WR:
	MOVE.B	D2,(A0)+
	DBRA	D1,X2C_BCL

	MOVEM.L	(SP)+,REGS
	RTS

	
****************************************************************************
* F_SELECT
* AFFICHE LE SELECTEUR DE FICHIERS
* PARAMETRES ATTENDUS :
* A0 : LECTEUR+CHEMIN COURANT
* A1 : FILENAME PAR DEFAUT
* EN RETOUR : INT_OUT+2.W : 0 = ERREUR / 1 = OK
****************************************************************************
F_SELECT:
	MOVEM.L	REGS,-(SP)

	LEA	_FN,A2			REMISE A 0 DU NOM DE FICHIER
	CLR.L	(A2)+
	CLR.L	(A2)+
	CLR.L	(A2)
	
	CLR.L	_SIZE			REMISE A ZERO DE LA TAILLE DU FICHIER

F_SEL_START:
	BSR	GEM_INIT

	DC.W	$A009			MOUSE ON

	MOVE.W	#90,CONTROL		APPEL DU SELECTEUR DE FICHIER
	CLR.W	CONTROL+2
	MOVE.W	#2,CONTROL+4
	MOVE.W	#2,CONTROL+6
	CLR.W	CONTROL+8
	MOVE.L	#_PATH,ADDR_IN
	MOVE.L	#_FN,ADDR_IN+4
	BSR	AES

	BSR	GEM_EXIT

	DC.W	$A00A			MOUSE OFF

	TST.W	INT_OUT+2		ANNULER ?
	BNE.S	FSEL_OK			NON
	BRA	F_SELECT_END		SORTIE

FSEL_OK:
	LEA	_PATH,A0		RECUPERE LE DRIVE CHOISI
	MOVEQ	#0,D0
	MOVE.B	(A0),D0
	SUBI.B	#'A',D0

	MOVE.W	D0,-(SP)		DSETDRIVE
	MOVE.W	#$E,-(SP)
	TRAP	#1
	ADDQ.L	#4,SP

	BSR	COPY_PATH		ELIMINATION DES ETOILES DU CHEMIN DE SELECTION

	PEA	__PATH			DSETPATH
	MOVE.W	#$3B,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP
	
	TST.W	D0			CHEMIN VALIDE ?
	BNE.S	F_SEL_WRONG_PATH	NON

	PEA	_DTA			FSETDTA
	MOVE.W	#$1A,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

	CLR.W	-(SP)			FSFIRST POUR CONNAITRE LA TAILLE DU FICHIER S'IL EXISTE...
	PEA	_FN
	MOVE.W	#$4E,-(SP)
	TRAP	#1
	ADDQ.L	#8,SP
	
	TST.W	D0			FICHIER TROUVE ?
	BPL.S	F_SEL_FILE_FOUND	OUI
	CLR.L	_SIZE			NON MAIS CA N'EST PAS IMPORTANT
	BRA.S	F_SEL_ALL_RIGHT
	
F_SEL_FILE_FOUND:
	MOVE.L	_DTA+26,_SIZE		PATH + FILENAME OK

F_SEL_ALL_RIGHT:
	LEA	_MSG_OK,A0		PATH OK
	BSR	MSG
	BRA.S	F_SELECT_END

F_SEL_WRONG_PATH:
	LEA	_MSG_WRONG_PATH,A0	MESSAGE POUR UN MAUVAIS CHEMIN
	BSR	MSG
F_SEL_WRONG:
	CLR.L	_SIZE		EFFACEMENT DE LA TAILLE DU FICHIER

	PEA	_PING		NON, ALORS BRUIT
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

F_SELECT_END:
	LEA	_DISPLAY,A0
	MOVE.L	_SIZE,D0	AFFICHAGE DE LA TAILLE DU FICHIER
	BSR	X2C
	BSR	AFF_SIZE

	MOVEM.L	(SP)+,REGS
	RTS


COPY_PATH:
	LEA	_PATH,A0	CHEMIN SERVANT AU SELECTEUR
	LEA	__PATH,A1	CHEMIN SERVANT AU DSETPATH
COPY_PATH_BCL:
	CMPI.B	#'*',(A0)	TROUVE ?
	BEQ.S	COPY_PATH_END	OUI
	MOVE.B	(A0)+,(A1)+	ON RECOPIE
	BRA.S	COPY_PATH_BCL
COPY_PATH_END:
	CLR.B	(A1)		MARQUE DE FIN
	RTS

_PING:
	DC.B	7,0
	EVEN

_POS_PATH:
	DC.B	27,'Y',32+12,32,0
	EVEN
_PATH_0:
	DC.B	' CURRENT PATH.: '
_PATH:	DCB.B	128,0
	EVEN

****************************************************************************
GEM_INIT:
	MOVEM.L	REGS,-(SP)

	move.w	#10,control
	clr.w	control+2
	move.w	#1,control+4
	clr.w	control+6
	clr.w	control+8
	BSR	aes
	move.w	int_out,ap_id

	moveq.l	#18,d0
	lea.l	intin,a0
gi_lp:
	move.w	#1,0(a0,d0.w)
	subq.W	#2,d0
	bpl.s	gi_lp
	move.w	#2,20(a0)

	move.w	#100,contrl
	clr.w	contrl+2
	move.w	#12,contrl+4
	move.w	#11,contrl+6
	move.w	#45,contrl+8
	BSR	vdi
	move.w	contrl+12,handle

	move.w	intout,x_max
	move.w	intout+2,y_max

	MOVEM.L	(SP)+,REGS
	rts        

****************************************************************************
GEM_EXIT:
	MOVEM.L	REGS,-(SP)

	move.w	#101,contrl
	clr.w	contrl+2
	clr.w	contrl+4
	clr.w	contrl+6
	clr.w	contrl+8
	move.w	handle,contrl+12
	Bsr.S	vdi

	move.w	#19,control
	clr.w	control+2
	move.w	#1,control+4
	clr.w	control+6
	clr.w	control+8
	Bsr.S	aes
	
	MOVEM.L	(SP)+,REGS
	rts        

ap_id:
	DS.w	1
handle:
	DS.w	1
x_max:
	DS.w	1
y_max:
	DS.w	1

****************************************************************************
aes:
	move.l	#aespb,d1
	move.w	#$c8,d0
	trap	#2
	rts        

****************************************************************************
vdi:
	move.l	#vdipb,d1
	move.w	#$73,d0
	trap	#2
	rts        

****************************************************************************
aespb:
	DC.l	control
	DC.l	global
	DC.l	int_in
	DC.l	int_out
	DC.l	addr_in
	DC.l	addr_out

vdipb:
	DC.l	contrl
	DC.l	intin
	DC.l	ptsin
	DC.l	intout
	DC.l	ptsout


global:
	DS.w	16
control:
	DS.w	10
int_in:
	DS.w	128
int_out:
	DS.w	128
addr_in:
	DS.l	128
addr_out:
	DS.l	128

contrl:
	DS.w	12
intin:
	DS.w	128
ptsin:
	DS.w	128
intout:
	DS.w	128
ptsout:
	DS.w	128

****************************************************************************	
* INIT_PATH
* FIXE LE CHEMIN COURANT POUR LE SELECTEUR DE FICHIER
****************************************************************************
INIT_PATH:
	MOVEM.L	REGS,-(SP)
	
	MOVE.W	#$19,-(SP)	DGETDRIVE
	TRAP	#1
	ADDQ.L	#2,SP

	LEA	_PATH,A0	ADRESSE DU CHEMIN PAR DEFAUT
	ADDI.B	#'A',D0		+ 'A' -> D0
	MOVE.B	D0,(A0)+	DRIVE COURANT DANS LE CHEMIN
	MOVE.B	#':',(A0)+	AJOUTE
	
	CLR.W	-(SP)		DRIVE COURANT
	MOVE.L	A0,-(SP)	ADRESSE POUR LA REPONSE
	MOVE.W	#$47,-(SP)	DGETPATH
	TRAP	#1
	ADDQ.L	#8,SP

	LEA	_PATH,A0
INIT_BCL:
	TST.B	(A0)+
	BNE.S	INIT_BCL
	MOVE.B	#'\',-(A0)
	ADDQ.L	#1,A0
	MOVE.B	#'*',(A0)+	
	MOVE.B	#'.',(A0)+
	MOVE.B	#'*',(A0)+

	MOVEM.L	(SP)+,REGS
	RTS

****************************************************************************	
* AFF_PATH
* AFFICHE LE CHEMIN COURANT 
****************************************************************************
AFF_PATH:
	MOVEM.L	REGS,-(SP)
	
	PEA	_POS_PATH
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

	PEA	_PATH_0
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

	MOVEM.L	(SP)+,REGS
	RTS

****************************************************************************
* AFF_STATUS
* AFFICHE LE MESSAGE D'ETAT
****************************************************************************
AFF_STATUS:
	MOVEM.L	REGS,-(SP)
	
	PEA	_POS_STATUS
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

	PEA	_MSG
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

	MOVEM.L	(SP)+,REGS
	RTS

****************************************************************************	
* AFF_SIZE
* AFFICHE LA TAILLE DU FICHIER
****************************************************************************
AFF_SIZE:
	MOVEM.L	REGS,-(SP)
	
	PEA	_POS_SIZE
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

	PEA	_DISPLAY
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

	MOVEM.L	(SP)+,REGS
	RTS

_POS_SIZE:
	DC.B	27,'Y',32+14,32,' FILE SIZE....: $',0
	EVEN

****************************************************************************	
* AFF_BLOCKS
* AFFICHE LE NOMBRE DE BLOCS RESTANT A TRANSFERER
****************************************************************************
AFF_BLOCKS:
	MOVEM.L	REGS,-(SP)
	
	LEA	_BLOCKS,A0
	MOVE.L	_NB_BLOCKS,D0
	BSR	X2C

	PEA	_POS_BLOCKS
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

	PEA	_BLOCKS
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

	MOVEM.L	(SP)+,REGS
	RTS

_POS_BLOCKS:
	DC.B	27,'Y',32+18,32,' BLOCKS LEFT..: $',0
	EVEN

****************************************************************************	
* AFF_FN
* AFFICHE LE NOM DU FICHIER
****************************************************************************
AFF_FN:
	MOVEM.L	REGS,-(SP)
	
	PEA	_POS_FN
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

	PEA	_FN
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

	MOVEM.L	(SP)+,REGS
	RTS

_POS_FN:
	DC.B	27,'Y',32+16,32,' FILE NAME....: ',0
	EVEN

****************************************************************************
* CALCUL DU CHECKSUM SUR UN BLOC DE X OCTETS
* PARAMETRE ATTENDU :
* A0 : ADRESSE DU BLOC
* D0 : TAILLE DU BLOC
****************************************************************************
CHKSUM:
	MOVEM.L	REGS,-(SP)
			
	MOVEQ	#0,D1		MENAGE DANS D1,D2
	MOVE.L	D1,D2
	SUBQ.L	#1,D0		-1 SUR LE NOMBRE D'OCTETS
	
CHK_BCL:
	MOVE.B	(A0)+,D1
	ADD.L	D1,D2
	DBRA	D0,CHK_BCL
	MOVE.L	D2,_TMP_CHKSUM
	
	MOVEM.L	(SP)+,REGS
	RTS

****************************************************************************
* AFFICHAGE DU STATUS
* PARAMETRE ATTENDU
* A0 : ADRESSE MESSAGE
****************************************************************************
MSG:
	MOVEM.L	REGS,-(SP)
	
	LEA	_MSG,A1		ADRESSE DE LA ZONE D'AFFICHAGE DU MESSAGE
MSG_AFF:
	TST.B	(A1)		FIN DE LA ZONE ?
	BEQ.S	MSG_END		OUI, SORTIE...
	TST.B	(A0)		FIN DU MESSAGE A AFFICHER ?
	BEQ.S	MSG_STOP	OUI
	MOVE.B	(A0)+,(A1)+	TRANSFERT DU MESSAGE DANS LA ZONE
	BRA.S	MSG_AFF
MSG_STOP:
	MOVE.B	#' ',(A1)+	EFFACEMENT DERRIERE LA FIN DU MESSAGE
	BRA.S	MSG_AFF
MSG_END:
	MOVEM.L	(SP)+,REGS
	RTS	

_POS_STATUS:
	DC.B	27,'Y',32+10,32,' STATUS.......: ',0
	EVEN
_MSG:
	DCB.B	60,' '
	DC.B	0
	EVEN

****************************************************************************
* AFFICHAGE DU HELP
****************************************************************************
HELP_PANEL:
	MOVEM.L	REGS,-(SP)

	BSR	DESRS		VIDANGE BUFFER RS
	
	BSR	DESBUF		VIDANGE BUFFER CLAVIER
	
	PEA	_HELP		AFFICHAGE DU HELP
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP
	
	BSR	WAIT_KEY	ATTENTE D'UNE TOUCHE
	
	MOVEM.L	(SP)+,REGS
	RTS

****************************************************************************	
* AFF_SPEED
* AFFICHE LA VITESSE COURANTE DE LA RS-232
****************************************************************************
AFF_SPEED:
	MOVEM.L	REGS,-(SP)
	
	PEA	_POS_SPEED
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

	PEA	_BAUDS
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

	MOVEM.L	(SP)+,REGS
	RTS

_POS_SPEED:
	DC.B	27,'Y',32+5,32+49,0
	EVEN

_BAUDS:
	DC.B	' 1200',0
	EVEN

****************************************************************************
* TEXTE DU HELP
****************************************************************************
	DATA

_HELP:
	DC.B	27,'E',7
	DC.B	' HI !',11,13
	DC.B	' ST NET-RUNNER WAS WRITTEN IN 68000 WITH THE POWERFUL DEVPAC 2.',11,13
	DC.B	' THIS PROGRAM IS PUBLIC DOMAIN AND NATURALLY FREE.',11,13
	DC.B	' ------------------------------------------------------------------------------',11,13
	DC.B	' HOW TO USE IT ?',11,13
	DC.B	' VERY EASY ! YOU JUST NEED 2 ST COMPUTERS & EITHER A MINITEL OR A MODEM',11,13
	DC.B	' OR EVEN A NULL-MODEM CABLE.',11,13
	DC.B	' WHEN EVERYTHING IS CORRECTLY CONNECTED, YOU CAN START USING ST NET-RUNNER.',11,13
	DC.B	' SELECT THE FILE YOU WISH TO SEND WITH F3, THEN PRESS F1.',11,13
	DC.B	' TO RECEIVE THE FILE, YOU JUST HAVE TO PRESS F2.',11,13
	DC.B	' DURING HANDSHAKING, PRESSING ANY KEY WILL ABORT. OTHERWISE, THE TIME-OUT IS',11,13
	DC.B	' AUTOMATICALLY HANDLED.',11,13
	DC.B	' IF YOU GIVE NO FILENAME, THE DEFAULT IS THE NAME OF THE FILE TO BE SENT.',11,13
	DC.B	" YOU CAN CHANGE THE BAUD RATE USING THE 'UNDO' KEY",11,13
	DC.B	' ------------------------------------------------------------------------------',11,13
	DC.B	" THIS PROGRAM WAS GREAT FUN TO WRITE & I HOPE YOU'LL HAVE GREAT FUN USING IT !",11,13
	DC.B	' IF YOU HAVE ANY SUGGESTION OR IF YOU WANT TO HAVE A COPY OF THE SOURCE',11,13
	DC.B	' PLEASE CONTACT ME AT THE FOLLOWING ADDRESS :',11,13
	DC.B	'                                                 FABIEN ROYER',11,13
	DC.B	'                                                 18, BD DU SUD-EST',11,13
	DC.B	'                                                 92000 NANTERRE. (FRANCE)',11,13,11,13
	DC.B	' SPECIAL THANX TO D. NARDEAU FOR TESTING THE PROGRAM FOR HOURS, AND [STJC] FROM',11,13
	DC.B	' STmag FOR HIS HELPFUL HINTS.',11,13
	DC.B	'                             - PRESS HELP NOW -',0
	EVEN

****************************************************************************
* TABLEAU DES VITESSES RS-232
****************************************************************************
_TAB_SPEED:
	DC.B	'19200'
	EVEN
	DC.B	' 9600'
	EVEN
	DC.B	' 4800'
	EVEN
	DC.B	' 3600'
	EVEN
	DC.B	' 2400'
	EVEN
	DC.B	' 2000'
	EVEN
	DC.B	' 1800'
	EVEN
	DC.B	' 1200'
	EVEN

****************************************************************************
* MESSAGES
****************************************************************************

_WRONG_REZ:
	DC.B	7,27,'E','MEDIUM OR HIGH RESOLUTION ONLY !',0
	EVEN

_MSG_WRONG_PATH:
	DC.B	"INVALID PATH !",0
	EVEN

_MSG_OK:
	DC.B	"ALL RIGHT !",0
	EVEN

_MSG_OPEN:
	DC.B	"CAN'T OPEN THIS FILE. SELECT AGAIN !",0
	EVEN

_MSG_CREATE:
	DC.B	"CAN'T CREATE THIS FILE. TRANSFER ABORTED !",0
	EVEN

_MSG_READ:
	DC.B	"READ ERROR ON FILE. TRANSFER ABORTED !",0
	EVEN

_MSG_CNX:
	DC.B	"LINE CONNECTED...",0
	EVEN

_MSG_BLOCK_OK:
	DC.B	"BLOCK OK...",0
	EVEN

_MSG_CHK_ERR:
	DC.B	"CHECKSUM ERROR. TRANSFERING SAME BLOCK !",0
	EVEN

_MSG_OVER:
	DC.B	"TRANSFER NORMAL TERMINATION.",0
	EVEN

_MSG_TIME_OUT:
	DC.B	"TIME OUT ! TRANSFER ABORTED !",0
	EVEN

_MSG_RUNNING:
	DC.B	"NET RUNNING...",0
	EVEN

_MSG_HANDSHK:
	DC.B	"HANDSHAKING...",0
	EVEN

****************************************************************************
* HEADERS
****************************************************************************

* HEADER POUR LES DONNEES
_HEADER:
	DC.B	'DATA',0
	EVEN

* HEADER POUR LA FIN DE FICHIER / TRANSMISSION
_EOF:
	DC.B	'EOF!',0
	EVEN
	
****************************************************************************
* CODES A DETECTER EN ATTENTE DE REPONSE
****************************************************************************

_W_CNX:
	DC.W	'S'

* CODE SEP 'SUITE'	
_W_SUITE:
	DC.B	$13,'H'

* CODE SEP 'CORRECTION'	
_W_CORR:
	DC.B	$13,'G'

****************************************************************************
* CODES DESTINES AU PROTOCOLE DU MINITEL
****************************************************************************
	
* CODES CONNEXION MODEM
_CNX:	DC.B	$1B,$39,$68,0
	EVEN

* CODES DECONNEXION MODEM
_DSC:	DC.B	$1B,$39,$67,0
	EVEN

* CODES RETOURNEMENT MODEM 75/1200 BAUDS
_R_75_1200:
	DC.B	$13,$4D,0
	EVEN

* CODES RETOURNEMENT MODEM 1200/75 BAUDS
_R_1200_75:
	DC.B	$13,$4C,0
	EVEN

* CODES PORTEUSE
_PORTEUSE:
	DC.B	$1B,$39,$53,0
	EVEN

* CODES POUR LE MODE MAITRE
_MAITRE:
	DC.B	$1B,$39,$6F,0
	EVEN

_LOCK_MINITEL:
* RESET VIDEOTEX
	DC.B	$1B,$39,$7F
* COUPE R=MODEM E=CLAVIER
	DC.B	$1B,$3B,$60,$5A,$51
* COUPE R=ECRAN E=MODEM
	DC.B	$1B,$3B,$60,$58,$52
* ACTIVE R=MODEM E=PRISE
	DC.B	$1B,$3B,$61,$5A,$53
* ACTIVE R=PRISE E=MODEM
	DC.B	$1B,$3B,$61,$5B,$52
* CLS MINITEL,MESSAGE & TRANSPARENCE ECRAN
	DC.B	$C,$1B,$5D,'NATURALLY WIRED !',$1B,$25,0
	EVEN

****************************************************************************
* VARIABLES PROGRAMME
****************************************************************************	
	BSS

_VBL:
	DS.W	1
_TIME_OUT:
	DS.W	1
_SAVESSP:
	DS.L	1
_CAR:
	DS.W	1

_BUFFER:
	DS.B	512+171
	EVEN

_BLK_READ:
	DS.W	1
	DS.B	1
	EVEN

_BLK_SIZE:
	DS.W	1
	DS.B	1
	EVEN

_BLK_DATA:
	DS.W	1

_CHKSUM:
	DS.L	1
	DS.W	1

_TMP_CHKSUM:
	DS.L	1
	
_DTA:
	DS.B	44
	EVEN
_HANDLE:
	DS.W	1

__PATH:	DS.B	128
	EVEN

_FN:	DS.L	3
	DS.B	1
	EVEN

_DISPLAY:
	DS.L	2
	DS.B	1
	EVEN

_BLOCKS:
	DS.L	2
	DS.B	1
	EVEN

_NB_BLOCKS:
	DS.L	1
	
_SIZE:
	DS.L	1

_TMP_SIZE:
	DS.W	1

_FILE_SIZE:
	DS.L	1
	DS.W	1

	END