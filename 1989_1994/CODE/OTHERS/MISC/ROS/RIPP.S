	OUTPUT	.RO
	MOVE	#$2700,SR
	CLR.B	$FFFFFA07
	CLR.B	$FFFFFA09
	LEA	$8.W,A0
	MOVE.L	A0,A3
	LEA	BUFF(PC),A1
	MOVE.L	A1,A2		a2: adr buffer
	MOVE	#FRIPP-RIPP,D0
	MOVE	D0,D1
	MOVE	D0,D7
	BRA.S	B_BRECO
BRECO	MOVE.B	(A0)+,(A1)+
B_BRECO	DBRA	D0,BRECO
	MOVE.L	A0,A5		a5: end of copie src
	LEA	RIPP(PC),A0
	MOVE.L	A3,A6		a6: $8
	BRA.S	B_BRECO1
BRECO1	MOVE.B	(A0)+,(A3)+
B_BRECO1	DBRA	D1,BRECO1
	JMP	(A6)
** A2=> ADRESSE DU BUFFER
** D7=> LONGUEUR DU RIPPEUR
** A5=> ADRESSE DE FIN DE LA PARTIE RECOPIEE
RIPP
	LEA	$80008,A0		RECOPIE LA PARTIE
	SUBQ	#1,D7		OU SE TROUVE MAINTENANT
BRECO2	MOVE.B	(A2)+,(A0)+		LE RIPPEUR
	DBRA	D7,BRECO2

BRECO3	MOVE.B	(A5)+,(A0)+
	MOVE	A5,$FFFF8240.W
	CMP.L	#$80000,A5
	BLT.S	BRECO3
	CLR	$FFFF8240.W
	
	LEA	LOAD(PC),A0
	LEA	FLOAD(PC),A1
	LEA	$78000,A2
	MOVE.L	A2,A3
BRECO4	MOVE.B	(A0)+,(A2)+
	CMP.L	A1,A0
	BLT.S	BRECO4
	JMP	(A3)
LOAD	LEA	NAME(PC),A0
	LEA	$8.W,A1
	BSR	LOADING
	MOVE.L	$4.W,A0
	JMP	(A0)
NAME	DC.B	"GEM",0
LOADING	INCBIN	B:\DMA1.BIN
FLOAD
FRIPP
BUFF	DS.B	FRIPP-RIPP
	include	rostruct.s
