KEY_FIRE = $1C
KEY_UP = $50
KEY_DOWN = $48

MAIN	CLR.L	-(SP)
	MOVE.W	#$20,-(SP)
	TRAP	#1
	ADDQ.W	#6,SP

DEBUT_CLEAN	LEA	DEB_BSS,A0
	LEA	FIN_BSS,A1
	MOVEQ	#0,D0
.CONT_EFF	MOVE.L	D0,(A0)+
	CMPA.L	A0,A1
	BGT.S	.CONT_EFF

	MOVEQ	#0,D0
	MOVEQ	#0,D1
	MOVEQ	#0,D2
	MOVEQ	#0,D3
	MOVEQ	#0,D4
	MOVEQ	#0,D5
	MOVEQ	#0,D6
	MOVEQ	#0,D7
	MOVEM.L	D0-D7,$FFFF8240.W

	MOVE.B	#1,$FFFF8260.W

	BSR	PREP_ECR
	BSR	PREPA_LOG_EXP
	BSR	PREPA_DOTS

	LEA	GFX,A0
	MOVE.L	SCREEN1,A1
	MOVE.L	SCREEN2,A2
	LEA	2+160*39(A1),A1
	LEA	2+160*39(A2),A2
	MOVE.W	#40*25-1,D7
.COPY	MOVE.W	(A0),(A1)
	MOVE.W	(A0)+,(A2)
	ADDQ.W	#4,A1
	ADDQ.W	#4,A2
	DBRA	D7,.COPY

	LEA	GFX2,A0
	MOVE.L	SCREEN1,A1
	MOVE.L	SCREEN2,A2
	LEA	2+160*100(A1),A1
	LEA	2+160*100(A2),A2
	MOVE.W	#40*100-1,D7
.COPY2	MOVE.W	(A0),(A1)
	MOVE.W	(A0)+,(A2)
	ADDQ.W	#4,A1
	ADDQ.W	#4,A2
	DBRA	D7,.COPY2

	MOVE.W	#120,Y_ACT	;Y=120
	MOVE.W	#1,NOEUD_VISê	;BOF...
	MOVE.W	#0,NOEUD_ACT	;ON SE PLACE AU PREMIER
	CLR.W	STATUS	;ON EST IMMOBILE
	CLR.L	BUF_EFF_ARROW
	SF	FLAG_SORT
	ST	FLAG_ENTRE
	MOVE.W	#4,CNT_FADE
	MOVE.L	#FADE_UP,ADR_FADE

	MOVE.W	#$2700,SR
	CLR.B	$FFFFFA07.W
	CLR.B	$FFFFFA09.W
	BSET	#0,$FFFFFA07.W
	BSET	#0,$FFFFFA13.W
	BSET	#6,$FFFFFA09.W
	BSET	#6,$FFFFFA15.W
	MOVEQ	#1,D0
	JSR	ZIK
	BCLR	#3,$FFFFFA17.W
	MOVE.L	#IT_CLAVIER,$118.W
	MOVE.L	#VBLR,$70.W
	CLR.W	NB_VBL
	MOVE.W	#$2300,SR

IT_VBL	BSR	VSYNC

	TST.B	FLAG_ENTRE
	BNE.S	.NO_FIRE
	TST.B	FIRE
	BEQ.S	.NO_FIRE
	ST	FLAG_SORT
	MOVE.W	#4,CNT_FADE
	MOVE.L	#FADE_DOWN,ADR_FADE
.NO_FIRE
	TST.B	FLAG_ENTRE
	BEQ.S	.ON_ENTRE_PAS
	MOVE.L	ADR_FADE,A0
	MOVE.W	(A0)+,$FFFF8240.W
	MOVE.W	(A0)+,$FFFF8242.W
	MOVE.W	(A0),$FFFF8244.W
	MOVE.W	(A0)+,$FFFF8246.W
	MOVE.L	A0,ADR_TB_FADE
	MOVE.L	#TB_FADE,$120.W
	MOVE.B	#8,$FFFFFA1B.W
	MOVE.B	#100,$FFFFFA21.W
	CMPI.W	#$1234,-6-2(A0)
	BNE.S	.OK_2
	SF	FLAG_ENTRE
	BRA	.NEXT
.OK_2	TST.W	CNT_FADE
	BGT.S	.PAS_ENCORE_2
	MOVE.W	#3,CNT_FADE
	LEA	-6-12(A0),A0
	MOVE.L	A0,ADR_FADE
.PAS_ENCORE_2	SUBQ.W	#1,CNT_FADE
	BRA	.NEXT

.ON_ENTRE_PAS	TST.B	FLAG_SORT
	BEQ.S	.ON_RESTE
	MOVE.L	ADR_FADE,A0
	MOVE.W	(A0)+,$FFFF8240.W
	MOVE.W	(A0)+,$FFFF8242.W
	MOVE.W	(A0),$FFFF8244.W
	MOVE.W	(A0)+,$FFFF8246.W
	MOVE.L	A0,ADR_TB_FADE
	MOVE.L	#TB_FADE,$120.W
	MOVE.B	#8,$FFFFFA1B.W
	MOVE.B	#100,$FFFFFA21.W
	CMPI.W	#$1234,6(A0)
	BNE.S	.OK
	JMP	MAKE_ACTION
.OK	TST.W	CNT_FADE
	BGT.S	.PAS_ENCORE
	MOVE.W	#3,CNT_FADE
	ADDQ.W	#6,A0
	MOVE.L	A0,ADR_FADE
.PAS_ENCORE	SUBQ.W	#1,CNT_FADE
	BRA.S	.NEXT

.ON_RESTE	MOVE.L	#TB0,$120.W
	MOVE.B	#8,$FFFFFA1B.W
	MOVE.B	#100,$FFFFFA21.W

	MOVE.W	#1,$FFFF8240.W
	MOVE.W	#$777,$FFFF8242.W
	MOVE.W	#$402,$FFFF8244.W
	MOVE.W	#$402,$FFFF8246.W

.NEXT	BSR	AFFICHE_STARS

	MOVE.W	BUF_EFF_ARROW,D0
	BSR	EFFAC_ARROW

	LEA	BUF_CLAV,A0
	MOVEQ	#0,D0
	TST.B	(A0)+
	BEQ.S	.NO_1
	ADDQ.W	#1,D0
.NO_1	TST.B	(A0)+
	BEQ.S	.NO_2
	ADDQ.W	#2,D0
.NO_2	ADD.W	D0,D0
	ADD.W	D0,D0
	LEA	RT_CLAV,A0
	MOVE.L	(A0,D0.W),A0
	JSR	(A0)

	MOVE.W	STATUS,D0
	ADD.W	D0,D0
	ADD.W	D0,D0
	LEA	RT_ACT,A0
	MOVE.L	(A0,D0.W),A0
	JSR	(A0)

	MOVE.W	Y_ACT,D0
	MOVE.W	D0,BUF_EFF_ARROW
	BSR	AFFICH_ARROW

	LEA	BUF_EFF_ARROW,A0
	MOVE.L	(A0),D0
	SWAP	D0
	MOVE.L	D0,(A0)

	BSR	SWAPEC

	BRA	IT_VBL

MAKE_ACTION	MOVE.W	NOEUD_VISê,D0
	ADD.W	D0,D0
	ADD.W	D0,D0
	LEA	ADR_ACTIONS,A0
	MOVE.L	(A0,D0.W),A0
	JSR	(A0)
	JMP	DEBUT_CLEAN

ON_MONTE	CMPI.W	#2,STATUS
	BNE.S	.C_EST_BON
	;ON DESCENDAIT JUSTE AVANT
	MOVE.W	NOEUD_VISê,NOEUD_ACT
	BRA.S	.OK_ON_MONTE
.C_EST_BON	TST.W	NOEUD_ACT
	BGT.S	.OK_ON_MONTE
	;MONTêE IMPOSSIBLE, ON EST DêJ∂ EN HAUT
	RTS
.OK_ON_MONTE	MOVE.W	NOEUD_ACT,D0
	SUBQ.W	#1,D0
	MOVE.W	D0,NOEUD_VISê
	MOVE.W	#1,STATUS	;ON ENGRANGE LA SEQUENCE 'MONTêE'
;	SUBQ.W	#1,Y_ACT
	RTS

ON_DESCEND	CMPI.W	#1,STATUS
	BNE.S	.C_EST_BON
	MOVE.W	NOEUD_VISê,NOEUD_ACT
	BRA.S	.OK_ON_DESCEND
.C_EST_BON	CMPI.W	#3,NOEUD_ACT
	BLT.S	.OK_ON_DESCEND
	;DESCENTE IMPOSSIBLE, ON EST DêJ∂ EN BAS
	RTS
.OK_ON_DESCEND	MOVE.W	NOEUD_ACT,D0
	ADDQ.W	#1,D0
	MOVE.W	D0,NOEUD_VISê
	MOVE.W	#2,STATUS	;ON ENGRANGE LA SêQUENCE 'DESCENTE'
;	ADDQ.W	#1,Y_ACT
	RTS

ON_HALLUCINE	RTS
AUCUN_APPUI	RTS

RT_CLAV	DC.L	AUCUN_APPUI
	DC.L	ON_MONTE
	DC.L	ON_DESCEND
	DC.L	ON_HALLUCINE

RIEN_DU_TOUT	RTS

ON_MONTAIT	MOVE.W	Y_ACT,D0
	MOVE.W	NOEUD_VISê,D1
	ADD.W	D1,D1
	LEA	COOR_NOEUDS,A0
	MOVE.W	(A0,D1.W),D1	;Y DU NOEUD VISê
	CMP.W	D0,D1
	BLT.S	.ON_PEUT_MONTER
	;SINON ON EST ARRIVêE
	MOVE.W	NOEUD_VISê,NOEUD_ACT
	CLR.W	STATUS
	LEA	BUF_CLAV,A0
	MOVEQ	#0,D0
	TST.B	(A0)+
	BEQ.S	.NO_1
	ADDQ.W	#1,D0
.NO_1	TST.B	(A0)+
	BEQ.S	.NO_2
	ADDQ.W	#2,D0
.NO_2	CMPI.W	#1,D0
	BEQ.S	.ALWAYS_UP
	RTS
.ALWAYS_UP	TST.W	NOEUD_ACT
	BGT.S	.OK_ON_MONTE
	;MONTêE IMPOSSIBLE, ON EST DêJ∂ EN HAUT
	RTS
.OK_ON_MONTE	MOVE.W	NOEUD_ACT,D0
	SUBQ.W	#1,D0
	MOVE.W	D0,NOEUD_VISê
	MOVE.W	#1,STATUS	;ON ENGRANGE LA SEQUENCE 'MONTêE'
	SUBQ.W	#1,Y_ACT
	RTS
.ON_PEUT_MONTER	SUBQ.W	#1,Y_ACT
	RTS

ON_DESCENDAIT	MOVE.W	Y_ACT,D0
	MOVE.W	NOEUD_VISê,D1
	ADD.W	D1,D1
	LEA	COOR_NOEUDS,A0
	MOVE.W	(A0,D1.W),D1	;Y DU NOEUD VISê
	CMP.W	D0,D1
	BGT.S	.ON_PEUT_DESCENDRE
	;SINON ON EST ARRIVêE
	MOVE.W	NOEUD_VISê,NOEUD_ACT
	CLR.W	STATUS
	LEA	BUF_CLAV,A0
	MOVEQ	#0,D0
	TST.B	(A0)+
	BEQ.S	.NO_1
	ADDQ.W	#1,D0
.NO_1	TST.B	(A0)+
	BEQ.S	.NO_2
	ADDQ.W	#2,D0
.NO_2	CMPI.W	#2,D0
	BEQ.S	.ALWAYS_DOWN
	RTS
.ALWAYS_DOWN	CMPI.W	#3,NOEUD_ACT
	BLT.S	.OK_ON_DESCEND
	;DESCENTE IMPOSSIBLE, ON EST DêJ∂ EN BAS
	RTS
.OK_ON_DESCEND	MOVE.W	NOEUD_ACT,D0
	ADDQ.W	#1,D0
	MOVE.W	D0,NOEUD_VISê
	MOVE.W	#2,STATUS	;ON ENGRANGE LA SêQUENCE 'DESCENTE'
	ADDQ.W	#1,Y_ACT
	RTS
.ON_PEUT_DESCENDRE
	ADDQ.W	#1,Y_ACT
	RTS

RT_ACT	DC.L	RIEN_DU_TOUT
	DC.L	ON_MONTAIT
	DC.L	ON_DESCENDAIT

	;D0=Y_ACT
AFFICH_ARROW	MOVE.L	SCREEN2,A0
	MULS.W	#160,D0
	ADDA.L	D0,A0
	LEA	ARROW_GFX,A1
N	SET	0
	REPT	16
	MOVE.W	32(A1),N+156(A0)
	MOVE.W	(A1)+,N(A0)
N	SET	N+160
	ENDR
	RTS

	;D0=Y DE LA FLECHE A EFFACER
EFFAC_ARROW	MOVE.L	SCREEN2,A0
	MULS.W	#160,D0
	ADDA.L	D0,A0
	MOVEQ	#0,D0
N	SET	0
	REPT	16
	MOVE.W	D0,N(A0)
	MOVE.W	D0,N+156(A0)
N	SET	N+160
	ENDR
	RTS

TB0	CLR.W	$FFFF8240.W
	MOVE.W	#$752,$FFFF8242.W
	MOVE.W	#$444,$FFFF8244.W
	CLR.B	$FFFFFA1B.W
	RTE

TB_FADE	MOVE.L	A0,-(SP)
ADR_TB_FADE = *+2
	LEA	$12345678,A0
	MOVE.W	(A0)+,$FFFF8240.W
	MOVE.W	(A0)+,$FFFF8242.W
	MOVE.W	(A0)+,$FFFF8244.W
	CLR.B	$FFFFFA1B.W
	MOVE.L	(SP)+,A0
	RTE

IT_CLAVIER	MOVEM.L	D0/A0/A1,-(SP)
	MOVEQ	#0,D0
	MOVE.B	$FFFFFC02.W,D0
	CMPI.W	#$F0,D0
	BGE.S	.ON_SORT
	CMPI.B	#KEY_FIRE,D0
	BNE.S	.TST2
	ST	FIRE
	BRA.S	.ON_SORT
.TST2	CMPI.B	#$80+KEY_FIRE,D0
	BNE.S	.TST3
	SF	FIRE
	BRA.S	.ON_SORT
.TST3	;ACTIVATION POTENTIELLE
	LEA	TST_CLAV(PC),A0
	LEA	BUF_CLAV(PC),A1
	CMP.B	(A0)+,D0
	BNE.S	.NOT_1
	ST	(A1)
	BRA.S	.ON_SORT
.NOT_1	CMP.B	(A0)+,D0
	BNE.S	.NOT_2
	ST	1(A1)
	BRA.S	.ON_SORT
.NOT_2	;DESACTIVATION POTENTIELLE
	CMP.B	(A0)+,D0
	BNE.S	.NOT_4
	SF	(A1)
	BRA.S	.ON_SORT
.NOT_4	CMP.B	(A0)+,D0
	BNE.S	.NOT_5
	SF	1(A1)
.NOT_5	
.ON_SORT	MOVEM.L	(SP)+,D0/A0/A1
	RTE

FIRE	DS.B	1
BUF_CLAV	DS.B	2
	EVEN
TST_CLAV	DC.B	KEY_DOWN,KEY_UP,KEY_DOWN+$80,KEY_UP+$80

VSYNC	CMPI.W	#1,NB_VBL
	BLT.S	VSYNC
	CLR.W	NB_VBL
	RTS

VBLR	ADDQ.W	#1,NB_VBL
	MOVEM.L	D0-A6,-(SP)
	MOVE.B	#1,$FFFF8260.W
	JSR	ZIK+8
	MOVEM.L	(SP)+,D0-A6
	RTE

SWAPEC	MOVE.L	SCREEN1,D0
	MOVE.L	SCREEN2,SCREEN1
	MOVE.L	D0,SCREEN2
	MOVE.B	SCREEN1+1,$FFFF8201.W
	MOVE.B	SCREEN1+2,$FFFF8203.W
	RTS

AFFICHE_STARS	BSR	EFFAC
	LEA	POINTS,A0
	LEA	ANGLES,A1
	LEA	TRANS,A6
	LEA	BUF_PTS,A2
	BSR	ROTATE

	LEA	ADR_EFF,A0
	MOVE.L	(A0)+,D0
	MOVE.L	(A0),-(A0)
	MOVE.L	D0,4(A0)

	LEA	ANGLES,A0
	MOVE.W	(A0),D0
	ADDI.W	#4,D0	;ANGLE Z
	ANDI.W	#1023,D0
	MOVE.W	D0,(A0)+
	MOVE.W	(A0),D0
	ADDI.W	#2,D0	;ANGLE X
	ANDI.W	#1023,D0
	MOVE.W	D0,(A0)+
	MOVE.W	(A0),D0
	ADDI.W	#3,D0	;ANGLE Y
	ANDI.W	#1023,D0
	MOVE.W	D0,(A0)+
	RTS

EFFAC	MOVE.L	SCREEN2,A0
	MOVEQ	#0,D0
	MOVE.L	ADR_EFF,A1
	JMP	(A1)

EFFAC_1	REPT	240
	MOVE.W	D0,0(A0)
	ENDR
	RTS
EFFAC_2	REPT	240
	MOVE.W	D0,0(A0)
	ENDR
	RTS

;ENTRêES : A0=TABLE DE POINTS ( .W:NB DE POINTS, ET LES POINTS)
;          A1=TABLE D'ANGLE ( ANGLE X, ANGLE Y, ANGLE Z)
;          A6=TABLE DE TRANSLATION ( U_X, U_Y, U_Z)
;          A2=TABLE DE DESTINATION POUR LES POINTS

;Formules de rotation 3 axes:
;X'=X[SIN(T)SIN(U)SIN(V)+COS(T)COS(V)]+Y[COS(T)SIN(U)SIN(V)-SIN(T)COS(V)]+Z[COS(U)SIN(V)]
;Y'=X[SIN(T)COS(U)]+Y[COS(T)COS(U)]-ZSIN(U)
;Z'=X[SIN(T)SIN(U)COS(V)-COS(T)SIN(V)]+Y[COS(T)SIN(U)COS(V)+SIN(T)SIN(V)]+Z[COS(U)COS(V)]

ROTATE	LEA	SINUS(PC),A4	;SINUS
	LEA	LONG_SINUS/4(A4),A3	;COSINUS

	MOVE.W	(A1)+,D0	;ANGLE_X
	ADD.W	D0,D0
	MOVE.W	(A3,D0.W),D1	;COSINUS TETA_X
	MOVE.W	(A4,D0.W),D0	;SINUS TETA_X

	MOVE.W	(A1)+,D2	;ANGLE_Y
	ADD.W	D2,D2
	MOVE.W	(A3,D2.W),D3	;COSINUS TETA_Y
	MOVE.W	(A4,D2.W),D2	;SINUS TETA_Y

	MOVE.W	(A1)+,D4	;ANGLE_Z
	ADD.W	D4,D4
	MOVE.W	(A3,D4.W),D5	;COSINUS TETA_Z
	MOVE.W	(A4,D4.W),D4	;SINUS TETA_Z

	LEA	MATRICE,A4
	LEA	LOGARITHMES+512*2(PC),A3
	;ON FABRIQUE SIN(T)*SIN(U)*SIN(V)+COS(T)*COS(V)
	MOVE.W	D0,D6	;D6=SIN(T)
	MULS.W	D2,D6	;D6=SIN(T)*SIN(U)
	ASR.L	#8,D6
	MULS.W	D4,D6	;D6=SIN(T)*SIN(U)*SIN(V)
	MOVE.W	D1,D7	;D7=COS(T)
	MULS.W	D5,D7	;D7=COS(T)*COS(V)
	ADD.L	D7,D6
	ASR.L	#8,D6
	ADD.W	D6,D6
	TST.W	D6
	BNE.S	.OK1
	MOVE.W	#1*2,D6
.OK1	MOVE.W	(A3,D6.W),(A4)+

	;ON FABRIQUE COS(T)*SIN(U)*SIN(V)-SIN(T)*COS(V)
	MOVE.W	D1,D6	;D6=COS(T)
	MULS.W	D2,D6	;D6=COS(T)*SIN(U)
	ASR.L	#8,D6
	MULS.W	D4,D6	;D6=COS(T)*SIN(U)*SIN(V)
	MOVE.W	D0,D7	;D7=SIN(T)
	MULS.W	D5,D7	;D7=SIN(T)*COS(V)
	SUB.L	D7,D6
	ASR.L	#8,D6
	ADD.W	D6,D6
	TST.W	D6
	BNE.S	.OK2
	MOVE.W	#1*2,D6
.OK2	MOVE.W	(A3,D6.W),(A4)+

	;ON FABRIQUE COS(U)*SIN(V)
	MOVE.W	D3,D6	;D6=COS(U)
	MULS.W	D4,D6	;D6=COS(U)*SIN(V)
	ASR.L	#8,D6
	ADD.W	D6,D6
	TST.W	D6
	BNE.S	.OK3
	MOVE.W	#1*2,D6
.OK3	MOVE.W	(A3,D6.W),(A4)+

	;ON FABRIQUE SIN(T)*COS(U)
	MOVE.W	D0,D6	;D6=SIN(T)
	MULS.W	D3,D6	;D6=SIN(T)*COS(U)
	ASR.L	#8,D6
	ADD.W	D6,D6
	TST.W	D6
	BNE.S	.OK4
	MOVE.W	#1*2,D6
.OK4	MOVE.W	(A3,D6.W),(A4)+

	;ON FABRIQUE COS(T)*COS(U)
	MOVE.W	D1,D6	;D6=COS(T)
	MULS.W	D3,D6	;D6=COS(T)*COS(U)
	ASR.L	#8,D6
	ADD.W	D6,D6
	TST.W	D6
	BNE.S	.OK5
	MOVE.W	#1*2,D6
.OK5	MOVE.W	(A3,D6.W),(A4)+

	;ON FABRIQUE -SIN(U)
	MOVE.W	D2,D6
	NEG.W	D6
	ADD.W	D6,D6
	TST.W	D6
	BNE.S	.OK6
	MOVE.W	#1*2,D6
.OK6	MOVE.W	(A3,D6.W),(A4)+

	;ON FABRIQUE SIN(T)*SIN(U)*COS(V)-COS(T)*SIN(V)
	MOVE.W	D0,D6	;D6=SIN(T)
	MULS.W	D2,D6	;D6=SIN(T)*SIN(U)
	ASR.L	#8,D6
	MULS.W	D5,D6	;D6=SIN(T)*SIN(U)*COS(V)
	MOVE.W	D1,D7	;D7=COS(T)
	MULS.W	D4,D7	;D7=COS(T)*SIN(V)
	SUB.L	D7,D6
	ASR.L	#8,D6
	ADD.W	D6,D6
	TST.W	D6
	BNE.S	.OK7
	MOVE.W	#1*2,D6
.OK7	MOVE.W	(A3,D6.W),(A4)+

	;ON FABRIQUE COS(T)*SIN(U)*COS(V)+SIN(T)*SIN(V)
	MOVE.W	D1,D6	;D6=COS(T)
	MULS.W	D2,D6	;D6=COS(T)*SIN(U)
	ASR.L	#8,D6
	MULS.W	D5,D6	;D6=COS(T)*SIN(U)*COS(V)
	MOVE.W	D0,D7	;D7=SIN(T)
	MULS.W	D4,D7	;D7=SIN(T)*SIN(V)
	ADD.L	D7,D6
	ASR.L	#8,D6
	ADD.W	D6,D6
	TST.W	D6
	BNE.S	.OK8
	MOVE.W	#1*2,D6
.OK8	MOVE.W	(A3,D6.W),(A4)+

	;ON FABRIQUE COS(U)*COS(V)
	MULS.W	D3,D5	;D5=COS(U)*COS(V)
	ASR.L	#8,D5
	ADD.W	D5,D5
	TST.W	D5
	BNE.S	.OK9
	MOVE.W	#1*2,D5
.OK9	MOVE.W	(A3,D5.W),(A4)+

	MOVE.W	(A6)+,D0
	ADD.W	D0,D0	;U_X*2
	MOVE.W	D0,TRANSLATE_X
	MOVE.W	(A6)+,D0
	ADD.W	D0,D0	;U_Y*2
	MOVE.W	D0,TRANSLATE_Y
	MOVE.W	(A6),D0
	ADD.W	D0,D0	;U_Z*2
	MOVE.W	D0,TRANSLATE_Z

	MOVE.W	(A0)+,D7	;D7=NB DE POINTS
;	LSR.W	#1,D7
	SUBQ.W	#1,D7
	MOVE.L	#MATRICE,D6
	LEA	BUF_EXP,A5

	LEA	CORES_X,A1	;A2
	MOVE.L	SCREEN2,A2	;A3
	MOVE.L	ADR_EFF,A6
	ADDQ.W	#2,A6

	LEA	LOGARITHMES+512*2(PC),A3

ROTATE_ALL	
	LEA	BUF_CLIP_COOR(PC),A4
	MOVE.W	(A0),D0	;X*2
TRANSLATE_X = *+2
	ADDI.W	#$1234,D0
	MOVE.W	(A4,D0.W),D0
	MOVE.W	D0,(A0)+

	MOVE.W	(A0),D1	;Y*2
TRANSLATE_Y = *+2
	ADDI.W	#$1234,D1
	MOVE.W	(A4,D1.W),D1
	MOVE.W	D1,(A0)+

	MOVE.W	(A0),D2	;Z*2
TRANSLATE_Z = *+2
	ADDI.W	#$1234,D2
	MOVE.W	(A4,D2.W),D2
	MOVE.W	D2,(A0)+

	MOVE.L	D6,A4
	MOVE.W	(A3,D0.W),D0	;D0=LOG(X)
	MOVE.W	(A3,D1.W),D1	;D1=LOG(Y)
	MOVE.W	(A3,D2.W),D2	;D2=LOG(Z)

	MOVE.W	D0,D3	;LOG(X)
	ADD.W	(A4)+,D3	;LOG(X)+LOG(COEFF)
	MOVE.W	(A5,D3.W),D3	;D3=X*COEFF
	MOVE.W	D1,D4	;LOG(Y)
	ADD.W	(A4)+,D4	;LOG(Y)+LOG(COEFF)
	ADD.W	(A5,D4.W),D3
	MOVE.W	D2,D5	;LOG(Z)
	ADD.W	(A4)+,D5	;LOG(Z)+LOG(COEFF)
	ADD.W	(A5,D5.W),D3

	MOVE.W	D0,D4	;LOG(X)
	ADD.W	(A4)+,D4	;LOG(X)+LOG(COEFF)
	MOVE.W	(A5,D4.W),D4	;D4=X*COEFF
	MOVE.W	D1,D5	;LOG(Y)
	ADD.W	(A4)+,D5	;LOG(Y)+LOG(COEFF)
	ADD.W	(A5,D5.W),D4
	MOVE.W	D2,D5	;LOG(Z)
	ADD.W	(A4)+,D5	;LOG(Z)+LOG(COEFF)
	ADD.W	(A5,D5.W),D4

	ADD.W	(A4)+,D0	;LOG(X)+LOG(COEFF)
	MOVE.W	(A5,D0.W),D0	;D3=X*COEFF
	ADD.W	(A4)+,D1	;LOG(Y)+LOG(COEFF)
	ADD.W	(A5,D1.W),D0
	ADD.W	(A4)+,D2	;LOG(Z)+LOG(COEFF)
	ADD.W	(A5,D2.W),D0

	ADDI.W	#COEFF+310*2-CORES_X,D0
	MOVE.W	(A1,D0.W),D0	;LOG DU COEFF 3D
	MOVE.W	(A3,D3.W),D3	;LOG DE X
	ADD.W	D0,D3	;LOG DE X+LOG DE COEFF
	ADD.W	(A3,D4.W),D0	;LOG DE Y+LOG DE COEFF

	MOVE.W	(A5,D3.W),D3
	MOVE.W	(A5,D0.W),D4

	ADDI.W	#CORES_Y-CORES_X,D4
	MOVE.W	(A1,D4.W),D4
	BEQ.S	.NEXT
	ADD.W	D3,D3
	ADD.W	2(A1,D3.W),D4
	MOVE.W	(A1,D3.W),D3
	OR.W	D3,(A2,D4.W)
	MOVE.W	D4,(A6)
	ADDQ.W	#4,A6

.NEXT	DBRA	D7,ROTATE_ALL
	RTS

PREPA_LOG_EXP	;ON ARRANGE LA PARTIE NEGATIVE DE LA TABLE DES LOG.
	LEA	LOGARITHMES(PC),A0
	MOVE.W	#512-1,D7
LOG_NEGATIFS	MOVE.W	(A0),D0
	ADD.W	D0,D0
	ADDI.W	#LONG_EXP/2,D0
	MOVE.W	D0,(A0)+
	DBRA	D7,LOG_NEGATIFS
	MOVE.W	#LONG_EXP/2,D7
	MULU.W	#3,D7
	MOVE.W	D7,(A0)+	;D7=LONG_EXP*3 (ZERO)
	MOVE.W	#512-1,D7
LOG_POSITIFS	MOVE.W	(A0),D0
	ADD.W	D0,D0
	MOVE.W	D0,(A0)+	;LOG*2
	DBRA	D7,LOG_POSITIFS

;ON CREE LA PARTIE NEGATIVE ET LA 2EME PARTIE POSITIVE DES EXPONENTIELLES.
	LEA	EXPONENTIELLES(PC),A0
	LEA	BUF_EXP,A1
	LEA	LONG_EXP/2(A1),A2
	LEA	LONG_EXP/2(A2),A3
	MOVE.W	#LONG_EXP/4-1,D7
MAKE_EXP	MOVEQ	#0,D0
	MOVE.L	(A0)+,D0
	LSR.L	#8,D0	;VALEUR REELLE DU RESULTAT
;	ADDI.W	#512,D0
	ADD.W	D0,D0	;*2
	MOVE.W	D0,(A1)+
	MOVE.W	D0,(A3)+
	NEG.W	D0
	MOVE.W	D0,(A2)+
	DBRA	D7,MAKE_EXP

;ON CREE LES 2 TABLES DE ZERO LONGUES CHACUNES DE LONG_EXP.
	LEA	BUF_EXP+(LONG_EXP/2)*3,A0
	MOVE.W	#(LONG_EXP/4)*2-1,D7
MAKE_ZERO_TABLE	CLR.W	(A0)+
	DBRA	D7,MAKE_ZERO_TABLE
	RTS

PREPA_DOTS	LEA	COEFF,A0
	LEA	LOGARITHMES+512*2(PC),A1
.CONT	MOVE.W	(A0),D0
	CMPI.W	#$200,D0
	BLE.S	.OK
	MOVEQ	#0,D0
.OK	ADD.W	D0,D0
	MOVE.W	(A1,D0.W),(A0)+
	CMPA.L	#FIN_COEFF,A0
	BLT.S	.CONT

	CLR.W	Z_BASE

	LEA	POINTS+2,A0
	MOVE.W	#300-1,D7
.MULTI	REPT	3
	MOVE.W	(A0),D0
	ADD.W	D0,D0
	MOVE.W	D0,(A0)+
	ENDR
	DBRA	D7,.MULTI

	LEA	SINUS,A0
	LEA	SINUS+LONG_SINUS,A1
	MOVE.W	#(LONG_SINUS/4)-1,D7
.RECOPY	MOVE.W	(A0)+,(A1)+
	DBRA	D7,.RECOPY

	MOVE.L	#EFFAC_1,ADR_EFF
	MOVE.L	#EFFAC_2,ADR_EFF+4
	RTS

PREP_ECR	MOVE.L	#BUFFER,D0
	CLR.B	D0
	MOVE.L	D0,SCREEN1
	ADDI.L	#32000+1280,D0
	MOVE.L	D0,SCREEN2
	MOVE.B	SCREEN1+1,$FFFF8201.W
	MOVE.B	SCREEN1+2,$FFFF8203.W
	RTS

POINTS	DC.W	240
	INCBIN	random.PTS

ANGLES	DC.W	0,0,0
	;X,Y,Z
TRANS	DC.W	2,2,-6

SINUS	INCBIN	SINUSROT.DAT
LONG_SINUS = *-SINUS
	DCB.W	LONG_SINUS/4,0

	DS.B	500
LOGARITHMES	INCBIN	LOG512.LOG
	DS.B	500

EXPONENTIELLES	INCBIN	EXP512.EXP
LONG_EXP = *-EXPONENTIELLES

	DCB.W	300,0
COEFF	INCBIN	COEFF2.3D
FIN_COEFF

N	SET	-256
	REPT	256
	DC.W	N*2
N	SET	N+1
	ENDR
	REPT	256
	DC.W	N*2
N	SET	N+1
	ENDR
N	SET	-256
	REPT	256
	DC.W	N*2
N	SET	N+1
	ENDR
BUF_CLIP_COOR	REPT	256
	DC.W	N*2
N	SET	N+1
	ENDR
N	SET	-256
	REPT	256
	DC.W	N*2
N	SET	N+1
	ENDR
	REPT	256
	DC.W	N*2
N	SET	N+1
	ENDR

	DCB.W	800,0
N	SET	0
	REPT	20
	DC.W	32768,N,16384,N,8192,N,4096,N,2048,N,1024,N,512,N,256,N,128,N,64,N,32,N,16,N,8,N,4,N,2,N,1,N
N	SET	N+4
	ENDR
CORES_X	REPT	20
	DC.W	32768,N,16384,N,8192,N,4096,N,2048,N,1024,N,512,N,256,N,128,N,64,N,32,N,16,N,8,N,4,N,2,N,1,N
N	SET	N+4
	ENDR
	DCB.W	800,0

	DCB.W	600,0
N	SET	0
	REPT	50
	DC.W	N
N	SET	N+160
	ENDR
CORES_Y	REPT	50
	DC.W	N
N	SET	N+160
	ENDR
	DCB.W	600,0

COOR_NOEUDS	DC.W	120,140,160,180

ARROW_GFX	DC.W	%0000000010000000
	DC.W	%0000000011000000
	DC.W	%0000000011100000
	DC.W	%0000000011110000
	DC.W	%1111111111111000
	DC.W	%1111111111111100
	DC.W	%1111111111111110
	DC.W	%1111111111111111
	DC.W	%1111111111111111
	DC.W	%1111111111111110
	DC.W	%1111111111111100
	DC.W	%1111111111111000
	DC.W	%0000000011110000
	DC.W	%0000000011100000
	DC.W	%0000000011000000
	DC.W	%0000000010000000
	DC.W	%0000000100000000
	DC.W	%0000001100000000
	DC.W	%0000011100000000
	DC.W	%0000111100000000
	DC.W	%0001111111111111
	DC.W	%0011111111111111
	DC.W	%0111111111111111
	DC.W	%1111111111111111
	DC.W	%1111111111111111
	DC.W	%0111111111111111
	DC.W	%0011111111111111
	DC.W	%0001111111111111
	DC.W	%0000111100000000
	DC.W	%0000011100000000
	DC.W	%0000001100000000
	DC.W	%0000000100000000

	DC.W	$1234
FADE_DOWN	DC.W	1,$FFF,$402,$000,$FDA,$CCC
	DC.W	1,$777,$402,$000,$752,$444
	DC.W	1,$EEE,$402,$000,$EC9,$BBB
	DC.W	1,$666,$402,$000,$641,$333
	DC.W	1,$DDD,$402,$000,$DB8,$AAA
	DC.W	1,$555,$402,$000,$530,$222
	DC.W	1,$CCC,$402,$000,$CA0,$999
	DC.W	1,$444,$B09,$000,$420,$111
	DC.W	1,$BBB,$301,$000,$B90,$888
	DC.W	0,$333,$A08,$000,$310,$000
	DC.W	0,$AAA,$200,$000,$A80,$000
	DC.W	0,$222,$900,$000,$200,$000
	DC.W	0,$999,$100,$000,$900,$000
	DC.W	0,$111,$800,$000,$100,$000
	DC.W	0,$888,$000,$000,$800,$000
FADE_UP	DC.W	0,$000,$000,$000,$000,$000
	DC.W	$1234

ADR_ACTIONS	DC.L	CREDITS_PART
	DC.L	GREETINGS_PART
	DC.L	PERSONNAL
	DC.L	TILT_FAIT_TILT

ZIK	INCBIN	ZIK3.ZIK

GFX	INCBIN	MSG.FIN
GFX2	INCBIN	MSG2.FIN

	SECTION	BSS
	DS.B	256+160
BUFFER	DS.B	32000*2+1280
	DS.B	500
SCREEN1	DS.L	1
SCREEN2	DS.L	1
ADR_EFF	DS.L	80
Z_BASE	DS.W	1
MATRICE	DS.W	9
BUF_EXP	DS.W	(LONG_EXP/4)*5
NB_VBL	DS.W	1
BUF_PTS	DS.W	500*3
;
FLAG_SORT	DS.B	1
FLAG_ENTRE	DS.B	1
CNT_FADE	DS.W	1
ADR_FADE	DS.L	1
BUF_EFF_ARROW	DS.L	1
Y_ACT	DS.W	1
STATUS	DS.W	1
NOEUD_ACT	DS.W	1
NOEUD_VISê	DS.W	1