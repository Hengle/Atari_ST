***************************************************************************
*COMPRESSEUR STYWOX v1.0    (c)1992 FROM F.B    THIS IS A FULL PRE-VERSION*
***************************************************************************
*HEADER DU FICHIER SAUVê & COMPACTê : -1.L = "STWX" FLAG DU COMPACTAGE    *
*                                     -1.W = OFFSET POUR LE DEBUT DES DATA*
*                                      -64.L= 1.W POUR L'OFFSET           *
*	                              1.W POUR LE NB D'OCTETS      *
*		        -X.L = 1.B POUR L'OCTET             *
*		               1.B A 0	              *
* 		               1.W POUR LA VALEUR           *
*		        -DEBUT DES DATAS PACKêES....        *
***************************************************************************
*A FAIRE : 1 ALGORITHME SPECIAL IMAGES (PI1,PC1,IMG,NEO,PI2,PC2,PI3,PC3,..*
*          ...NEO COMPACTê,IFF...) QUI COMPACTE PAR PLANS.                *
*          1 ROUTINE POUR LE DEPACKING DEPUIS LA FIN DU FICHIER           *
*          INCLURE LE NOMBRE D'ITERATIONS POUR LE PACKING                 *
*          (POUR PACKER PLUSIEURS FOIS A LA SUITE)                        *
***************************************************************************

SHOW_TIME_1 = 1
SHOW_TIME_2 = 1
SHOW_TIME_3 = 1
SHOW_TIME_4 = 1

	CLR.L	-(SP)
	MOVE.W	#$20,-(SP)
	TRAP	#1
	ADDQ.W	#6,SP
	MOVE.L	D0,SAUV_SP

	MOVE.W	#$502,$FFFF8240.W
	MOVEM.L	$FFFF8240.W,D0-D7
	MOVEM.L	D0-D7,ANC_PAL
	MOVE.W	#$111,$FFFF8240.W

	JSR	ORGANIZE	(OK)
	JSR	MAKE_TREE	(OK)
	JSR	MAKE_TABLE	(OK)
	JSR	COMPACTE	(OK)
	JSR	ACT_LIKE

	MOVEM.L	ANC_PAL,D0-D7
	MOVEM.L	D0-D7,$FFFF8240.W

	MOVE.L	SAUV_SP,-(SP)
	MOVE.W	#$20,-(SP)
	TRAP	#1
	ADDQ.W	#6,SP

	CLR.W	-(SP)
	TRAP	#1

SAUV_SP	DS.L	1
SAUV_ADR	DS.L	1
ANC_PAL	DS.L	8
NB	DS.W	1

F_NAME	DC.B	"PRES1B.HUF",0
	EVEN
HANDLE	DS.W	1

MESS_1	DC.B	27,"ECREATION DE LA TABLE DES FREQUENCES...",0
MESS_2	DC.B	27,"Y",33,32,"CREATION DE L'ARBRE D'HAUFFMAN...",0
MESS_3	DC.B	27,"Y",34,32,"CREATION DE LA TABLE DE CONVERSION...",0
MESS_4	DC.B	27,"Y",35,32,"PLEASE WAIT, CRUNCHING...",0
MESS_5	DC.B	27,"Y",40,32,"LONGUEUR INITIALE :"
	DC.B	27,"Y",41,32,"LONGUEUR FINALE   :"
	DC.B	27,"Y",43,32,"JE SAUVE (O/N) ? ",0
MESS_6	DC.B	27,"Y",43,48,"   ",0
LOCATE_1	DC.B	27,"Y",40,52,0
LOCATE_2	DC.B	27,"Y",41,52,0
LOCATE_3	DC.B	27,"Y",43,49,0
	EVEN

CHAIN_DEP	DC.L	"STWX"
	DC.W	0

DATA	INCBIN	PRES1B.PI1
	;DC.B	"CE MESSAGE S'AUTO-DETRUIRA DANS 30 SECONDES ENVIRON ..."
	EVEN
FIN_DATA

ACT_LIKE	MOVE.W	#$777,$FFFF8240.W
	MOVE.W	#$000,$FFFF825E.W
	PEA	MESS_5
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.W	#6,SP
	PEA	LOCATE_1
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.W	#6,SP
	;D7 CONTIENT LA LONGUEUR COMPACTêE
	MOVE.L	#FIN_DATA,D0
	SUBI.L	#DATA,D0	D0=LONGUEUR INITIALE
	BSR	AFF_LONGS
	PEA	LOCATE_2
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.W	#6,SP
	MOVE.L	D7,D0	D0=LONGUEUR FINALE
	BSR	AFF_LONGS
RECOM_ATT	PEA	LOCATE_3
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.W	#6,SP
	MOVE.W	#1,-(SP)
	TRAP	#1
	ADDQ.W	#2,SP
	CMPI.B	#$4F,D0
	BEQ	SAUVE	(OK)
	CMPI.B	#$4E,D0
	BEQ.S	FIN
	CMPI.B	#$6F,D0
	BEQ	SAUVE	(OK)
	CMPI.B	#$6E,D0
	BEQ.S	FIN
	PEA	MESS_6
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.W	#2,SP
	BRA.S	RECOM_ATT
FIN	RTS

AFF_LONGS	LEA	TABLE_LONGS,A1
	REPT	8
	DIVU.W	#10,D0
	SWAP	D0
	ADD.W	#48,D0
	MOVE.W	D0,(A1)+
	CLR.W	D0
	SWAP	D0
	ENDR
	REPT	8
	MOVE.W	-(A1),-(SP)
	MOVE.W	#2,-(SP)
	TRAP	#1
	ADDQ.W	#4,SP
	ENDR
	RTS

TABLE_LONGS	DS.W	8

ORGANIZE	PEA	MESS_1
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.W	#6,SP
	LEA	DATA,A0
	LEA	BUF_FREQ,A1
	LEA	FIN_DATA,A2
.CONTINUE	CMPA.L	A2,A0
	BEQ.S	FIN_ORGANIZE
	MOVEQ	#0,D0
	MOVE.B	(A0)+,D0
	ADD.W	D0,D0
	ADD.W	D0,D0
	ADDQ.L	#1,(A1,D0.W)
	IFNE	SHOW_TIME_1
	 ANDI.W	#$0777,$FFFF8240.W
	 ADDI.W	#$111,$FFFF8240.W
	ENDC
	BRA.S	.CONTINUE
FIN_ORGANIZE	LEA	BUF_TRIê,A0
	LEA	BUF_FREQ,A3
	MOVE.W	#255,D6
RECOM_TRI_2	LEA	BUF_FREQ,A1
	MOVEQ	#0,D0	D0=MAX
	MOVEQ	#0,D1	VALEUR
	MOVEQ	#0,D3	VALUE
	MOVE.W	#255,D7
RECOM_TRI_1	MOVE.L	(A1)+,D2
	CMP.L	D2,D0
	BGT.S	PAS_MAX
	MOVE.L	D2,D0	D0=NEW MAX
	MOVE.L	D1,D3	D3=NEW VALUE
PAS_MAX	ADDQ.W	#1,D1
	DBRA	D7,RECOM_TRI_1
	TST.L	D0
	BEQ.S	PAS_POZ
	MOVE.W	D3,(A0)+
	MOVE.L	D0,(A0)+
	CLR.L	(A0)+	ON RESERVE 4 OCTETS SUP POUR CHAQUE CELLULE
	ADD.W	D3,D3
	ADD.W	D3,D3
	CLR.L	(A3,D3.W)
PAS_POZ	
	IFNE	SHOW_TIME_1
	 ANDI.W	#$0777,$FFFF8240.W
	 ADDI.W	#$111,$FFFF8240.W
	ENDC
	DBRA	D6,RECOM_TRI_2
	LEA	-10(A0),A0
	MOVE.L	A0,SAUV_ADR
	RTS

	*FORMAT D'UNE CELLULE : 1.W POUR L'OCTET CONCERNê
	*	         1.L POUR LA FREQUENCE
	*	         1.L POUR L'ADRESSE DU NOEUD
	***
	*FORMAT D'UN NOEUD    : 1.W A -1
	*	         1.L POUR LA SOMME DES 2 CELLULES CONCERNêES
	*	         1.L POUR L'ADRESSE DU PROCHAIN NOEUD
	*	         1.L POUR L'ADRESSE GAUCHE
	*	         1.L POUR L'ADRESSE DROITE

MAKE_TREE	PEA	MESS_2
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.W	#6,SP
	LEA	BUF_NOEUDS,A6
CONT_MAK_TREE	BSR	SEARCH_MINIMUM
	LEA	BUF_SAUV,A0
	MOVE.L	(A0)+,A1	A1:PREMIERE ADRESSE
	MOVE.L	(A0)+,A0	A0:DEUXIEME ADRESSE
	BEQ.S	FINI_MAK_TREE
	MOVE.L	2(A1),D0
	ADD.L	2(A0),D0	D0:SOMME DES 2 FREQUENCES OU SOMME
	MOVE.L	A6,6(A0)	ADR DU NOEUD DANS CHACUNE...
	MOVE.L	A6,6(A1)	..DES 2 CASES QUI LE COMPOSENT
	MOVE.W	#-1,(A6)+	-1:RECONNAISSANCE D'1 NOEUD
	MOVE.L	D0,(A6)+	ON MET LA SOMME DES 2 CASES PRECEDENTES
	CLR.L	(A6)+	IL N'Y A PAS ENCORE DE PROCHAIN NOEUD
	MOVE.L	A0,(A6)+	ON MET LES ADRESSES DES 2 CASES PRECEDENTES
	MOVE.L	A1,(A6)+
	IFNE	SHOW_TIME_2
	 ANDI.W	#$0777,$FFFF8240.W
	 ADDI.W	#$111,$FFFF8240.W
	ENDC
	BRA.S	CONT_MAK_TREE
FINI_MAK_TREE
	RTS

SEARCH_MINIMUM	MOVE.L	#0,A5
	LEA	BUF_SAUV,A4
	MOVEQ	#1,D7
MINIMUM_2	MOVE.L	SAUV_ADR,A3
	LEA	BUF_TRIê,A1
	MOVE.L	#$7FFFFFFF,D0	D0:NB CAR ON CHERCHE LE MINIMUM
	MOVE.L	#0,A2	A2:ADRESSE DE LA CASE MINIMUM!
SEARCH_2_MIN	MOVE.L	A3,A0
SEARCH_MIN	TST.L	6(A0)	Y A T'IL UN NOEUD
	BEQ.S	PAS_NOEUD
	MOVE.L	6(A0),A0
	BRA.S	SEARCH_MIN
PAS_NOEUD	CMP.L	2(A0),D0
	BLE.S	PAS_MIN
	CMPA.L	A0,A5
	BEQ.S	PAS_MIN
	MOVE.L	2(A0),D0	D0:NEW MIN
	MOVE.L	A0,A2	A2:ADRESSE DE LA CASE
PAS_MIN	LEA	-10(A3),A3
	CMPA.L	A1,A3
	BLT.S	FINI_SEARCH_MIN
	BRA.S	SEARCH_2_MIN
FINI_SEARCH_MIN
	MOVE.L	A2,(A4)+	A4:ADRESSE 
	MOVE.L	A2,A5
	DBRA	D7,MINIMUM_2
	RTS

MAKE_TABLE	PEA	MESS_3
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.W	#6,SP
	LEA	TABLE_CONVERSE,A5
RECOM_CASE	
	IFNE	SHOW_TIME_3
	 ANDI.W	#$0777,$FFFF8240.W
	 ADDI.W	#$111,$FFFF8240.W
	ENDC
	LEA	-18(A6),A0	DERNIER_NOEUD !!
	MOVEQ	#0,D0	D0:VALEUR
	MOVEQ	#0,D1	D1:NB DE BITS
RECOM_NOEUD	CMPI.W	#-1,(A0)	EST-CE UN NOEUD ???
	BEQ.S	Y_A_NOEUD
	MOVE.B	1(A0),(A5)+	L'OCTET
	MOVE.B	D1,(A5)+	LE NB DE BITS
	MOVE.W	D0,(A5)+	LA VALEUR
	MOVE.L	#-1,(A4)
	;MOVE.L	6(A0),A0
	BRA.S	RECOM_CASE
Y_A_NOEUD	CMPI.L	#-1,10(A0)	EST ON DEJA ALLê A GAUCHE
	BEQ.S	DEJA_GAUCHE
	LEA	10(A0),A4
	MOVE.L	10(A0),A0
	ADD.W	D0,D0	UN BIT A 0...
	ADDQ.W	#1,D1	...DONC UN BIT DE PLUS
	BRA.S	RECOM_NOEUD
DEJA_GAUCHE	CMPI.L	#-1,14(A0)
	BNE.S	PAS_DEJA_DROITE
	TST.L	6(A0)
	BEQ.S	FINI_MAKE_TABLE
	MOVE.L	6(A0),A0
	MOVE.L	#-1,(A4)
	LSR	#1,D0
	SUBQ.W	#1,D1
	BRA.S	RECOM_NOEUD
PAS_DEJA_DROITE
	LEA	14(A0),A4	
	MOVE.L	14(A0),A0
	ADD.W	D0,D0
	ORI.W	#1,D0	UN BIT A 1...
	ADDQ.W	#1,D1	...DONC UN BIT DE PLUS
	BRA.S	RECOM_NOEUD
FINI_MAKE_TABLE
	LEA	TABLE_CONVERSE,A0
	LEA	TABLE_ANNEX,A1
	MOVE.W	#255,D7
RECOP_TABLE	MOVE.L	(A0)+,(A1)+
	DBRA	D7,RECOP_TABLE

	LEA	TABLE_OFFSET,A1
	LEA	TABLE_FINALE,A2
	MOVEQ	#1,D0	D0=NB DE BITS RECHERCHE
	MOVEQ	#15,D6
RECHERCHE_2	LEA	TABLE_CONVERSE,A0
	MOVEQ	#0,D5
	MOVE.L	A2,A3
	SUBA.L	#TABLE_FINALE,A3
	MOVE.W	A3,(A1)+
	MOVE.W	#255,D7
RECHERCHE_1	CMP.B	1(A0),D0
	BNE.S	PAS_BON
	MOVE.B	(A0),(A2)+
	MOVE.B	1(A0),(A2)+
	MOVE.W	2(A0),(A2)+
	MOVE.L	#-1,(A0)
	ADDQ.W	#1,D5
PAS_BON	ADDQ.W	#4,A0
	DBRA	D7,RECHERCHE_1
	ADDQ.W	#1,D0
	SUBQ.W	#1,D5
	MOVE.W	D5,(A1)+
	DBRA	D6,RECHERCHE_2
	RTS

COMPACTE	PEA	MESS_4
	MOVE.W	#9,-(SP)
	TRAP	#1
	ADDQ.W	#6,SP
	MOVEQ	#0,D3
	MOVEQ	#0,D4
	MOVEQ	#0,D6
	MOVEQ	#0,D7
	LEA	DATA,A0
	LEA	BUFFER,A1
	MOVEQ	#0,D1	D1=NB DE BITS UTILISêS SUR LE .W EN COURS
	MOVEQ	#0,D2	D2=.W EN COURS
	MOVEQ	#16,D5	D5=NB DE BITS RESTANTS
CONT_PACK
	IFNE	SHOW_TIME_4
	 ANDI.W	#$0777,$FFFF8240.W
	 ADDI.W	#$111,$FFFF8240.W
	ENDC
	CMPA.L	#FIN_DATA,A0
	BEQ.S	FIN_PACK
	MOVEQ	#0,D0
	MOVE.B	(A0)+,D0
	LEA	TABLE_ANNEX,A2
CONT_SEARCH	CMP.B	(A2),D0
	BNE.S	PAS_TROUVê
	MOVE.B	1(A2),D3	D3=NB DE BIT DE L'OCTET
	MOVE.W	2(A2),D4	D4=NEW VALUE DE L'OCTET CONSIDêRê
	ADD.W	D3,D1	ON VA RAJOUTER (D3) BIT(S)
	CMPI.W	#16,D1	ON REGARDE SI C'EST BON
	BLE.S	C_EST_BON
	SUBI.W	#16,D1	D1=NB DE BITS EN TROP
	SUB.W	D1,D3	D3=NB DE BITS POUVANT ETRE PLACêS IMMEDIATEMENT
	LSR	D1,D4	D4=NEW VALUE DECALêE
	OR.W	D4,D2
	MOVE.W	D2,(A1)+
	MOVEQ	#0,D2
	MOVE.W	2(A2),D4
	MOVEQ	#16,D5
	SUB.W	D1,D5
	LSL	D5,D4
	MOVE.W	D4,D2
	MOVEQ	#16,D1
	SUB.W	D5,D1
	BRA.S	CONT_PACK
C_EST_BON	SUB.W	D3,D5	ON VA ENLEVER (D3) BIT(S)
	LSL	D5,D4
	OR.W	D4,D2
	BRA.S	CONT_PACK
PAS_TROUVê	ADDQ.W	#4,A2
	BRA.S	CONT_SEARCH
FIN_PACK	SUBA.L	#BUFFER,A1
	MOVE.L	A1,D7	D7=LONGUEUR EN OCTETS
	RTS

SAUVE	CLR.W	-(SP)
	PEA	F_NAME
	MOVE.W	#$3C,-(SP)
	TRAP	#1
	ADDQ.W	#8,SP
	MOVE.W	D0,HANDLE

	LEA	TABLE_FINALE,A0
	MOVEQ	#0,D6
CONT_COUNT	TST.L	(A0)+
	BEQ.S	FIN_COUNT
	ADDQ.L	#4,D6
	BRA.S	CONT_COUNT
FIN_COUNT
	LEA	CHAIN_DEP+4,A0
	MOVE.W	#64,(A0)
	ADD.W	D6,(A0)
	ADDQ.W	#2,(A0)
	PEA	CHAIN_DEP
	MOVE.L	#6,-(SP)
	MOVE.W	HANDLE,-(SP)
	MOVE.W	#$40,-(SP)
	TRAP	#1
	LEA	12(SP),SP

	PEA	TABLE_OFFSET
	MOVE.L	#64,-(SP)
	MOVE.W	HANDLE,-(SP)
	MOVE.W	#$40,-(SP)
	TRAP	#1
	LEA	12(SP),SP

	PEA	TABLE_FINALE
	MOVE.L	D6,-(SP)
	MOVE.W	HANDLE,-(SP)
	MOVE.W	#$40,-(SP)
	TRAP	#1
	LEA	12(SP),SP

	PEA	BUFFER
	MOVE.L	D7,-(SP)
	MOVE.W	HANDLE,-(SP)
	MOVE.W	#$40,-(SP)
	TRAP	#1
	LEA	12(SP),SP

	MOVE.W	HANDLE,-(SP)
	MOVE.W	#$3E,-(SP)
	TRAP	#1
	ADDQ.W	#4,SP

	RTS

	;ORDRE :
	;        1.B POUR L'OCTET
	;        1.B POUR LE NB DE BITS
	;        1.W POUR LA VALEUR
TABLE_CONVERSE	DS.L	256
TABLE_ANNEX	DS.L	256
	;LES 16 OFFSET SONT EN .W PAR RAPPORT A TABLE_FINALE
TABLE_OFFSET	DS.L	16
	;FORMAT:
	;       1.B POUR L'OCTET
	;       1.B A 0
	;       1.W POUR LA VALEUR
TABLE_FINALE	DS.L	256
BUFFER	DS.B	100000

BUF_FREQ	DS.L	256
	DS.L	10
BUF_TRIê	DS.W	5*256
BUF_SAUV	DS.L	2
BUF_NOEUDS	DS.B	20000