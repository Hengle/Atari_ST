PAS_Y = 2
PAS_X = 2

VITESSE_TIR_PHASER = 15

NB_PASSES_TIR = 8

;ARME No 1: LE PHASER.
;ARME No 2: LE BRUTOS.

;15 CARRê DE COLLISIONS MAXIMUMS PAR MAPS
;VERIFIER LA SECTION BSS

;PENSER A AJOUTER UN EFFET DE FREINAGE LOSQUE L'ON MONTE APRES AVOIR DESCENDU
;L'EFFET DE FREINAGE ETANT PROPORTIONNEL A LA DURêE DE LA DESCENTE...

MAIN	CLR.L	-(SP)
	MOVE.W	#$20,-(SP)
	TRAP	#1
	ADDQ.W	#6,SP

	MOVE.W	#2,NO_ARME	;ARME No 1
	BSR	INIT_ADR_ACTU

	;INITS POUR LE PLAYER AVEC L'ARME ACTUELLE
	LEA	DIVERS,A0
	BSR	INIT_BNK_SPR
	MOVE.L	ADR_COL_BANK,A0
	BSR	INIT_BNK_COL
	BSR	PREPARE_PLAYER

	;INITS POUR LA MAP ACTUELLE
	CLR.W	PT_MAP	;SALLE 0
	BSR	PREPARE_MAP
	CLR.W	TIME	;POUR ETRE SUR

	;ON PREP LES ADRS D'EFFACAGE ET LES DATAS D'EFFACAGE
	LEA	ADR_EFF,A0
	LEA	SOV_EFF,A1
	MOVE.L	A1,(A0)+
	CLR.L	(A1)+
	CLR.W	(A1)+
	MOVE.L	A1,(A0)+
	CLR.L	(A1)+
	CLR.W	(A1)+

	;ON INIT L'ARME ACTIVE
	MOVE.L	ADR_TIR_PLAYER,A0
	BSR	INIT_BNK_SPR
	BSR	PREPARE_ARME

	LEA	ADR_EFF_TIRS,A0
	LEA	BUF_EFF_TIRS,A1
	MOVE.L	A1,(A0)+
	MOVE.W	#$1234,(A1)
	LEA	(1+3*50)*2(A1),A1
	MOVE.L	A1,(A0)+
	MOVE.W	#$1234,(A1)

	BSR	INIT_SYSTEME

	MOVE.L	SCREEN1,A0
	JSR	CODE_MAP
	MOVE.L	SCREEN2,A0
	JSR	CODE_MAP

	MOVE.W	#$2700,SR
	CLR.B	$FFFFFA07.W
	CLR.B	$FFFFFA09.W
;	MOVEQ	#1,D0
;	JSR	ZIK
	BSET	#6,$FFFFFA09.W
	BSET	#6,$FFFFFA15.W
	BCLR	#3,$FFFFFA17.W
	MOVE.L	#IT_CLAVIER,$118.W
	MOVE.L	#VBLR,$70.W
	CLR.W	NB_VBL
	MOVE.W	#$2300,SR

IT_VBL	BSR	VSYNC

	MOVE.W	#$700,$FFFF8240.W
	BSR	EXAM_KEYBOARD
	LEA	TABLE_CLAVIER,A0
	MOVE.L	(A0,D0.W),A0
	JSR	(A0)	;ON AGIT SUR LE PLAYER
	MOVE.W	#$770,$FFFF8240.W

	BSR	EFFAC_TIRS

	BSR	EFFAC_PLAYER

	LEA	COOR_PLAYER,A0
	MOVE.W	(A0)+,D1	;X DU PLAYER
	MOVE.W	(A0)+,D2	;Y DES PIEDS DU PLAYER
	MOVE.L	(A0)+,A1	;A1=ADRESSE DE LA SEQUENCE
	ADDA.W	2(A0),A1	;+POINTEUR
	MOVE.W	(A1)+,D0	;D2=No DE L'ANIM
	MOVE.W	D0,D3
	MULU.W	#102,D3
	LEA	TABLE_ADR_PLAYER,A2
	SUB.W	(A2,D3.W),D2
	BSR	AFF_PLAYER

	BSR	GEST_FIRE

	;SWAPPING DES ADR D'EFFACAGES
	LEA	ADR_EFF,A0
	MOVE.L	(A0)+,D0
	MOVE.L	(A0),-(A0)
	MOVE.L	D0,4(A0)

	;SWAPPING DES ADR D'EFFACAGES DES TIRS
	LEA	ADR_EFF_TIRS,A0
	MOVE.L	(A0)+,D0
	MOVE.L	(A0),-(A0)
	MOVE.L	D0,4(A0)

	MOVE.L	SCREEN2,A0
	JSR	CODE_MAP

	MOVE.W	PALETTE,$FFFF8240.W

	;ON AFFICHE LES MONSTRES VIVANTS

	;ON AFFICHE LES EXPLOSIONS DE MONSTRES

	BSR	SWAPEC

	BRA	IT_VBL

VSYNC	CMPI.W	#1,NB_VBL
	BLT.S	VSYNC
	CLR.W	NB_VBL
	RTS

VBLR	ADDQ.W	#1,NB_VBL
	MOVEM.L	D0-A6,-(SP)

;	JSR	ZIK+8

	MOVE.L	SCREEN2,A0
	MOVE.B	FIRE,(A0)
	LEA	BUF_CLAV,A1
	MOVE.B	(A1)+,1(A0)
	MOVE.B	(A1)+,8(A0)
	MOVE.B	(A1)+,9(A0)

	MOVEM.L	(SP)+,D0-A6
	RTE

IT_CLAVIER	MOVEM.L	D0/A0/A1,-(SP)
	MOVEQ	#0,D0
	MOVE.B	$FFFFFC02.W,D0
	CMPI.W	#$F0,D0
	BGE.S	.ON_SORT
	CMPI.B	#$38,D0
	BNE.S	.TST2
	ST	FIRE
	BRA.S	.ON_SORT
.TST2	CMPI.B	#$80+$38,D0
	BNE.S	.TST3
	SF	FIRE
	BRA.S	.ON_SORT
.TST3	;ACTIVATION POTENTIELLE
	LEA	TST_CLAV(PC),A0
	LEA	BUF_CLAV(PC),A1
	CMP.B	(A0)+,D0
	BNE.S	.NOT_1
	ST	(A1)
	BRA.S	.ON_SORT
.NOT_1	CMP.B	(A0)+,D0
	BNE.S	.NOT_2
	ST	1(A1)
	BRA.S	.ON_SORT
.NOT_2	CMP.B	(A0)+,D0
	BNE.S	.NOT_3
	ST	2(A1)
	BRA.S	.ON_SORT
.NOT_3	;DESACTIVATION POTENTIELLE
	CMP.B	(A0)+,D0
	BNE.S	.NOT_4
	SF	(A1)
	BRA.S	.ON_SORT
.NOT_4	CMP.B	(A0)+,D0
	BNE.S	.NOT_5
	SF	1(A1)
	BRA.S	.ON_SORT
.NOT_5	CMP.B	(A0)+,D0
	BNE.S	.NOT_6
	SF	2(A1)
	BRA	.ON_SORT
.NOT_6
.ON_SORT	MOVEM.L	(SP)+,D0/A0/A1
	RTE

GO_DOWN	LEA	COOR_PLAYER,A0

	TST.W	12(A0)
	BEQ.S	DOWN_ON_MARCHAIT

.ON_VOLAIT	ADDQ.W	#PAS_Y,2(A0)	;ON DESCEND LE PLAYER

	MOVE.W	2(A0),D2	;Y DES PIEDS DU PLAYER
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1)+,D1	;D1=No DE L'ANIM
	MOVE.W	D1,D0
	LEA	TABLE_ADR_PLAYER,A3
	MULU.W	#102,D0
	SUB.W	(A3,D0.W),D2	;D2=Y DU HAUT DU PLAYER

	BSR	TEST_COLLI_PLAYER_DECOR
	TST.W	D4
	BNE.S	.NO_COLLISION
.COLLISION	SUBQ.W	#1,D1	;UN AU-DESSUS
	MOVE.W	D1,2(A0)	;NOUVEAU Y DE PIEDS
	LEA	SENS_MARCHE,A1
	MOVE.W	8(A0),D0
	ADD.W	D0,D0
	ADD.W	D0,D0
	MOVE.L	(A1,D0.W),A1	;A1=ADRESSE DE LA SEQ DE L'ANIM DE MARCHE
	MOVE.L	A1,4(A0)	;NOUVELLE ADRESSE
	CLR.W	10(A0)	;POINTEUR D'ANIM A 0
	CLR.W	12(A0)	;ON MARCHE
	RTS
.NO_COLLISION	ADDQ.W	#2,10(A0)
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	CMPI.W	#-1,(A1)
 	BNE.S	.OK
	CLR.W	10(A0)	;POINTEUR A 0
.OK	RTS
DOWN_ON_MARCHAIT
	ADDQ.W	#PAS_Y,2(A0)	;ON DESCEND LE PLAYER
	MOVE.W	2(A0),D2	;Y DES PIEDS DU PLAYER
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1)+,D1	;D1=No DE L'ANIM
	MOVE.W	D1,D0
	LEA	TABLE_ADR_PLAYER,A3
	MULU.W	#102,D0
	SUB.W	(A3,D0.W),D2	;D2=Y DU HAUT DU PLAYER
	BSR	TEST_COLLI_PLAYER_DECOR
	TST.W	D4
	BNE.S	.NO_COLLISION
.COLLISION	SUBQ.W	#1,D1
	MOVE.W	D1,2(A0)	;NOUVEAU Y
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DE L'ANIM
	MULU.W	#102,D0
	LEA	TABLE_ADR_PLAYER,A1
	ADDA.W	D0,A1
	MOVE.W	2(A1),D0
	ADD.W	D0,(A0)	;NEW_X
	CLR.W	10(A0)

;	ADDQ.W	#2,2(A0)	;ON DESCEND LE PLAYER
;	MOVE.W	2(A0),D2	;Y DES PIEDS DU PLAYER
;	MOVE.L	4(A0),A1
;	ADDA.W	10(A0),A1
;	MOVE.W	(A1)+,D1	;D1=No DE L'ANIM
;	MOVE.W	D1,D0
;	LEA	TABLE_ADR_PLAYER,A3
;	MULU.W	#102,D0
;	SUB.W	(A3,D0.W),D2	;D2=Y DU HAUT DU PLAYER
;	BSR	TEST_COLLI_PLAYER_DECOR
;	TST.W	D4
;	BNE.S	.NO_COLLISION
;	SUBQ.W	#1,D1
;	MOVE.W	D1,2(A0)
	RTS
.NO_COLLISION	LEA	SENS_VOL,A3
	MOVE.W	8(A0),D0
	ADD.W	D0,D0
	ADD.W	D0,D0
	MOVE.L	(A3,D0.W),A3
	MOVE.L	A3,4(A0)   ;ON PLACE L'ADR DE LA SEQ DE VOL
	CLR.W	10(A0)	;POINTEUR A 0
	MOVE.W	#1,12(A0)	;ON VOLE!

	TST.W	8(A0)
	BNE.S	.PAS_GAUCHE
	MOVE.W	(A3),D1	;D1=No DE L'ANIM
	LEA	BUF_ANIM_PLAYER+2,A2
	MULU.W	#14,D1
	ADDA.W	D1,A2
	MOVE.W	(A2),D0       ;D0=LONGUEUR DU SPRITE DE VOL
	MOVE.W	BUF_CARRê_TEMP+4,D1  ;D1=X2 DU CARRê DE COLLISION DU PLAYER
	SUB.W	D0,D1	;D1=X
	MOVE.W	D1,(A0)	;NEW X
	RTS
.PAS_GAUCHE	MOVE.W	BUF_CARRê_TEMP,D1  ;D1=X1 DU CARRê DE COLLISION DU PLAYER
	MOVE.W	D1,(A0)	;NEW X
	RTS

GO_LEFT	LEA	COOR_PLAYER,A0

	CMPI.W	#1,12(A0)
	BEQ	LEFT_ON_VOLE
.ON_MARCHE	TST.W	8(A0)
	BEQ.S	.EVER_LEFT
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DE L'ANCIEN SPRITE
	MOVE.W	D0,D3
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;A2=(X1,Y1,X2,Y2)
	MOVE.W	4(A2),D1  ;D1=X2 DU CARRê DE L'ANCIEN SPRITE
	ADD.W	(A0),D1	;+X_GEN

	LEA	TABLE_ADR_PLAYER,A2
	MULU.W	#102,D3
	ADDA.W	D3,A2
	MOVE.W	2(A2),D7	;D7=OFFSET_X
	ADD.W	D7,D1	;D1=X1+X_GEN+OFFSET_X

	CLR.W	8(A0)
	MOVE.L	SENS_MARCHE,4(A0)
	CLR.W	10(A0)	;POINTEUR A 0

	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DU NOUVEAU
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;A2=(X1,Y1,X2,Y2)
	MOVE.W	4(A2),D0   ;D0=X2 DU CARRê DU NOUVEAU SPRITE
	SUB.W	D0,D1
	SUBQ.W	#1,D1
	MOVE.W	D1,(A0)	;NEW_X
	MOVE.W	#0,TIME
	RTS
.EVER_LEFT	TST.W	TIME
	BEQ.S	.GO_GO
	SUBQ.W	#1,TIME
	RTS
.GO_GO	ADDQ.W	#2,10(A0)
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	CMPI.W	#-1,(A1)
	BNE.S	.OK
	MOVE.W	2(A1),10(A0)	;NOUVEAU POINTEUR
	MOVE.W	4(A1),D0
	ADD.W	D0,(A0)	;ON BOUGE LE X
.OK	MOVE.W	#1,TIME

	MOVE.W	2(A0),D2	;Y DES PIEDS DU PLAYER
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1)+,D1	;D1=No DE L'ANIM
	MOVE.W	D1,D0
	LEA	TABLE_ADR_PLAYER,A3
	MULU.W	#102,D0
	SUB.W	(A3,D0.W),D2	;D2=Y DU HAUT DU PLAYER

	BSR	TEST_COLLI_PLAYER_DECOR
	TST.W	D4
	BNE.S	.NO_COLLISION1
.COLLISION1	ADDQ.W	#1,D2	;X2 DU CARRê INTERCEPTê
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DE L'ANIM
	MOVE.W	D0,D4
	MULU.W	#102,D0
	LEA	TABLE_ADR_PLAYER,A1
	ADDA.W	D0,A1
	SUB.W	2(A1),D2	;D2=X2-OFFSET_X
	MULU.W	#6,D4
	MOVE.L	ADR_COL_BANK,A1
	ADDQ.W	#2,A1
;	LEA	COL_PLAYER+2,A1
	ADDA.W	D4,A1
	MOVE.L	2(A1),A1
	SUB.W	(A1),D2
	MOVE.W	D2,(A0)	;NEW X
.NO_COLLISION1
	ADDQ.W	#PAS_Y,2(A0)
	MOVE.W	2(A0),D2	;Y DES PIEDS DU PLAYER
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1)+,D1	;D1=No DE L'ANIM
	MOVE.W	D1,D0
	LEA	TABLE_ADR_PLAYER,A3
	MULU.W	#102,D0
	SUB.W	(A3,D0.W),D2	;D2=Y DU HAUT DU PLAYER

	BSR	TEST_COLLI_PLAYER_DECOR
	TST.W	D4
	BNE.S	.NO_COLLISION
.COLLISION	SUBQ.W	#1,D1
	MOVE.W	D1,2(A0)
	RTS
.NO_COLLISION	ADDQ.W	#PAS_Y,2(A0)	;Y=Y+2

	MOVE.W	#1,12(A0)	;ON VOLE!
	CLR.W	10(A0)	;POINTEUR A 0
	MOVE.L	SENS_VOL,A1
	MOVE.L	A1,4(A0)
	MOVE.W	(A1),D1	;D1=No DE L'ANIM
	LEA	BUF_ANIM_PLAYER+2,A2
	MULU.W	#14,D1
	ADDA.W	D1,A2
	MOVE.W	(A2),D0       ;D0=LONGUEUR DU SPRITE DE VOL
	MOVE.W	BUF_CARRê_TEMP+4,D1  ;D1=X2 DU CARRê DE COLLISION DU PLAYER
	SUB.W	D0,D1	;D1=X
	MOVE.W	D1,(A0)	;NEW X
	RTS
LEFT_ON_VOLE	TST.W	8(A0)
	BEQ.S	.SENS_OK

	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DE L'ANCIEN SPRITE
	MOVE.W	D0,D3
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;A2=(X1,Y1,X2,Y2)
	MOVE.W	(A2),D1  ;D1=X1 DU CARRê DE L'ANCIEN SPRITE
	ADD.W	(A0),D1	;+X_GEN

	LEA	TABLE_ADR_PLAYER,A2
	MULU.W	#102,D3
	ADDA.W	D3,A2
	MOVE.W	2(A2),D7	;D7=OFFSET_X
	ADD.W	D7,D1	;D1=X1+X_GEN+OFFSET_X

	CLR.W	8(A0)
	MOVE.L	SENS_VOL,4(A0)
	CLR.W	10(A0)	;POINTEUR A 0

	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DU NOUVEAU
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;A2=(X1,Y1,X2,Y2)
	MOVE.W	(A2),D0   ;D0=X1 DU CARRê DU NOUVEAU SPRITE
	SUB.W	D0,D1
	MOVE.W	D1,(A0)	;NEW_X

.SENS_OK	ADDI.W	#-PAS_X,(A0)	;X=X+DEPLAC (DEPLAC<0)
	MOVE.W	2(A0),D2	;Y DES PIEDS DU PLAYER
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1)+,D1	;D1=No DE L'ANIM
	MOVE.W	D1,D0
	LEA	TABLE_ADR_PLAYER,A3
	MULU.W	#102,D0
	SUB.W	(A3,D0.W),D2	;D2=Y DU HAUT DU PLAYER
	BSR	TEST_COLLI_PLAYER_DECOR
	TST.W	D4
	BNE.S	.NO_COLLISION1
.COLLISION1	ADDQ.W	#1,D2	;X2 DU CARRê INTERCEPTê
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DE L'ANIM
	MOVE.W	D0,D1
	MOVE.L	ADR_COL_BANK,A1
	ADDQ.W	#2,A1
;	LEA	COL_PLAYER+2,A1
	MULU.W	#6,D1
	ADDA.W	D1,A1
	MOVE.L	2(A1),A1	;X1,Y1,X2,Y2 DU CARRê DU PLAYER
	SUB.W	(A1),D2
	MOVE.W	D2,(A0)	;NEW X
.NO_COLLISION1	ADDQ.W	#PAS_Y,2(A0)	;ON DESCEND
	MOVE.W	2(A0),D2	;Y DES PIEDS DU PLAYER
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1)+,D1	;D1=No DE L'ANIM
	MOVE.W	D1,D0
	LEA	TABLE_ADR_PLAYER,A3
	MULU.W	#102,D0
	SUB.W	(A3,D0.W),D2	;D2=Y DU HAUT DU PLAYER
	BSR	TEST_COLLI_PLAYER_DECOR
	TST.W	D4
	BNE.S	.NO_COLLISION
.COLLISION	CLR.W	12(A0)	;FLAG DE MARCHE
	SUBQ.W	#1,D1
	MOVE.W	D1,2(A0)	;NOUVEAU Y
	CLR.W	10(A0)	;POINTEUR A 0
	MOVE.L	SENS_MARCHE,A1
	MOVE.L	A1,4(A0)
	RTS
.NO_COLLISION	ADDQ.W	#2,10(A0)
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	CMPI.W	#-1,(A1)
	BNE.S	.OK
	MOVE.W	2(A1),10(A0)	;NOUVEAU POINTEUR
	MOVE.W	4(A1),D0
	ADD.W	D0,(A0)	;ON BOUGE LE X
.OK	MOVE.W	#1,TIME
	RTS

GO_UP	LEA	COOR_PLAYER,A0
	TST.W	12(A0)
	BEQ.S	UP_ON_MARCHAIT
	ADDQ.W	#2,10(A0)
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	CMPI.W	#-1,(A1)
	BNE.S	.OK
	MOVE.W	2(A1),10(A0)
.OK	SUBQ.W	#PAS_Y,2(A0)	;Y=Y-2

	MOVE.W	2(A0),D2	;Y DES PIEDS DU PLAYER
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1)+,D1	;D1=No DE L'ANIM
	MOVE.W	D1,D0
	LEA	TABLE_ADR_PLAYER,A3
	MULU.W	#102,D0
	SUB.W	(A3,D0.W),D2	;D2=Y DU HAUT DU PLAYER

	BSR	TEST_COLLI_PLAYER_DECOR
	TST.W	D4
	BNE.S	.NO_COLLISION
.COLLISION	ADDQ.W	#1,D3      ;Y2 DU CARRê DE DECOR INTERCEPTê
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DE L'ANIM
	MOVE.W	D0,D1
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;X1,Y1,X2,Y2, DU CARRê DU PLAYER
	SUB.W	2(A2),D3	;Y_HAUT DU PLAYER
	MULU.W	#102,D1
	LEA	TABLE_ADR_PLAYER,A1
	ADDA.W	D1,A1
	ADD.W	(A1),D3	;+HAUTEUR
	MOVE.W	D3,2(A0)
.NO_COLLISION	RTS
UP_ON_MARCHAIT	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0
	MULU.W	#102,D0
	LEA	TABLE_ADR_PLAYER,A1
	ADDA.W	D0,A1
	MOVE.W	2(A1),D0
	ADD.W	D0,(A0)	;X=X+OFFSET_X
	MOVE.W	8(A0),D0
	ADD.W	D0,D0
	ADD.W	D0,D0
	LEA	SENS_VOL,A1
	MOVE.L	(A1,D0.W),A1
	MOVE.L	A1,4(A0)
	CLR.W	10(A0)	;POINTEUR A 0
	SUBQ.W	#PAS_Y,2(A0)
	MOVE.W	#1,12(A0)
	RTS

GO_UP_LEFT	LEA	COOR_PLAYER,A0

	TST.W	12(A0)
	BEQ	UP_LEFT_ON_MARCHAIT
	TST.W	8(A0)
	BEQ.S	.EVER_LEFT

	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DE L'ANCIEN SPRITE
	MOVE.W	D0,D3
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;A2=(X1,Y1,X2,Y2)
	MOVE.W	(A2),D1  ;D1=X1 DU CARRê DE L'ANCIEN SPRITE
	ADD.W	(A0),D1	;+X_GEN

	LEA	TABLE_ADR_PLAYER,A2
	MULU.W	#102,D3
	ADDA.W	D3,A2
	MOVE.W	2(A2),D7	;D7=OFFSET_X
	ADD.W	D7,D1	;D1=X1+X_GEN+OFFSET_X

	CLR.W	8(A0)	;VERS LA GAUCHE
	MOVE.L	SENS_VOL,4(A0)
	CLR.W	10(A0)	;POINTEUR A 0

	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DU NOUVEAU
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;A2=(X1,Y1,X2,Y2)
	MOVE.W	(A2),D0   ;D0=X1 DU CARRê DU NOUVEAU SPRITE
	SUB.W	D0,D1
	MOVE.W	D1,(A0)	;NEW_X

.EVER_LEFT	ADDQ.W	#2,10(A0)
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	CMPI.W	#-1,(A1)
	BNE.S	.OK
	MOVE.W	2(A1),10(A0)
.OK	SUBQ.W	#PAS_Y,2(A0)	;ON MONTE

	MOVE.W	2(A0),D2	;Y DES PIEDS DU PLAYER
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1)+,D1	;D1=No DE L'ANIM
	MOVE.W	D1,D0
	LEA	TABLE_ADR_PLAYER,A3
	MULU.W	#102,D0
	SUB.W	(A3,D0.W),D2	;D2=Y DU HAUT DU PLAYER

	BSR	TEST_COLLI_PLAYER_DECOR
	TST.W	D4
	BNE.S	.NO_COLLISION
.COLLISION	ADDQ.W	#1,D3      ;Y2 DU CARRê DE DECOR INTERCEPTê
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DE L'ANIM
	MOVE.W	D0,D1
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;X1,Y1,X2,Y2, DU CARRê DU PLAYER
	SUB.W	2(A2),D3	;Y_HAUT DU PLAYER
	MULU.W	#102,D1
	LEA	TABLE_ADR_PLAYER,A1
	ADDA.W	D1,A1
	ADD.W	(A1),D3	;+HAUTEUR
	MOVE.W	D3,2(A0)
.NO_COLLISION	SUBQ.W	#PAS_X,(A0)	;VERS LA GAUCHE

	MOVE.W	2(A0),D2	;Y DES PIEDS DU PLAYER
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1)+,D1	;D1=No DE L'ANIM
	MOVE.W	D1,D0
	LEA	TABLE_ADR_PLAYER,A3
	MULU.W	#102,D0
	SUB.W	(A3,D0.W),D2	;D2=Y DU HAUT DU PLAYER

	BSR	TEST_COLLI_PLAYER_DECOR
	TST.W	D4
	BNE.S	.NO_COLLISION2
.COLLISION2	ADDQ.W	#1,D2	;X2 DU CARRê INTERCEPTê
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DE L'ANIM
	MOVE.W	D0,D1
	MOVE.L	ADR_COL_BANK,A1
	ADDQ.W	#2,A1
;	LEA	COL_PLAYER+2,A1
	MULU.W	#6,D1
	ADDA.W	D1,A1
	MOVE.L	2(A1),A1	;X1,Y1,X2,Y2 DU CARRê DU PLAYER
	SUB.W	(A1),D2
	MOVE.W	D2,(A0)	;NEW X
.NO_COLLISION2	RTS
UP_LEFT_ON_MARCHAIT
	TST.W	8(A0)
	BEQ.S	.SENS_OK
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DE L'ANCIEN SPRITE
	MOVE.W	D0,D3
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;A2=(X1,Y1,X2,Y2)
	MOVE.W	4(A2),D1  ;D1=X2 DU CARRê DE L'ANCIEN SPRITE
	ADD.W	(A0),D1	;+X_GEN

	LEA	TABLE_ADR_PLAYER,A2
	MULU.W	#102,D3
	ADDA.W	D3,A2
	MOVE.W	2(A2),D7	;D7=OFFSET_X
	ADD.W	D7,D1	;D1=X1+X_GEN+OFFSET_X

	MOVE.W	#1,12(A0)	;ON VOLE!
	CLR.W	8(A0)	;VERS LA GAUCHE
	MOVE.L	SENS_VOL,4(A0)
	CLR.W	10(A0)	;POINTEUR A 0

	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DU NOUVEAU
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;A2=(X1,Y1,X2,Y2)
	MOVE.W	4(A2),D0   ;D0=X2 DU CARRê DU NOUVEAU SPRITE
	SUB.W	D0,D1
	SUBQ.W	#1,D1
	MOVE.W	D1,(A0)	;NEW_X
	MOVE.W	#0,TIME
	BRA.S	.TEST_COL

.SENS_OK	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0
	MULU.W	#102,D0
	LEA	TABLE_ADR_PLAYER,A1
	ADDA.W	D0,A1
	MOVE.W	2(A1),D0
	ADD.W	D0,(A0)	;X=X+OFFSET_X

	MOVE.L	SENS_VOL,4(A0)
	CLR.W	10(A0)	;POINTEUR A 0
	CLR.W	8(A0)	;VERS LA GAUCHE
	MOVE.W	#1,12(A0)	;ON VOLE!

.TEST_COL	SUBQ.W	#PAS_X,(A0)
	SUBQ.W	#PAS_Y,2(A0)	;ON MONTE

	MOVE.W	2(A0),D2	;Y DES PIEDS DU PLAYER
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1)+,D1	;D1=No DE L'ANIM
	MOVE.W	D1,D0
	LEA	TABLE_ADR_PLAYER,A3
	MULU.W	#102,D0
	SUB.W	(A3,D0.W),D2	;D2=Y DU HAUT DU PLAYER

	BSR	TEST_COLLI_PLAYER_DECOR
	TST.W	D4
	BNE.S	.NO_COLLISION
.COLLISION	ADDQ.W	#1,D2	;X2 DU CARRê INTERCEPTê
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DE L'ANIM
	MOVE.W	D0,D1
	MOVE.L	ADR_COL_BANK,A1
	ADDQ.W	#2,A1
;	LEA	COL_PLAYER+2,A1
	MULU.W	#6,D1
	ADDA.W	D1,A1
	MOVE.L	2(A1),A1	;X1,Y1,X2,Y2 DU CARRê DU PLAYER
	SUB.W	(A1),D2
	MOVE.W	D2,(A0)	;NEW X
.NO_COLLISION	RTS

GO_RIGHT	LEA	COOR_PLAYER,A0

	CMPI.W	#1,12(A0)
	BEQ	RIGHT_ON_VOLE
.ON_MARCHE	TST.W	8(A0)
	BNE.S	.EVER_RIGHT
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DE L'ANCIEN SPRITE
	MOVE.W	D0,D3
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;A2=(X1,Y1,X2,Y2)
	MOVE.W	(A2),D1  ;D1=X1 DU CARRê DE L'ANCIEN SPRITE
	ADD.W	(A0),D1	;+X_GEN

	LEA	TABLE_ADR_PLAYER,A2
	MULU.W	#102,D3
	ADDA.W	D3,A2
	MOVE.W	2(A2),D7	;D7=OFFSET_X
	ADD.W	D7,D1	;D1=X1+X_GEN+OFFSET_X

	MOVE.W	#1,8(A0)
	MOVE.L	SENS_MARCHE+4,4(A0)
	CLR.W	10(A0)	;POINTEUR A 0
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DU NOUVEAU
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;A2=(X1,Y1,X2,Y2)
	MOVE.W	(A2),D0   ;D0=X1 DU CARRê DU NOUVEAU SPRITE
	SUB.W	D0,D1
	ADDQ.W	#1,D1
	MOVE.W	D1,(A0)	;NEW_X

	MOVE.W	#0,TIME
	RTS
.EVER_RIGHT	TST.W	TIME
	BEQ.S	.GO_GO
	SUBQ.W	#1,TIME
	RTS
.GO_GO	ADDQ.W	#2,10(A0)
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	CMPI.W	#-1,(A1)
	BNE.S	.OK
	MOVE.W	2(A1),10(A0)	;NOUVEAU POINTEUR
	MOVE.W	4(A1),D0
	ADD.W	D0,(A0)	;ON BOUGE LE X
.OK	MOVE.W	#1,TIME

	MOVE.W	2(A0),D2	;Y DES PIEDS DU PLAYER
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1)+,D1	;D1=No DE L'ANIM
	MOVE.W	D1,D0
	LEA	TABLE_ADR_PLAYER,A3
	MULU.W	#102,D0
	SUB.W	(A3,D0.W),D2	;D2=Y DU HAUT DU PLAYER

	BSR	TEST_COLLI_PLAYER_DECOR
	TST.W	D4
	BNE.S	.NO_COLLISION1
.COLLISION1	SUBQ.W	#1,D0	;X1 DU CARRê INTERCEPTê
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D1	;D0=No DE L'ANIM
	MOVE.W	D1,D2
	MULU.W	#102,D1
	LEA	TABLE_ADR_PLAYER,A1
	ADDA.W	D1,A1
	SUB.W	2(A1),D0	;D0=X1-OFFSET_X
	MULU.W	#6,D2
	MOVE.L	ADR_COL_BANK,A1
	ADDQ.W	#2,A1
;	LEA	COL_PLAYER+2,A1
	ADDA.W	D2,A1
	MOVE.L	2(A1),A1
	SUB.W	4(A1),D0	;D0=X1-OFFSET_X-X2(PLAYER)
	MOVE.W	D0,(A0)	;NEW X
.NO_COLLISION1
	ADDQ.W	#PAS_Y,2(A0)
	MOVE.W	2(A0),D2	;Y DES PIEDS DU PLAYER
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1)+,D1	;D1=No DE L'ANIM
	MOVE.W	D1,D0
	LEA	TABLE_ADR_PLAYER,A3
	MULU.W	#102,D0
	SUB.W	(A3,D0.W),D2	;D2=Y DU HAUT DU PLAYER

	BSR	TEST_COLLI_PLAYER_DECOR
	TST.W	D4
	BNE.S	.NO_COLLISION
.COLLISION	SUBQ.W	#1,D1
	MOVE.W	D1,2(A0)
	RTS
.NO_COLLISION	ADDQ.W	#PAS_Y,2(A0)	;Y=Y+2

	MOVE.W	#1,12(A0)	;ON VOLE!
	CLR.W	10(A0)	;POINTEUR A 0
	MOVE.L	SENS_VOL+4,A1
	MOVE.L	A1,4(A0)
;	MOVE.W	(A1),D1	;D1=No DE L'ANIM
;	LEA	BUF_ANIM_PLAYER+2,A2
;	MULU.W	#14,D1
;	ADDA.W	D1,A2
;	MOVE.W	(A2),D0       ;D0=LONGUEUR DU SPRITE DE VOL
	MOVE.W	BUF_CARRê_TEMP,D1  ;D1=X1 DU CARRê DE COLLISION DU PLAYER
;	SUB.W	D0,D1	;D1=X
	MOVE.W	D1,(A0)	;NEW X
	RTS
RIGHT_ON_VOLE	TST.W	8(A0)
	BNE.S	.SENS_OK
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DE L'ANCIEN SPRITE
	MOVE.W	D0,D3
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;A2=(X1,Y1,X2,Y2)
	MOVE.W	4(A2),D1  ;D1=X2 DU CARRê DE L'ANCIEN SPRITE
	ADD.W	(A0),D1	;+X_GEN

	LEA	TABLE_ADR_PLAYER,A2
	MULU.W	#102,D3
	ADDA.W	D3,A2
	MOVE.W	2(A2),D7	;D7=OFFSET_X
	ADD.W	D7,D1	;D1=X2+X_GEN+OFFSET_X

	MOVE.W	#1,8(A0)
	MOVE.L	SENS_VOL+4,4(A0)
	CLR.W	10(A0)	;POINTEUR A 0
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DU NOUVEAU
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;A2=(X1,Y1,X2,Y2)
	MOVE.W	4(A2),D0   ;D0=X2 DU CARRê DU NOUVEAU SPRITE
	SUB.W	D0,D1
	MOVE.W	D1,(A0)	;NEW_X

.SENS_OK	ADDQ.W	#PAS_X,(A0)	;X=X+DEPLAC (DEPLAC>0)
	MOVE.W	2(A0),D2	;Y DES PIEDS DU PLAYER
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1)+,D1	;D1=No DE L'ANIM
	MOVE.W	D1,D0
	LEA	TABLE_ADR_PLAYER,A3
	MULU.W	#102,D0
	SUB.W	(A3,D0.W),D2	;D2=Y DU HAUT DU PLAYER
	BSR	TEST_COLLI_PLAYER_DECOR
	TST.W	D4
	BNE.S	.NO_COLLISION1
.COLLISION1	SUBQ.W	#1,D0	;X1 DU CARRê INTERCEPTê
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D2	;D0=No DE L'ANIM
	MOVE.L	ADR_COL_BANK,A1
	ADDQ.W	#2,A1
;	LEA	COL_PLAYER+2,A1
	MULU.W	#6,D2
	ADDA.W	D2,A1
	MOVE.L	2(A1),A1	;X1,Y1,X2,Y2 DU CARRê DU PLAYER
	SUB.W	4(A1),D0
	MOVE.W	D0,(A0)	;NEW X
.NO_COLLISION1	ADDQ.W	#PAS_Y,2(A0)	;ON DESCEND
	MOVE.W	2(A0),D2	;Y DES PIEDS DU PLAYER
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1)+,D1	;D1=No DE L'ANIM
	MOVE.W	D1,D0
	LEA	TABLE_ADR_PLAYER,A3
	MULU.W	#102,D0
	SUB.W	(A3,D0.W),D2	;D2=Y DU HAUT DU PLAYER
	BSR	TEST_COLLI_PLAYER_DECOR
	TST.W	D4
	BNE.S	.NO_COLLISION
.COLLISION	CLR.W	12(A0)	;FLAG DE MARCHE
	SUBQ.W	#1,D1
	MOVE.W	D1,2(A0)	;NOUVEAU Y
	CLR.W	10(A0)	;POINTEUR A 0
	MOVE.L	SENS_MARCHE+4,A1
	MOVE.L	A1,4(A0)
	RTS
.NO_COLLISION	ADDQ.W	#2,10(A0)
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	CMPI.W	#-1,(A1)
	BNE.S	.OK
	MOVE.W	2(A1),10(A0)	;NOUVEAU POINTEUR
	MOVE.W	4(A1),D0
	ADD.W	D0,(A0)	;ON BOUGE LE X
.OK	MOVE.W	#1,TIME
	RTS

GO_UP_RIGHT	LEA	COOR_PLAYER,A0

	TST.W	12(A0)
	BEQ	UP_RIGHT_ON_MARCHAIT
	TST.W	8(A0)
	BNE.S	.EVER_RIGHT

	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DE L'ANCIEN SPRITE
	MOVE.W	D0,D3
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;A2=(X1,Y1,X2,Y2)
	MOVE.W	(A2),D1  ;D1=X1 DU CARRê DE L'ANCIEN SPRITE
	ADD.W	(A0),D1	;+X_GEN

	LEA	TABLE_ADR_PLAYER,A2
	MULU.W	#102,D3
	ADDA.W	D3,A2
	MOVE.W	2(A2),D7	;D7=OFFSET_X
	ADD.W	D7,D1	;D1=X1+X_GEN+OFFSET_X

	MOVE.W	#1,8(A0)	;VERS LA DROITE
	MOVE.L	SENS_VOL+4,4(A0)
	CLR.W	10(A0)	;POINTEUR A 0
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DU NOUVEAU
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;A2=(X1,Y1,X2,Y2)
	MOVE.W	(A2),D0   ;D0=X1 DU CARRê DU NOUVEAU SPRITE
	SUB.W	D0,D1
	MOVE.W	D1,(A0)	;NEW_X

.EVER_RIGHT	ADDQ.W	#2,10(A0)
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	CMPI.W	#-1,(A1)
	BNE.S	.OK
	MOVE.W	2(A1),10(A0)
.OK	SUBQ.W	#PAS_Y,2(A0)	;ON MONTE

	MOVE.W	2(A0),D2	;Y DES PIEDS DU PLAYER
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1)+,D1	;D1=No DE L'ANIM
	MOVE.W	D1,D0
	LEA	TABLE_ADR_PLAYER,A3
	MULU.W	#102,D0
	SUB.W	(A3,D0.W),D2	;D2=Y DU HAUT DU PLAYER

	BSR	TEST_COLLI_PLAYER_DECOR
	TST.W	D4
	BNE.S	.NO_COLLISION
.COLLISION	ADDQ.W	#1,D3      ;Y2 DU CARRê DE DECOR INTERCEPTê
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DE L'ANIM
	MOVE.W	D0,D1
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;X1,Y1,X2,Y2, DU CARRê DU PLAYER
	SUB.W	2(A2),D3	;Y_HAUT DU PLAYER
	MULU.W	#102,D1
	LEA	TABLE_ADR_PLAYER,A1
	ADDA.W	D1,A1
	ADD.W	(A1),D3	;+HAUTEUR
	MOVE.W	D3,2(A0)
.NO_COLLISION	ADDQ.W	#PAS_X,(A0)	;VERS LA DROITE

	MOVE.W	2(A0),D2	;Y DES PIEDS DU PLAYER
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1)+,D1	;D1=No DE L'ANIM
	MOVE.W	D1,D0
	LEA	TABLE_ADR_PLAYER,A3
	MULU.W	#102,D0
	SUB.W	(A3,D0.W),D2	;D2=Y DU HAUT DU PLAYER

	BSR	TEST_COLLI_PLAYER_DECOR
	TST.W	D4
	BNE.S	.NO_COLLISION2
.COLLISION2	SUBQ.W	#1,D0	;X1 DU CARRê INTERCEPTê
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D2	;D0=No DE L'ANIM
	MOVE.L	ADR_COL_BANK,A1
	ADDQ.W	#2,A1
;	LEA	COL_PLAYER+2,A1
	MULU.W	#6,D2
	ADDA.W	D2,A1
	MOVE.L	2(A1),A1	;X1,Y1,X2,Y2 DU CARRê DU PLAYER
	SUB.W	4(A1),D0
	MOVE.W	D0,(A0)	;NEW X
.NO_COLLISION2	RTS
UP_RIGHT_ON_MARCHAIT
	TST.W	8(A0)
	BNE.S	.SENS_OK
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DE L'ANCIEN SPRITE
	MOVE.W	D0,D3
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;A2=(X1,Y1,X2,Y2)
	MOVE.W	(A2),D1  ;D1=X1 DU CARRê DE L'ANCIEN SPRITE
	ADD.W	(A0),D1	;+X_GEN

	LEA	TABLE_ADR_PLAYER,A2
	MULU.W	#102,D3
	ADDA.W	D3,A2
	MOVE.W	2(A2),D7	;D7=OFFSET_X
	ADD.W	D7,D1	;D1=X1+X_GEN+OFFSET_X

	MOVE.W	#1,8(A0)	;VERS LA DROITE
	MOVE.L	SENS_VOL+4,4(A0)
	CLR.W	10(A0)	;POINTEUR A 0
	MOVE.W	#1,12(A0)	;ON VOLE!

	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0	;D0=No DU NOUVEAU
	MULU.W	#6,D0
	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	ADDA.W	D0,A2
	MOVE.L	2(A2),A2	;A2=(X1,Y1,X2,Y2)
	MOVE.W	(A2),D0   ;D0=X1 DU CARRê DU NOUVEAU SPRITE
	SUB.W	D0,D1
	ADDQ.W	#1,D1
	MOVE.W	D1,(A0)	;NEW_X
	BRA.S	.TEST_COL

.SENS_OK	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D0
	MULU.W	#102,D0
	LEA	TABLE_ADR_PLAYER,A1
	ADDA.W	D0,A1
	MOVE.W	2(A1),D0
	ADD.W	D0,(A0)	;X=X+OFFSET_X

	MOVE.L	SENS_VOL+4,4(A0)
	CLR.W	10(A0)	;POINTEUR A 0
	MOVE.W	#1,8(A0)	;VERS LA DROITE
	MOVE.W	#1,12(A0)	;ON VOLE!

.TEST_COL	SUBQ.W	#PAS_Y,2(A0)	;ON MONTE
	ADDQ.W	#PAS_X,(A0)
 
	MOVE.W	2(A0),D2	;Y DES PIEDS DU PLAYER
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1)+,D1	;D1=No DE L'ANIM
	MOVE.W	D1,D0
	LEA	TABLE_ADR_PLAYER,A3
	MULU.W	#102,D0
	SUB.W	(A3,D0.W),D2	;D2=Y DU HAUT DU PLAYER

	BSR	TEST_COLLI_PLAYER_DECOR
	TST.W	D4
	BNE.S	.NO_COLLISION
.COLLISION	SUBQ.W	#1,D0	;X1 DU CARRê INTERCEPTê
	MOVE.L	4(A0),A1
	ADDA.W	10(A0),A1
	MOVE.W	(A1),D2	;D0=No DE L'ANIM
	MOVE.L	ADR_COL_BANK,A1
	ADDQ.W	#2,A1
;	LEA	COL_PLAYER+2,A1
	MULU.W	#6,D2
	ADDA.W	D2,A1
	MOVE.L	2(A1),A1	;X1,Y1,X2,Y2 DU CARRê DU PLAYER
	SUB.W	4(A1),D0
	MOVE.W	D0,(A0)	;NEW X
.NO_COLLISION	RTS

TABLE_CLAVIER	DC.L	GO_DOWN	;0
	DC.L	GO_LEFT	;1
	DC.L	GO_UP	;2
	DC.L	GO_UP_LEFT	;3
	DC.L	GO_RIGHT	;4
	DC.L	GO_DOWN	;5
	DC.L	GO_UP_RIGHT	;6
	DC.L	GO_DOWN	;7 (MOUI, BOF...)

	;CETTE PROCEDURE EXAMINE BUF_CLAV (3.B)
	;ET RENVOIE DANS D0 UNE VALEUR ENTRE 0 ET 7
	;0-->7:DIRECTIONS
	;0:AUCUN APPUI, TOUTES LES TOUCHES SONT RELACHêES
	;1:GAUCHE
	;2:HAUT
	;3:HAUT-GAUCHE
	;4:DROITE
	;5:RIEN A FAIRE, A IGNORER <--> COMME POUR 0
	;6:HAUT-DROITE
	;7:IMPOSSIBLE!!! (DANS LE DOUTE...COMME POUR 0...)

	;D0 EST PREMULTIPLIê PAR 4...
EXAM_KEYBOARD	LEA	BUF_CLAV(PC),A0
	MOVEQ	#0,D0
	CMPI.B	#-1,(A0)+
	BNE.S	.PAS_GAUCHE
	ADDQ.W	#1*4,D0
.PAS_GAUCHE	CMPI.B	#-1,(A0)+
	BNE.S	.PAS_HAUT
	ADDQ.W	#2*4,D0
.PAS_HAUT	CMPI.B	#-1,(A0)+
	BNE.S	.PAS_DROITE
	ADDI.W	#4*4,D0
.PAS_DROITE	RTS

	;CODES D'ACTIVATION DES 3 FLECHES,
	;SUIVI DES CODES DE DESACTIVATION DE CES MEME FLECHES.
TST_CLAV	DC.B	$4B,$48,$4D
	DC.B	$4B+$80,$48+$80,$4D+$80

	;FLAG GAUCHE, FLAG HAUT, FLAG_DROIT
	;-1=ACTIF, 0=INACTIF
BUF_CLAV	DS.B	3
FIRE	DS.B	1

	;No DES ANIMS POUR LA MARCHE VERS LA DROITE (ET GAUCHE)
	;LE NOMBRE APRES LE -1 (FIN DE L'ANIM) EST L'OFFSET
	;POUR LE LOOPING, LE NB D'APRES EST L'INCREMENT POUR LE
	;X APRES LE LOOPING
ANIM_DROITE	DC.W	0,1,2,3,4,5,6,7,8,9,10,-1,2,34
ANIM_GAUCHE	DC.W	12,13,14,15,16,17,18,19,20,21,22,-1,2,-34

ANIM_GAUCHE_FLY	DC.W	23,-1,0,0
ANIM_DROITE_FLY	DC.W	11,-1,0,0

SENS_MARCHE	DC.L	ANIM_GAUCHE,ANIM_DROITE
SENS_VOL	DC.L	ANIM_GAUCHE_FLY,ANIM_DROITE_FLY

PT_ANIM_PERSO	DC.L	0
	;(NB DE MOTS-1)*4, HAUTEUR-1, OFFSET ECRAN
SOV_EFF	DS.W	6
ADR_EFF	DS.L	2

ADR_EFF_TIRS	DS.L	2
BUF_EFF_TIRS	DS.W	(1+3*50)*2

EFFAC_PLAYER	MOVE.L	ADR_EFF,A0
	MOVE.W	(A0),D0	;(NB DE MOTS-1)*4
	MOVE.W	2(A0),D1	;HAUTEUR-1
	LEA	TAB_ROUTS_EFF(PC),A1
	MOVE.L	(A1,D0.W),A1
	MOVEQ	#0,D0
	MOVE.L	SCREEN2,A2
	ADDA.W	4(A0),A2	;+OFFSET ECRAN
	JMP	(A1)
TAB_ROUTS_EFF	DC.L	EFF_1,EFF_2,EFF_3,EFF_4,EFF_5,EFF_6,EFF_7

EFF_1	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	LEA	160-8(A2),A2
	DBRA	D1,EFF_1
	RTS

EFF_2	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	LEA	160-16(A2),A2
	DBRA	D1,EFF_2
	RTS

EFF_3	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	LEA	160-24(A2),A2
	DBRA	D1,EFF_3
	RTS

EFF_4	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	LEA	160-32(A2),A2
	DBRA	D1,EFF_4
	RTS

EFF_5	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	LEA	160-40(A2),A2
	DBRA	D1,EFF_5
	RTS

EFF_6	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	LEA	160-48(A2),A2
	DBRA	D1,EFF_6
	RTS

EFF_7	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	MOVE.L	D0,(A2)+
	LEA	160-56(A2),A2
	DBRA	D1,EFF_7
	RTS

EFFAC_TIRS	MOVE.L	ADR_EFF_TIRS,A0
.CONT_EFF	CMPI.W	#$1234,(A0)
	BNE.S	.EFF
	RTS
.EFF	MOVE.W	(A0)+,D4	;OFFSET
	MOVE.W	(A0)+,D0	;(NB DE MOTS-1)*4
	MOVE.W	(A0)+,D1	;HAUTEUR-1
	LEA	TAB_ROUTS_EFF_TIRS(PC),A1
	MOVE.L	(A1,D0.W),A1
	MOVEQ	#0,D0
	MOVE.L	SCREEN2,A2
	ADDA.W	D4,A2	;+OFFSET ECRAN
	JSR	(A1)
	BRA.S	.CONT_EFF
TAB_ROUTS_EFF_TIRS
	DC.L	EFF_1P_1,EFF_1P_2,EFF_1P_3,EFF_1P_4,EFF_1P_5,EFF_1P_6,EFF_1P_7

EFF_1P_1	MOVE.W	D0,(A2)
	LEA	160(A2),A2
	DBRA	D1,EFF_1P_1
	RTS

EFF_1P_2	MOVE.W	D0,(A2)
	MOVE.W	D0,8(A2)
	LEA	160(A2),A2
	DBRA	D1,EFF_1P_2
	RTS

EFF_1P_3	MOVE.W	D0,(A2)
	MOVE.W	D0,8(A2)
	MOVE.W	D0,16(A2)
	LEA	160(A2),A2
	DBRA	D1,EFF_1P_3
	RTS

EFF_1P_4	MOVE.W	D0,(A2)
	MOVE.W	D0,8(A2)
	MOVE.W	D0,16(A2)
	MOVE.W	D0,24(A2)
	LEA	160(A2),A2
	DBRA	D1,EFF_1P_4
	RTS

EFF_1P_5	MOVE.W	D0,(A2)
	MOVE.W	D0,8(A2)
	MOVE.W	D0,16(A2)
	MOVE.W	D0,24(A2)
	MOVE.W	D0,32(A2)
	LEA	160(A2),A2
	DBRA	D1,EFF_1P_5
	RTS

EFF_1P_6	MOVE.W	D0,(A2)
	MOVE.W	D0,8(A2)
	MOVE.W	D0,16(A2)
	MOVE.W	D0,24(A2)
	MOVE.W	D0,32(A2)
	MOVE.W	D0,40(A2)
	LEA	160(A2),A2
	DBRA	D1,EFF_1P_6
	RTS

EFF_1P_7	MOVE.W	D0,(A2)
	MOVE.W	D0,8(A2)
	MOVE.W	D0,16(A2)
	MOVE.W	D0,24(A2)
	MOVE.W	D0,32(A2)
	MOVE.W	D0,40(A2)
	MOVE.W	D0,48(A2)
	LEA	160(A2),A2
	DBRA	D1,EFF_1P_7
	RTS

	;D0=No DE L'ANIM
	;D1=X DE BASE
	;D2=Y DE BASE
AFF_PLAYER	MOVEQ	#0,D7	;INCREMENT DROIT
	MOVEQ	#0,D4	;INCREMENT GAUCHE
	LEA	TABLE_ADR_PLAYER,A0
	MULU.W	#102,D0
	ADDA.W	D0,A0
	;A0=ADRESSE DE L'INFO DE L'ANIM
	MOVE.W	(A0)+,D0	;HAUTEUR-1
	ADD.W	(A0)+,D1	;X+OFFSET X
	ADD.W	(A0)+,D2	;Y+OFFSET Y
	MULU.W	#160,D2
	MOVE.W	D1,D3
	TST.W	D3
	BGE.S	.X_POSITIF
	NEG.W	D3
	SUBQ.W	#1,D3
	LSR.W	#4,D3    ;NB DE MOTS-1 QUI SORTENT A GAUCHE
	ADDQ.W	#1,D3
	LSL.W	#3,D3
	MOVE.W	D3,D4	;INCREMENT GAUCHE
	MOVEQ	#0,D3
.X_POSITIF	ANDI.W	#$FFF0,D3
	ASR.W	#1,D3
	ADD.W	D3,D2
	MOVE.L	SCREEN2,A2
	ADDA.W	D2,A2
	ANDI.W	#15,D1
	MULU.W	#6,D1
	ADDA.W	D1,A0
	MOVE.W	(A0)+,D1	;NB DE MOTS-1
	MOVE.W	D4,D6
	LSR.W	#3,D6
	SUB.W	D6,D1         ;NOUVEAU NB DE MOTS(EVENTUEL)
	MOVE.W	D1,D6
	ADDQ.W	#1,D6
	LSL.W	#3,D6
	MOVE.W	#160,D5
	SUB.W	D3,D5
	CMP.W	D5,D6
	BLE.S	.NO_CLIP_DROIT
	SUB.W	D5,D6
	MOVE.W	D6,D7	;INCREMENT DROIT
	LSR.W	#3,D5
	SUBQ.W	#1,D5
	MOVE.W	D5,D1	;NOUVEAU NB DE MOTS
.NO_CLIP_DROIT	MOVE.L	(A0),A1	;A1=ADRESSE DE L'ANIM
	ADD.W	D1,D1
	ADD.W	D1,D1
	MOVE.L	ADR_EFF,A3
	MOVE.W	D1,(A3)	;(NB DE MOTS-1)*4
	MOVE.W	D0,2(A3)	;HAUTEUR-1
	MOVE.W	D2,4(A3)	;OFFSET ECRAN
	LEA	ADR_ROUTS(PC),A3
	MOVE.L	(A3,D1.W),A3	;A3=ADR DE LA RT
	JMP	(A3)
ADR_ROUTS	DC.L	AFF_1,AFF_2,AFF_3,AFF_4,AFF_5,AFF_6,AFF_7

AFF_1	ADDA.W	D4,A1
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	ADDA.W	D7,A1
	LEA	160-8(A2),A2
	DBRA	D0,AFF_1
	RTS
AFF_2	ADDA.W	D4,A1
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	ADDA.W	D7,A1
	LEA	160-16(A2),A2
	DBRA	D0,AFF_2
	RTS
AFF_3	ADDA.W	D4,A1
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	ADDA.W	D7,A1
	LEA	160-24(A2),A2
	DBRA	D0,AFF_3
	RTS
AFF_4	ADDA.W	D4,A1
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	ADDA.W	D7,A1
	LEA	160-32(A2),A2
	DBRA	D0,AFF_4
	RTS
AFF_5	ADDA.W	D4,A1
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	ADDA.W	D7,A1
	LEA	160-40(A2),A2
	DBRA	D0,AFF_5
	RTS
AFF_6	ADDA.W	D4,A1
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	ADDA.W	D7,A1
	LEA	160-48(A2),A2
	DBRA	D0,AFF_6
	RTS
AFF_7	ADDA.W	D4,A1
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	ADDA.W	D7,A1
	LEA	160-56(A2),A2
	DBRA	D0,AFF_7
	RTS

GEST_FIRE	TST.B	FIRE
	BEQ.S	.PAS_APPUI
.APPUI_DETECTED	MOVE.W	NO_ARME,D0
	ADD.W	D0,D0
	ADD.W	D0,D0
	LEA	ROUT_ARME(PC),A0
	MOVE.L	(A0,D0.W),A0
	JSR	(A0)
.PAS_APPUI	MOVE.W	NO_ARME,D0
	ADD.W	D0,D0
	ADD.W	D0,D0
	LEA	ROUT_AFF_ARME(PC),A0
	MOVE.L	(A0,D0.W),A0
	JSR	(A0)

	MOVE.W	NO_ARME,D0
	ADD.W	D0,D0
	ADD.W	D0,D0
	LEA	ROUT_ACTU(PC),A0
	MOVE.L	(A0,D0.W),A0
	JSR	(A0)
	RTS

ROUT_ARME	DC.L	RIEN_DU_TOUT,GEST_PHASER,GEST_BRUTOS
ROUT_ACTU	DC.L	RIEN_DU_TOUT,ACTUALIZE_PHASER,ACTUALIZE_BRUTOS
ROUT_AFF_ARME	DC.L	RIEN_DU_TOUT,AFF_PHASER,AFF_PHASER

RIEN_DU_TOUT	RTS

GEST_PHASER	LEA	BUF_TIRS,A0

	CMPI.W	#$1234,(A0)
	BNE.S	.PAS_PLUS
	TST.W	TEMPO_NEXT_FIRE
	BGT.S	.PAS_PLUS
	LEA	COOR_PLAYER,A2
	MOVE.W	(A2)+,D1	;X DU PLAYER
	MOVE.W	(A2)+,D2	;Y DES PIEDS DU PLAYER
	MOVE.L	(A2)+,A1	;A1=ADRESSE DE LA SEQUENCE
	ADDA.W	2(A2),A1	;+POINTEUR
	MOVE.W	(A1)+,D0	;D0=No DE L'ANIM
	MOVE.W	D0,D3
	MULU.W	#102,D3
	LEA	TABLE_ADR_PLAYER,A2
	SUB.W	(A2,D3.W),D2	;Y DU HAUT DU PLAYER

	MOVE.L	ADR_COOR_TIR,A1
	ADDQ.W	#2,A1
;	LEA	COOR_TIR_PLAYER+2,A1
	MOVE.W	D0,D3
	ADD.W	D0,D0
	ADD.W	D0,D0
	ADDA.W	D0,A1
	ADD.W	(A1)+,D1	;X DU POINT
	ADD.W	(A1)+,D2	;Y DU POINT
	TST.W	COOR_PLAYER+8
	BNE.S	.DROITE
.GAUCHE	MOVE.L	ADR_TIR_PLAYER,A1
	ADDQ.W	#2,A1
;	LEA	TIR_PLAYER+2,A1
	MOVEQ	#0,D0
	LSL.W	#3,D0
	ADDA.W	D0,A1
	SUB.W	(A1),D1
.DROITE	LEA	TABLE_ADR_PLAYER,A1
	MULU.W	#102,D3
	ADDA.W	D3,A1
	;A0=ADRESSE DE L'INFO DE L'ANIM
	ADDQ.W	#2,A1
	ADD.W	(A1)+,D1	;X+OFFSET X
	ADD.W	(A1)+,D2	;Y+OFFSET Y
	;D1=X, D2=Y (DU TIR)
	MOVE.W	D1,(A0)
	MOVE.W	D2,2(A0)
	MOVE.W	COOR_PLAYER+8,4(A0)  ;SENS
	MOVE.W	#15,TEMPO_NEXT_FIRE

.PAS_PLUS	RTS

GEST_BRUTOS	LEA	BUF_TIRS,A0

	TST.W	TEMPO_NEXT_FIRE
	BGT	.PAS_PLUS
	LEA	COOR_PLAYER,A2
	MOVE.W	(A2)+,D1	;X DU PLAYER
	MOVE.W	(A2)+,D2	;Y DES PIEDS DU PLAYER
	MOVE.L	(A2)+,A1	;A1=ADRESSE DE LA SEQUENCE
	ADDA.W	2(A2),A1	;+POINTEUR
	MOVE.W	(A1)+,D0	;D0=No DE L'ANIM
	MOVE.W	D0,D3
	MULU.W	#102,D3
	LEA	TABLE_ADR_PLAYER,A2
	SUB.W	(A2,D3.W),D2	;Y DU HAUT DU PLAYER

	MOVE.L	ADR_COOR_TIR,A1
	ADDQ.W	#2,A1
;	LEA	COOR_TIR_PLAYER+2,A1
	MOVE.W	D0,D3
	ADD.W	D0,D0
	ADD.W	D0,D0
	ADDA.W	D0,A1
	ADD.W	(A1)+,D1	;X DU POINT
	ADD.W	(A1)+,D2	;Y DU POINT
	TST.W	COOR_PLAYER+8
	BNE.S	.DROITE
.GAUCHE	MOVE.L	ADR_TIR_PLAYER,A1
	ADDQ.W	#2,A1
;	LEA	TIR_PLAYER+2,A1
	MOVEQ	#0,D0
	LSL.W	#3,D0
	ADDA.W	D0,A1
	SUB.W	(A1),D1
.DROITE	LEA	TABLE_ADR_PLAYER,A1
	MULU.W	#102,D3
	ADDA.W	D3,A1
	;A0=ADRESSE DE L'INFO DE L'ANIM
	ADDQ.W	#2,A1
	ADD.W	(A1)+,D1	;X+OFFSET X
	ADD.W	(A1)+,D2	;Y+OFFSET Y
	;D1=X, D2=Y (DU TIR)
.NEXT	CMPI.W	#$1234,(A0)
	BEQ.S	.OK_PUT
	ADDQ.W	#6,A0
	BRA.S	.NEXT
.OK_PUT	MOVE.W	D1,(A0)
	MOVE.W	D2,2(A0)
	MOVE.W	COOR_PLAYER+8,4(A0)  ;SENS
	MOVE.W	#$1234,6(A0)
	MOVE.W	#15,TEMPO_NEXT_FIRE

.PAS_PLUS	RTS

ACTUALIZE_PHASER
	SUBQ.W	#1,TEMPO_NEXT_FIRE
	BGE.S	.OK
	CLR.W	TEMPO_NEXT_FIRE
.OK	LEA	BUF_TIRS,A0
	CMPI.W	#$1234,(A0)
	BNE.S	.VAS_Y
	RTS
.VAS_Y	TST.W	4(A0)
	BEQ.S	.GAUCHE
.DROITE	ADDI.W	#VITESSE_TIR_PHASER,(A0)
	CMPI.W	#320,(A0)
	BLT.S	.FIN_GEST
	MOVE.W	#$1234,(A0)	;SORTIE A DROITE
	BRA.S	.FIN_GEST
.GAUCHE	SUBI.W	#VITESSE_TIR_PHASER,(A0)
	MOVE.W	(A0),D0	;X DU TIR
	MOVE.L	ADR_TIR_PLAYER,A1
	ADDQ.W	#2,A1
;	LEA	TIR_PLAYER+2,A1
	ADD.W	(A1),D0	;X+LONG
	BGE.S	.FIN_GEST
	MOVE.W	#$1234,(A0)	;SORTIE A GAUCHE
.FIN_GEST	RTS

ACTUALIZE_BRUTOS
	SUBQ.W	#1,TEMPO_NEXT_FIRE
	BGE.S	.OK
	CLR.W	TEMPO_NEXT_FIRE
.OK	LEA	BUF_TIRS,A0
	MOVE.L	A0,A1
.LOOP	CMPI.W	#$1234,(A0)
	BNE.S	.VAS_Y
	MOVE.W	#$1234,(A1)
	RTS
.VAS_Y	TST.W	4(A0)
	BEQ.S	.GAUCHE
.DROITE	MOVE.W	(A0),D0
	ADDI.W	#VITESSE_TIR_PHASER,D0
	CMPI.W	#320,D0
	BGE.S	.NEXT_ONE	;SORTIE A DROITE
	MOVE.W	D0,(A1)+
	MOVE.W	2(A0),(A1)+
	MOVE.W	4(A0),(A1)+
	BRA.S	.NEXT_ONE
.GAUCHE	MOVE.W	(A0),D0	;X DU TIR
	SUBI.W	#VITESSE_TIR_PHASER,D0
	MOVE.L	ADR_TIR_PLAYER,A2
	ADDQ.W	#2,A2
	ADD.W	(A2),D0	;X+LONG
	BLT.S	.NEXT_ONE	;SORTIE A GAUCHE
	MOVE.W	D0,(A1)+
	MOVE.W	2(A0),(A1)+
	MOVE.W	4(A0),(A1)+
.NEXT_ONE	ADDQ.W	#6,A0
	BRA.S	.LOOP

AFF_PHASER	MOVE.L	ADR_EFF_TIRS,A4
	LEA	BUF_TIRS,A0
.LOOP	CMPI.W	#$1234,(A0)
	BNE.S	.AFF_SOMETHING
	MOVE.W	#$1234,(A4)
	RTS
.AFF_SOMETHING	MOVE.W	(A0)+,D0	;X
	MOVE.W	(A0)+,D1	;Y
	MOVE.W	(A0)+,D2	;SENS (GAUCHE=0, DROITE=1)
	LEA	ADR_DECA_TIR,A1
	CMPI.W	#1,D2
	BEQ.S	.SENS_OK
	LEA	6+4*16(A1),A1
.SENS_OK	MOVE.W	(A1)+,D5	;LONGUEUR RêELLE
	MOVE.W	(A1)+,D7	;LONGUEUR EN MOTS-1
	MOVE.W	(A1)+,D6	;HAUTEUR EN MOTS-1
	CMPI.W	#320,D0
	BGE.S	.DISPARAIT_A_DROITE
	ADD.W	D0,D5
	BLT.S	.DISPARAIT_A_GAUCHE
	MOVEQ	#0,D3	;INCREMENT GAUCHE
	MOVEQ	#0,D4	;INCREMENT DROIT
	MULU.W	#160,D1
	MOVE.W	D0,D2
	TST.W	D2
	BGE.S	.X_POSITIF
	NEG.W	D2
	SUBQ.W	#1,D2
	LSR.W	#4,D2    ;NB DE MOTS-1 QUI SORTENT A GAUCHE
	ADDQ.W	#1,D2
	ADD.W	D2,D2
	MOVE.W	D2,D3	;INCREMENT GAUCHE
	MOVEQ	#0,D2
.X_POSITIF	ANDI.W	#$FFF0,D2
	ASR.W	#1,D2
	ADD.W	D2,D1
	MOVE.L	SCREEN2,A2
	ADDA.W	D1,A2
	MOVE.W	D1,(A4)+
	ANDI.W	#15,D0
	ADD.W	D0,D0
	ADD.W	D0,D0
	MOVE.L	(A1,D0.W),A1	;ADRESSE DU SPRITE
	SUBI.W	#160,D2
	NEG.W	D2
	LSR.W	#3,D2
	SUBQ.W	#1,D2	;NB DE MOTS-1 QUI RESTENT EN FIN DE LIGNE
	CMP.W	D2,D7
	BLE.S	.NO_CLIP_DROIT
	MOVE.W	D7,D4
	SUB.W	D2,D4
	ADD.W	D4,D4	;NOUVEL INCREMENT DROIT
	MOVE.W	D2,D7
.NO_CLIP_DROIT	MOVE.W	D3,D5
	LSR.W	#1,D5
	SUB.W	D5,D7       ;NOUVEAU NB DE MOTS-1(EVENTUEL)
	ADD.W	D7,D7
	ADD.W	D7,D7
	MOVE.W	D7,(A4)+	;(NB MOTS-1)*4
	MOVE.W	D6,(A4)+	;HAUTEUR-1
	LEA	ROUTS_AFF_1_P(PC),A3
	MOVE.L	(A3,D7.W),A3
	JSR	(A3)
.DISPARAIT_A_GAUCHE
.DISPARAIT_A_DROITE
	BRA	.LOOP

ROUTS_AFF_1_P	DC.L	AFF_1P_1,AFF_1P_2,AFF_1P_3,AFF_1P_4,AFF_1P_5,AFF_1P_6,AFF_1P_7
	DC.L	AFF_1P_8,AFF_1P_9,AFF_1P_10,AFF_1P_11,AFF_1P_12,AFF_1P_13,AFF_1P_14

AFF_1P_1	ADDA.W	D3,A1
	MOVE.W	(A1)+,(A2)
	ADDA.W	D4,A1
	LEA	160(A2),A2
	DBRA	D6,AFF_1P_1
	RTS

AFF_1P_2	ADDA.W	D3,A1
	MOVE.W	(A1)+,(A2)
	MOVE.W	(A1)+,8(A2)
	ADDA.W	D4,A1
	LEA	160(A2),A2
	DBRA	D6,AFF_1P_2
	RTS

AFF_1P_3	ADDA.W	D3,A1
	MOVE.W	(A1)+,(A2)
	MOVE.W	(A1)+,8(A2)
	MOVE.W	(A1)+,16(A2)
	ADDA.W	D4,A1
	LEA	160(A2),A2
	DBRA	D6,AFF_1P_3
	RTS

AFF_1P_4	ADDA.W	D3,A1
	MOVE.W	(A1)+,(A2)
	MOVE.W	(A1)+,8(A2)
	MOVE.W	(A1)+,16(A2)
	MOVE.W	(A1)+,24(A2)
	ADDA.W	D4,A1
	LEA	160(A2),A2
	DBRA	D6,AFF_1P_4
	RTS

AFF_1P_5	ADDA.W	D3,A1
	MOVE.W	(A1)+,(A2)
	MOVE.W	(A1)+,8(A2)
	MOVE.W	(A1)+,16(A2)
	MOVE.W	(A1)+,24(A2)
	MOVE.W	(A1)+,32(A2)
	ADDA.W	D4,A1
	LEA	160(A2),A2
	DBRA	D6,AFF_1P_5
	RTS

AFF_1P_6	ADDA.W	D3,A1
	MOVE.W	(A1)+,(A2)
	MOVE.W	(A1)+,8(A2)
	MOVE.W	(A1)+,16(A2)
	MOVE.W	(A1)+,24(A2)
	MOVE.W	(A1)+,32(A2)
	MOVE.W	(A1)+,40(A2)
	ADDA.W	D4,A1
	LEA	160(A2),A2
	DBRA	D6,AFF_1P_6
	RTS

AFF_1P_7	ADDA.W	D3,A1
	MOVE.W	(A1)+,(A2)
	MOVE.W	(A1)+,8(A2)
	MOVE.W	(A1)+,16(A2)
	MOVE.W	(A1)+,24(A2)
	MOVE.W	(A1)+,32(A2)
	MOVE.W	(A1)+,40(A2)
	MOVE.W	(A1)+,48(A2)
	ADDA.W	D4,A1
	LEA	160(A2),A2
	DBRA	D6,AFF_1P_7
	RTS

AFF_1P_8	ADDA.W	D3,A1
	MOVE.W	(A1)+,(A2)
	MOVE.W	(A1)+,8(A2)
	MOVE.W	(A1)+,16(A2)
	MOVE.W	(A1)+,24(A2)
	MOVE.W	(A1)+,32(A2)
	MOVE.W	(A1)+,40(A2)
	MOVE.W	(A1)+,48(A2)
	MOVE.W	(A1)+,56(A2)
	ADDA.W	D4,A1
	LEA	160(A2),A2
	DBRA	D6,AFF_1P_8
	RTS

AFF_1P_9	ADDA.W	D3,A1
	MOVE.W	(A1)+,(A2)
	MOVE.W	(A1)+,8(A2)
	MOVE.W	(A1)+,16(A2)
	MOVE.W	(A1)+,24(A2)
	MOVE.W	(A1)+,32(A2)
	MOVE.W	(A1)+,40(A2)
	MOVE.W	(A1)+,48(A2)
	MOVE.W	(A1)+,56(A2)
	MOVE.W	(A1)+,64(A2)
	ADDA.W	D4,A1
	LEA	160(A2),A2
	DBRA	D6,AFF_1P_9
	RTS

AFF_1P_10	ADDA.W	D3,A1
	MOVE.W	(A1)+,(A2)
	MOVE.W	(A1)+,8(A2)
	MOVE.W	(A1)+,16(A2)
	MOVE.W	(A1)+,24(A2)
	MOVE.W	(A1)+,32(A2)
	MOVE.W	(A1)+,40(A2)
	MOVE.W	(A1)+,48(A2)
	MOVE.W	(A1)+,56(A2)
	MOVE.W	(A1)+,64(A2)
	MOVE.W	(A1)+,72(A2)
	ADDA.W	D4,A1
	LEA	160(A2),A2
	DBRA	D6,AFF_1P_10
	RTS

AFF_1P_11	ADDA.W	D3,A1
	MOVE.W	(A1)+,(A2)
	MOVE.W	(A1)+,8(A2)
	MOVE.W	(A1)+,16(A2)
	MOVE.W	(A1)+,24(A2)
	MOVE.W	(A1)+,32(A2)
	MOVE.W	(A1)+,40(A2)
	MOVE.W	(A1)+,48(A2)
	MOVE.W	(A1)+,56(A2)
	MOVE.W	(A1)+,64(A2)
	MOVE.W	(A1)+,72(A2)
	MOVE.W	(A1)+,80(A2)
	ADDA.W	D4,A1
	LEA	160(A2),A2
	DBRA	D6,AFF_1P_11
	RTS

AFF_1P_12	ADDA.W	D3,A1
	MOVE.W	(A1)+,(A2)
	MOVE.W	(A1)+,8(A2)
	MOVE.W	(A1)+,16(A2)
	MOVE.W	(A1)+,24(A2)
	MOVE.W	(A1)+,32(A2)
	MOVE.W	(A1)+,40(A2)
	MOVE.W	(A1)+,48(A2)
	MOVE.W	(A1)+,56(A2)
	MOVE.W	(A1)+,64(A2)
	MOVE.W	(A1)+,72(A2)
	MOVE.W	(A1)+,80(A2)
	MOVE.W	(A1)+,88(A2)
	ADDA.W	D4,A1
	LEA	160(A2),A2
	DBRA	D6,AFF_1P_12
	RTS

AFF_1P_13	ADDA.W	D3,A1
	MOVE.W	(A1)+,(A2)
	MOVE.W	(A1)+,8(A2)
	MOVE.W	(A1)+,16(A2)
	MOVE.W	(A1)+,24(A2)
	MOVE.W	(A1)+,32(A2)
	MOVE.W	(A1)+,40(A2)
	MOVE.W	(A1)+,48(A2)
	MOVE.W	(A1)+,56(A2)
	MOVE.W	(A1)+,64(A2)
	MOVE.W	(A1)+,72(A2)
	MOVE.W	(A1)+,80(A2)
	MOVE.W	(A1)+,88(A2)
	MOVE.W	(A1)+,96(A2)
	ADDA.W	D4,A1
	LEA	160(A2),A2
	DBRA	D6,AFF_1P_13
	RTS

AFF_1P_14	ADDA.W	D3,A1
	MOVE.W	(A1)+,(A2)
	MOVE.W	(A1)+,8(A2)
	MOVE.W	(A1)+,16(A2)
	MOVE.W	(A1)+,24(A2)
	MOVE.W	(A1)+,32(A2)
	MOVE.W	(A1)+,40(A2)
	MOVE.W	(A1)+,48(A2)
	MOVE.W	(A1)+,56(A2)
	MOVE.W	(A1)+,64(A2)
	MOVE.W	(A1)+,72(A2)
	MOVE.W	(A1)+,80(A2)
	MOVE.W	(A1)+,88(A2)
	MOVE.W	(A1)+,96(A2)
	MOVE.W	(A1)+,104(A2)
	ADDA.W	D4,A1
	LEA	160(A2),A2
	DBRA	D6,AFF_1P_14
	RTS

PREPARE_MAP	LEA	SCREEN_MAP,A0
	BSR	EFFACE_ECRAN
	MOVE.W	PT_MAP,D0
	LEA	ADR_MAPS,A0
	ADD.W	D0,D0
	ADD.W	D0,D0
	MOVE.L	(A0,D0.W),A0	;A0=ADR DE LA MAP
	LEA	DIVERS+2,A1
	MOVE.W	(A1)+,D0	;LONGUEUR
	MOVE.W	(A1)+,D1	;HAUTEUR
	MOVE.L	(A1)+,A3	;A3=ADRESSE DU CARRê
	MOVE.W	(A0)+,D7      ;D7=NB DE CARRêS DE COLLISION
	SUBQ.W	#1,D7	;...POUR LE DBRA
.ALL_CARRêS	MOVE.W	(A0)+,D2	;X1
	MOVE.W	(A0)+,D3	;Y1
	MOVE.W	(A0)+,D4	;D4=NB DE CARRêS EN X
	SUBQ.W	#1,D4	;...POUR LE DBRA
	ADDQ.W	#2,A0	;ON SAUTE LA HAUTEUR
.AFF_X	LEA	SCREEN_MAP,A2
	MOVEQ	#0,D5
	MOVE.W	D2,D5
	ANDI.W	#$FFF0,D5
	LSR.W	#1,D5
	MOVE.W	D3,D6
	MULU.W	#160,D6
	ADD.L	D5,D6
	ADDA.W	D6,A2
	MOVE.W	D2,D5
	ANDI.W	#15,D5	;DECALAGE DU CARRê
	BSR	AFF_CARRê
	ADD.W	D0,D2
	DBRA	D4,.AFF_X
	DBRA	D7,.ALL_CARRêS

	;ON INITIALISE LES CARRêS DE COLLISIONS POUR LES TESTS
MK_CARRêS	MOVE.W	PT_MAP,D2
	LEA	ADR_MAPS,A0
	ADD.W	D2,D2
	ADD.W	D2,D2
	MOVE.L	(A0,D2.W),A0	;A0=ADR DE LA MAP
	MOVE.W	(A0)+,D7      ;D7=NB DE CARRêS DE COLLISION
	SUBQ.W	#1,D7	;...POUR LE DBRA
	LEA	COLLISION_DECORS,A2
	MOVE.W	D7,(A2)+
.ALL_CARRêS	MOVE.W	(A0)+,D2	;X1
	MOVE.W	(A0)+,D3	;Y1
	MOVE.W	(A0)+,D4	;LONG
	MOVE.W	(A0)+,D5	;HAUT
	MULU.W	D0,D4
	ADD.W	D2,D4
	MULU.W	D1,D5
	ADD.W	D3,D5
	MOVEM.W	D2-D5,(A2)
	ADDQ.W	#8,A2
	DBRA	D7,.ALL_CARRêS

	ADDQ.W	#3,COLLISION_DECORS ;+3 CARRêS VIRTUELS
	MOVE.W	#-15,(A2)+	;CARRê GAUCHE
	MOVE.W	#0,(A2)+
	MOVE.W	#5,(A2)+
	MOVE.W	#199,(A2)+

	MOVE.W	#0,(A2)+	;CARRê HAUT
	MOVE.W	#-15,(A2)+
	MOVE.W	#319,(A2)+
	MOVE.W	#-1,(A2)+

	MOVE.W	#315,(A2)+	;CARRê DROIT
	MOVE.W	#0,(A2)+
	MOVE.W	#335,(A2)+
	MOVE.W	#199,(A2)+

	LEA	COOR_PLAYER,A1
	MOVE.W	(A0)+,(A1)+	;X DU PLAYER
	MOVE.W	(A0)+,(A1)+	;Y DES PIEDS DU PLAYER
	MOVE.L	#ANIM_GAUCHE_FLY,(A1)+  ;ADRESSE POUR LA MARCHE
	MOVE.W	#0,(A1)+	;FLAG POUR SIGNIFIER GAUCHE
	CLR.W	(A1)+	;POINTEUR DANS L'ANIM
	MOVE.W	#1,(A1)+	;FLAG POUR LA MARCHE

	;ON PREPARE LE CODE GêNêRê DE LA MAP
	MOVE.L	#CODE_MAP,PT_COD
	MOVE.L	#STOCK_REGISTERS,PT_STOCK
	LEA	SCREEN_MAP,A3
	MOVE.L	A3,ADR_DEP
	CLR.W	NB_LIG
	CLR.W	OFFSET
	SF	FLAG_PUT
	SF	FLAG_CODE
	LEA	TABLO_MASK_MAP,A1
	MOVEQ	#0,D6
	MOVEQ	#20-1,D5
ALL_THE_SCREEN	MOVE.L	A3,A0
	MOVE.W	#200-1,D7
ALL_THE_COLUMN	MOVE.L	(A0),D0
	MOVE.L	4(A0),D1
	OR.L	D0,D1
	MOVE.L	D1,D0
	SWAP	D0
	OR.L	D1,D0	;D0=MASK(.L)
	NOT.L	D0
	TST.W	D0
	BEQ.S	.NEXT_LIGNE
	CMPI.W	#-1,D0
	BEQ.S	.NEXT_LIGNE
	LEA	TABLO_MASK_MAP,A2
.NEXT_ONE	CMPA.L	A2,A1
	BEQ.S	.NEW_MASK
	CMP.W	(A2),D0
	BEQ.S	.THIS_ONE
	ADDQ.W	#4,A2
	BRA.S	.NEXT_ONE
.THIS_ONE	ADDQ.W	#1,2(A2)
	BRA.S	.NEXT_LIGNE
.NEW_MASK	MOVE.W	D0,(A1)+	;NOUVELLE VALEUR
	MOVE.W	#1,(A1)+	;FREQUENCE
	ADDQ.W	#1,D6	;UN MASK DE PLUS
	CMPI.W	#8,D6
	BLT.S	.NEXT_LIGNE
	BSR	CODING_ALL
	ST	FLAG_CODE
	LEA	TABLO_MASK_MAP,A1
	MOVEQ	#0,D6	;0 MASK
	CLR.W	NB_LIG
	SF	FLAG_PUT
.NEXT_LIGNE	TST.B	FLAG_PUT
	BNE.S	.NO_MORE
	CMPI.W	#200,NB_LIG
	BEQ.S	.NO_MORE
	ADDQ.W	#1,NB_LIG
.NO_MORE	LEA	160(A0),A0
	DBRA	D7,ALL_THE_COLUMN
	ST	FLAG_PUT
	ADDQ.W	#8,A3
	DBRA	D5,ALL_THE_SCREEN
	TST.B	FLAG_CODE
	BNE.S	.EVER_CODED
	BSR	CODING_ALL
.EVER_CODED	MOVE.L	PT_COD,A0
	MOVE.W	#$4E75,(A0)	;POSE DU RTS
	RTS

FLAG_PUT	DS.B	1
FLAG_CODE	DS.B	1
PT_COD	DS.L	1
PT_STOCK	DS.L	1
ADR_DEP	DS.L	1
NB_LIG	DS.W	1
OFFSET	DS.W	1

CODING_ALL	MOVEM.L	D0-A6,-(SP)
	MOVE.L	PT_COD,A6
	MOVE.L	PT_STOCK,A5
	MOVE.L	#$4CF900FF,(A6)+
	MOVE.L	A5,(A6)+
	LEA	TABLO_MASK_MAP,A4
	MOVEQ	#8-1,D7
.COPY_REGS	MOVE.W	(A4),(A5)+
	MOVE.W	(A4),(A5)+
	ADDQ.W	#4,A4
	DBRA	D7,.COPY_REGS
	MOVE.L	A5,PT_STOCK
	MOVE.L	ADR_DEP,A1
	MOVE.W	OFFSET,D4	;OFFSET ECRAN
	MOVE.W	NB_LIG,D7
	SUBQ.W	#1,D7
NEXT_COLUMN
ALL_LIGNE	MOVE.L	(A1),D0
	MOVE.L	4(A1),D1
	OR.L	D1,D0
	MOVE.L	D0,D1
	SWAP	D1
	OR.L	D1,D0
	NOT.L	D0	;D0=MASK (.L)
	TST.W	D0
	BEQ.S	.POSE_MOVE
	CMPI.W	#-1,D0
	BEQ.S	.NEXT_LIGNE
	MOVEQ	#0,D1	;D1=No DU REGISTRE
	LEA	TABLO_MASK_MAP,A2
	MOVE.W	#$C1A8,D3	;CODE DU <AND.L D0,d16(A0)>
	MOVEQ	#8-1,D5
.TRY_NEXT	CMP.W	(A2),D0
	BEQ.S	.TROUVê
	ADDQ.W	#1,D1	;REGISTRE SUIVANT
	ADDQ.W	#4,A2
	ADDI.W	#$200,D3	;REGISTRE SUIVANT
	DBRA	D5,.TRY_NEXT
	;HEU... L∂ CA BUGGE ET C'EST CARRêMENT STRANGE...
	ILLEGAL
.TROUVê	MOVE.W	D3,(A6)+	;POSE DU AND.L Dn,d16(A0)
	MOVE.W	D4,(A6)+	;POSE DU d16
	MOVE.W	#$A8,(A6)+    ;POSE DU ORI.L #$(.L),d16(A0)
	MOVE.L	(A1),(A6)+	;POSE DU (.L)
	MOVE.W	D4,(A6)+	;POSE DU d16
	MOVE.W	D3,(A6)+	;POSE DU AND.L Dn,d16(A0)
	MOVE.W	D4,(A6)	;POSE DU d16
	ADDQ.W	#4,(A6)+
	MOVE.W	#$A8,(A6)+    ;POSE DU ORI.L #$(.L),d16(A0)
	MOVE.L	4(A1),(A6)+	;POSE DU (.L)
	MOVE.W	D4,(A6)	;POSE DU d16
	ADDQ.W	#4,(A6)+
	BRA.S	.NEXT_LIGNE
.POSE_MOVE	MOVE.W	#$217C,(A6)+ ;POSE DU MOVE.L #$(.L),d16(A0)
	MOVE.L	(A1),(A6)+	;POSE DU (.L)
	MOVE.W	D4,(A6)+	;OFFSET ECRAN
	MOVE.W	#$217C,(A6)+ ;POSE DU MOVE.L #$(.L),d16(A0)
	MOVE.L	4(A1),(A6)+	;POSE DU (.L)
	MOVE.W	D4,(A6)	;OFFSET ECRAN
	ADDQ.W	#4,(A6)+
.NEXT_LIGNE	ADDI.W	#160,D4
	LEA	160(A1),A1
	CMPA.L	A1,A0
	BEQ	.FINI
	DBRA	D7,ALL_LIGNE
	LEA	-200*160+8(A1),A1
	ADDI.W	#-200*160+8,D4
	MOVE.W	#200-1,D7
	BRA	NEXT_COLUMN
.FINI	MOVE.L	A6,PT_COD
	MOVE.W	D4,OFFSET
	MOVEM.L	(SP)+,D0-A6
	RTS

	;A3=ADRESSE SOURCE
	;A2=ADRESSE DESTINATION
	;D1=HAUTEUR
	;D5=DECALAGE
AFF_CARRê	MOVEM.L	D0-D7/A3,-(SP)
	SUBQ.W	#1,D1
.DEC_Y	MOVEQ	#4-1,D7
.DEC_X	MOVEQ	#0,D0
	MOVE.W	(A3)+,D0
	ROR.L	D5,D0
	OR.W	D0,(A2)
	SWAP	D0
	OR.W	D0,8(A2)
	ADDQ.W	#2,A2
	DBRA	D7,.DEC_X
	LEA	160-8(A2),A2
	DBRA	D1,.DEC_Y
	MOVEM.L	(SP)+,D0-D7/A3
	RTS

PREPARE_PLAYER	MOVE.L	ADR_BANK,A0
	MOVE.L	ADR_FIN_BANK,A1
	LEA	BUF_ANIM_PLAYER,A2
.COPY	MOVE.B	(A0)+,(A2)+
	CMPA.L	A0,A1
	BGT.S	.COPY
	LEA	BUF_ANIM_PLAYER,A0
	BSR	unpack
	ADDA.L	D0,A0
	MOVE.L	A0,A6    ;A6=ADRESSE DE FIN DES DECALAGES 0
	LEA	BUF_ANIM_PLAYER,A0
	MOVE.L	A0,D0
	MOVE.W	(A0)+,D7	;D7=NB D'ANIMS
	SUBQ.W	#1,D7
.PREP_ANIMS	ADDQ.W	#4,A0
	ADD.L	D0,(A0)
	LEA	10(A0),A0
	DBRA	D7,.PREP_ANIMS

	LEA	TABLE_ADR_PLAYER,A0
	LEA	BUF_ANIM_PLAYER+2,A1
	MOVEQ	#24-1,D6
NEXT_ONE	MOVE.W	(A1)+,D0	;LONGUEUR
	MOVE.W	(A1)+,D1
	SUBQ.W	#1,D1	;HAUTEUR-1
	MOVE.L	(A1)+,A2	;ADRESSE DE L'ANIM DEC. 0
	CMPA.L	#TABLE_ADR_PLAYER,A0
	BEQ.S	PREMIERE_FOIS
	LEA	TABLE_ADR_PLAYER,A3
NEXT_TRY	CMPA.L	8(A3),A2
	BEQ.S	RECOPY_INTEGRALE
	LEA	102(A3),A3
	CMPA.L	A3,A0
	BGT.S	NEXT_TRY
PREMIERE_FOIS	MOVE.W	D1,(A0)+
	MOVE.W	(A1)+,(A0)+	;OFFSET X
	MOVE.W	(A1)+,(A0)+	;OFFSET Y
	ADDQ.W	#2,A1	;ON SAUTE LE TEMPO
	SUBQ.W	#1,D0
	LSR.W	#4,D0	;NB DE MOTS-1
	MOVE.W	D0,(A0)+	;DECALAGE 0
	MOVE.L	A2,(A0)+
	MOVE.W	D0,D2
	ADDQ.W	#1,D2

	MOVEQ	#15-1,D7
.ALL_DECS	MOVE.W	D2,(A0)+	;DECALAGE >0
	MOVE.L	A6,(A0)+
	BSR	RECOPY
	MOVE.L	A6,A2
	MOVE.W	D2,D0
	BSR	DECAL
	DBRA	D7,.ALL_DECS
NEXT_ANIMS	DBRA	D6,NEXT_ONE
	RTS

RECOPY_INTEGRALE
	MOVE.W	(A3)+,(A0)+	;HAUTEUR
	ADDQ.W	#4,A3
	MOVE.W	(A1)+,(A0)+	;OFFSET_X
	MOVE.W	(A1)+,(A0)+	;OFFSET_Y
	MOVEQ	#16-1,D7
.ALL_DECS	MOVE.W	(A3)+,(A0)+	;NB DE MOTS
	MOVE.L	(A3)+,(A0)+	;ADRESSE
	DBRA	D7,.ALL_DECS
	ADDQ.W	#2,A1	;ON SAUTE OFF_X,OFF_Y,TEMPO
	BRA.S	NEXT_ANIMS

	;D0=LARGEUR
	;D1=HAUTEUR-1
	;A6=ADRESSE DU SPRITE A DECALER
DECAL	MOVEM.L	D0/D1,-(SP)
	MOVE.W	D0,D5
	ADDQ.W	#1,D5
	LSL.W	#3,D5
	SUBQ.W	#8,D5	;PSEUDO OFFSET FIN DE LIGNE
.DEC_ALL_SPR	MOVEQ	#4-1,D4
.DEC_ALL_P	MOVE.L	A6,A5
	MOVE.W	D0,D3
.DEC_P	ROXR	(A5)
	ADDQ.W	#8,A5
	DBRA	D3,.DEC_P
	ADDQ.W	#2,A6
	DBRA	D4,.DEC_ALL_P
	ADDA.W	D5,A6
	DBRA	D1,.DEC_ALL_SPR
	MOVEM.L	(SP)+,D0/D1
	RTS

	;D0=LARGEUR SOURCE EN PATêS DE 16 PIXELS
	;D1=HAUTEUR-1
	;D2=LARGEUR DESTINATION
	;A2=SOURCE
	;A6=DESTINATION
RECOPY	MOVEM.L	D0-D2/A2/A6,-(SP)
	SUB.W	D0,D2
	LSL.W	#3,D2
.AFF_Y	MOVE.W	D0,D3
.AFF_X	MOVE.L	(A2)+,(A6)+
	MOVE.L	(A2)+,(A6)+
	DBRA	D3,.AFF_X
	ADDA.W	D2,A6
	DBRA	D1,.AFF_Y
	MOVEM.L	(SP)+,D0-D2/A2/A6
	RTS

EFFAC_SCREEN	MOVE.L	SCREEN2,A0
	MOVEQ	#0,D6
	MOVE.W	#4000-1,D7
.EFF	MOVE.L	D6,(A0)+
	MOVE.L	D6,(A0)+
	DBRA	D7,.EFF
	RTS

	;A0=ADRESSE DE L'ECRAN A EFFACER
EFFACE_ECRAN	MOVEM.L	D0-A6,-(SP)
	LEA	32000(A0),A0	;FIN DU BUFFER ECRAN
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	MOVEQ	#0,D2
	MOVEQ	#0,D3
	MOVEQ	#0,D4
	MOVEQ	#0,D5
	MOVEQ	#0,D6
	MOVE.L	D0,A1
	MOVE.L	D0,A2
	MOVE.L	D0,A3
	MOVE.L	D0,A4
	MOVE.L	D0,A5
	MOVE.L	D0,A6
	MOVE.W	#205-1,D7
.EFF	MOVEM.L	D0-D6/A1-A6,-(A0)
	MOVEM.L	D0-D6/A1-A6,-(A0)
	MOVEM.L	D0-D6/A1-A6,-(A0)
	DBRA	D7,.EFF
	MOVEM.L	D0-D4,-(A0)
	MOVEM.L	(SP)+,D0-A6
	RTS

ECRIT_CLAVIER	BTST	#1,$FFFFFC00.W	;LECTURE DU SR DU CLAVIER
	BNE.S	ECRIT_CLAVIER
	MOVE.B	D0,$FFFFFC02.W
	RTS

	;A0=ADRESSE DE LA BANK DE SPRITES A INITIALISER
INIT_BNK_SPR	MOVE.L	A0,D0
	MOVE.W	(A0)+,D7	;D7=NB DE SPRITE
	SUBQ.W	#1,D7	;...POUR LE DBRA
.INIT	ADDQ.W	#4,A0	;ON SAUTE LONG-HAUT
	ADD.L	D0,(A0)+
	DBRA	D7,.INIT
	RTS

	;A0=ADRESSE DE LA BANK DE CARRêS DE COLLISION A INITIALISER
INIT_BNK_COL	MOVE.L	A0,D0
	MOVE.W	(A0)+,D7	;D7=NB DE SPRITE
	SUBQ.W	#1,D7	;...POUR LE DBRA
.INIT	ADDQ.W	#2,A0	;ON SAUTE LE NB DE CARRê
	ADD.L	D0,(A0)+
	DBRA	D7,.INIT
	RTS

SWAPEC	MOVE.L	SCREEN1,D5
	MOVE.L	SCREEN2,SCREEN1
	MOVE.L	D5,SCREEN2
	MOVE.B	SCREEN1+1,$FFFF8201.W
	MOVE.B	SCREEN1+2,$FFFF8203.W
	RTS

INIT_SYSTEME	CLR.B	$FFFF8260.W

	MOVE.L	#BUFFER+8000,D0
	CLR.B	D0
	MOVE.L	D0,SCREEN1
	ADDI.L	#32000+1280*4,D0
	MOVE.L	D0,SCREEN2
	MOVE.B	SCREEN1+1,$FFFF8201.W
	MOVE.B	SCREEN1+2,$FFFF8203.W

	MOVEM.L	PALETTE,D0-D7
	MOVEM.L	D0-D7,$FFFF8240.W
	RTS

	;D1=No DE L'ANIM
	;D2=Y DU HAUT DU PLAYER
	;A0=COOR_PLAYER
TEST_COLLI_PLAYER_DECOR
	LEA	TABLE_ADR_PLAYER,A2
	MOVE.W	D1,D3
	MULU.W	#102,D3
	ADDA.W	D3,A2
	MOVE.W	2(A2),D7	;D7=OFFSET_X

	MOVE.L	ADR_COL_BANK,A2
	ADDQ.W	#2,A2
;	LEA	COL_PLAYER+2,A2
	MULU.W	#6,D1
	ADDA.W	D1,A2      ;A2=ADRESSE DE L'INFO DES CARRêS DU PLAYER

	MOVE.W	(A2)+,D0	;D0=NB DE CARRêS POUR L'ANIM COURANTE DU PLAYER
	SUBQ.W	#1,D0	;...POUR LE DBRA
	MOVE.W	D0,A6
	MOVE.L	(A2),A4	;A4=ADRESSE DES CARRêS DU PLAYER
	LEA	BUF_CARRê_TEMP,A5
	MOVE.W	A6,D1
	MOVE.W	D2,D3
.ALL_CARRêS	MOVE.W	(A4)+,D2	;X1
	ADD.W	(A0),D2	;X1+X_PLAYER
	ADD.W	D7,D2	;X1+X_PLAYER+OFFSET_X
	MOVE.W	D2,(A5)+
	MOVE.W	(A4)+,D2	;Y1
	ADD.W	D3,D2	;Y1+Y_PLAYER
	MOVE.W	D2,(A5)+
	MOVE.W	(A4)+,D2	;X2
	ADD.W	(A0),D2	;X2+X_PLAYER
	ADD.W	D7,D2	;X2+X_PLAYER+OFFSET_X
	MOVE.W	D2,(A5)+
	MOVE.W	(A4)+,D2	;Y2
	ADD.W	D3,D2	;Y2+Y_PLAYER
	MOVE.W	D2,(A5)+
	DBRA	D1,.ALL_CARRêS

	LEA	BUF_CARRê_TEMP,A4
	LEA	COLLISION_DECORS,A3
	MOVE.W	(A3)+,D1	;D1=NB DE CARRêS POUR LE DêCOR
;	SUBQ.W	#1,D1	;...POUR LE DBRA
	MOVE.W	D1,A5
	MOVE.W	A6,D1
ALL_CARRêS_PLAYER
	MOVE.W	D1,SOV_TEMP
	MOVEM.W	(A4)+,D4-D7
	LEA	COLLISION_DECORS+2,A3
	MOVE.W	A5,D1
ALL_CARRêS_DêCORS	
	MOVE.W	D1,A1
	MOVEM.W	(A3)+,D0-D3
	CMP.W	D4,D2
	BLT.S	PAS_COMPRIS	;SI D2<D4 LE CARRê A TESTER EST A DROITE DU PREMIER ( DONC PAS COMPRIS )
	CMP.W	D6,D0
	BGT.S	PAS_COMPRIS	;SI D0>D6 LE CARRê A TESTER EST A GAUCHE DU PREMIER ( DONC PAS COMPRIS )
    ;ICI ON SAIT QUE LE CARRê A TESTER INTERCEPTE LE PREMIER EN X
	CMP.W	D7,D1
	BGT.S	PAS_COMPRIS	;SI D1>D7 LE CARRê A TESTER EST AU-DESSUS DU PREMIER ( DONC PAS COMPRIS )
	CMP.W	D5,D3
	BLT.S	PAS_COMPRIS	;SI D3<D5 LE CARRê A TESTER EST AU-DESSOUS DU PREMIER ( DONC PAS COMPRIS )
    ;ICI LE CARRê INTERCEPTE EN PLUS LE PREMIER EN Y
	MOVEQ	#0,D4
	BRA.S	FINITO
PAS_COMPRIS	MOVE.W	A1,D1
	DBRA	D1,ALL_CARRêS_DêCORS
SOV_TEMP = *+2
	MOVE.W	#$1234,D1
	DBRA	D1,ALL_CARRêS_PLAYER
	MOVEQ	#-1,D4
FINITO	
;SI AU RETOUR, ON TROUVE:
;D4=-1--> AUCUNE COLLISION
;D4=0 --> COLLISION DECOR-PLAYER, D0-D3=CARRê DU DECOR QU'A TOUCHê LE PLAYER 
	RTS

	;A4=POINTE SUR LE(S) CARRê(S) DU PLAYER
AFFICHE_CARRê	MOVEM.L	D0-A6,-(SP)
	MOVEM.W	(A4),D0-D3
	SUB.W	D1,D3	;D3=HAUTEUR-1
	MULU.W	#160,D1
	MOVE.W	D0,D4
	ANDI.W	#$FFF0,D4
	LSR.W	D4
	ADD.W	D4,D1	;D1=OFFSET ECRAN
;	SUB.W	D0,D2	;D2=LONGUEUR-1
	ANDI.W	#15,D0	;D0=DECALAGE
	MOVE.L	SCREEN2,A0
	ADDA.W	D1,A0	;A0=ADRESSE ECRAN
	MOVE.W	D2,D5
	ANDI.W	#15,D2
	ANDI.W	#$FFF0,D5
	LSR.W	#1,D5
	LEA	DEP,A2
	LEA	TABLE_1,A3
	LEA	TABLE_2,A4
	CMP.W	D4,D5
	BGT.S	.NORM
	ADD.W	D0,D0
	ADD.W	D2,D2
	MOVE.W	(A3,D0.W),D0
	MOVE.W	(A4,D2.W),D2
	EOR.W	D0,D2
	NOT.W	D2
	MOVE.W	D2,(A2)
	SUBQ.W	#2,A2
	MOVE.L	A2,ADR_REPT
	JMP	(A2)
.NORM	ADD.W	D0,D0
	ADD.W	D2,D2
.TJRS	MOVE.W	(A3,D0.W),D0
	MOVE.W	D0,(A2)
	SUBQ.W	#6,A2
	ADDQ.W	#8,D4
	MOVEQ	#0,D0
	CMP.W	D4,D5
	BGT.S	.TJRS
	MOVEQ	#-1,D0
	MOVE.W	(A4,D2.W),D2
	EOR.W	D0,D2
	NOT.W	D2
	MOVE.W	D2,(A2)
	SUBQ.W	#2,A2
	MOVE.L	A2,ADR_REPT
	JMP	(A2)
	MOVE.W	#$1234,56(A0)
	MOVE.W	#$1234,48(A0)
	MOVE.W	#$1234,40(A0)
	MOVE.W	#$1234,32(A0)
	MOVE.W	#$1234,24(A0)
	MOVE.W	#$1234,16(A0)
	MOVE.W	#$1234,8(A0)
DEP = *+2
	MOVE.W	#$1234,(A0)
	LEA	160(A0),A0
	SUBQ.W	#1,D3
	BLT.S	.FINI
ADR_REPT = *+2
	JMP	$12345678
.FINI	MOVEM.L	(SP)+,D0-A6
	RTS

TABLE_1	DC.W	$FFFF,$7FFF,$3FFF,$1FFF,$FFF,$7FF,$3FF,$1FF,$FF,$7F,$3F,$1F,$F,7,3,1

TABLE_2	DC.W	$8000,$C000,$E000,$F000,$F800,$FC00,$FE00,$FF00,$FF80,$FFC0,$FFE0,$FFF0,$FFF8,$FFFC,$FFFE,$FFFF

	INCLUDE	UNPACK3.S

	;CE POINTEUR CONTIENT LE No DE LA SALLE ACTUELLE
PT_MAP	DC.W	0

	;ADRESSES DES DECORS DE TOUTES LES SALLES
ADR_MAPS	DC.L	MAP_1

	;NB DE CARRêS DE DECORS	
	;X_DEP,Y_DEP,NB DE CARRê(S) EN X,NB DE CARRê(S) EN Y
	;ENSUITE FIGURENT LES COOR DU PLAYER AU DEPART(Y DES PIEDS)
MAP_1	
	DC.W	3	;MAP DE TEST
	DC.W	0,188,36,1
	DC.W	0,60,15,1
	DC.W	100,120,23,1
	DC.W	136,120

	DC.W	2	;MAP GENRE <JET-PAK>
	DC.W	0,188,35,1
	DC.W	100,90,15,1
	DC.W	100,90

PREPARE_ARME	MOVE.W	NO_ARME,D0
	ADD.W	D0,D0
	ADD.W	D0,D0
	LEA	ADR_RT_PREP_ARME(PC),A0
	MOVE.L	(A0,D0.W),A0
	JSR	(A0)
	RTS

ADR_RT_PREP_ARME
	DC.L	0
	DC.L	PREP_ARME_DEC
	DC.L	PREP_ARME_DEC
	DC.L	PREP_ARME_SORT

PREP_ARME_DEC	MOVE.L	ADR_TIR_PLAYER,A0
	LEA	BUF_DECA_TIR,A6
	LEA	ADR_DECA_TIR,A5
	MOVE.W	(A0)+,D7	;D7=NB DE SPRITES
	SUBQ.W	#1,D7
.ALL_SPRS	MOVE.L	A6,A4
	MOVE.W	(A0)+,D0	;LONGUEUR
	MOVE.W	(A0)+,D1	;HAUTEUR
	MOVE.L	(A0)+,A1	;ADRESSE DU SPR
	SUBQ.W	#1,D1	;-1.. (DBRA)
	MOVE.W	D1,D2
	MOVE.W	D0,(A5)+	;LONGUEUR RêELLE
	LSR.W	#4,D0	;NB DE MOTS-1
	MOVE.W	D0,(A5)
	ADDQ.W	#1,(A5)+	;...PRêVISION...
	MOVE.W	D1,(A5)+	;HAUTEUR-1
	MOVE.L	A6,(A5)+
.P_Y	MOVE.W	D0,D3
.P_X	MOVE.W	(A1),(A6)+
	ADDQ.W	#8,A1
	DBRA	D3,.P_X
	CLR.W	(A6)+
	DBRA	D2,.P_Y
	ADDQ.W	#1,D0	;UN MOT DE PLUS
	BSR	DECAL_1_PLAN
	DBRA	D7,.ALL_SPRS

	LEA	BUF_TIRS,A0
	MOVE.W	#$1234,(A0)
	RTS

	;D0=(NB DE PATêS DE 16 PIXELS)-1
	;D1=HAUTEUR-1
	;A4=ADRESSE DU SPRITE
	;A6=ADRESSE DESTINATION
DECAL_1_PLAN	MOVEQ	#15-1,D6
.ALL_DECS	MOVE.L	A6,(A5)+
	MOVE.W	D1,D5
.DEC_Y	MOVEQ	#0,D3
	MOVE.W	D0,D4
.DEC_X	MOVEQ	#0,D2
	MOVE.W	(A4)+,D2
	ROR.L	#1,D2
	OR.W	D3,D2
	MOVE.W	D2,(A6)+
	SWAP	D2
	MOVE.W	D2,D3
	DBRA	D4,.DEC_X
	DBRA	D5,.DEC_Y
	DBRA	D6,.ALL_DECS
	RTS

PREP_ARME_SORT	MOVE.L	ADR_TIR_PLAYER,A0
	BSR	INIT_BNK_SPR

	MOVE.L	ADR_TIR_PLAYER,A0
	ADDQ.W	#2,A0
	LEA	ADR_DECA_TIR,A6
	LEA	BUF_DECA_TIR,A2

	;TIRS VERS LA DROITE
	LEA	TABLE_VIRE_GAUCHE(PC),A3
	MOVE.W	(A0)+,D0
	MOVE.W	(A0)+,D1
	MOVE.L	(A0)+,A1
	MOVE.W	D1,HAUTEUR_TEMP
	MOVE.W	D0,D2
	SUBQ.W	#1,D2
	LSR.W	#4,D2
	ADDQ.W	#1,D2
	LSL.W	#3,D2
	MOVE.W	D2,LONGUEUR_TEMP
	MOVE.W	D0,D2
	DIVU.W	#NB_PASSES_TIR,D2 ;D2=PAS DE DECREMENTATION
	ADDQ.W	#1,D2
	MOVE.W	D2,PAS_SCROLL_TIR
	MOVE.W	D0,D3
	SUBQ.W	#1,D3
	SF	FLAG_SORT

NEXT_CUT	SUB.W	D2,D3	;D3=X1
	BGT.S	.POSITIF
	ST	FLAG_SORT
	MOVEQ	#0,D3
.POSITIF	MOVE.W	D3,-(SP)
	MOVE.W	D0,D4
	SUBQ.W	#1,D4	;D4=X2
	MOVE.W	D4,D6
	SUB.W	D3,D4
	ADDQ.W	#1,D4
	MOVE.W	D4,(A6)+	;VRAIE LONGUEUR
	MOVE.W	D6,D4
	MOVE.W	D3,D5
	ANDI.W	#15,D5
	ANDI.W	#$FFF0,D3
	LSR.W	#1,D3
	ANDI.W	#$FFF0,D4
	LSR.W	#1,D4
	SUB.W	D3,D4
	LSR.W	#3,D4
	MOVE.W	D4,(A6)+
	MOVE.W	HAUTEUR_TEMP(PC),(A6)+
	MOVE.L	A2,(A6)+
	MOVE.W	D4,NB_MOTS_TEMP
	MOVE.L	A1,A4
	ADDA.W	D3,A4
HAUTEUR_TEMP = *+2
	MOVE.W	#$1234,D3
	SUBQ.W	#1,D3
	ADD.W	D5,D5
	MOVE.W	(A3,D5.W),D7	;MASQUE DE GAUCHE
	LSR.W	#1,D5
.COPY_Y	MOVE.L	A4,A5
	MOVEQ	#0,D6
	MOVE.W	(A5),D6
	AND.W	D7,D6
	LSL.W	D5,D6
	MOVE.W	D6,(A2)
	ADDQ.W	#8,A5
NB_MOTS_TEMP = *+2
	MOVE.W	#$1234,D4
	SUBQ.W	#1,D4
.COPY_X	MOVEQ	#0,D6
	MOVE.W	(A5),D6
	ROL.L	D5,D6
	SWAP	D6
	OR.W	D6,(A2)+
	SWAP	D6
	MOVE.W	D6,(A2)
	ADDQ.W	#8,A5
	DBRA	D4,.COPY_X
	ADDQ.W	#2,A2
LONGUEUR_TEMP = *+2
	LEA	$1234(A4),A4
	DBRA	D3,.COPY_Y
	MOVE.W	(SP)+,D3	;RECUPäRE LE X1
	TST.B	FLAG_SORT
	BEQ	NEXT_CUT
FIN_CUT_1	;ON DECALE LA PREMIERE DêCOUPE !
	LEA	ADR_DECA_TIR,A5
	MOVE.W	#NB_PASSES_TIR*15-1,D7
.ALL_DEC	MOVE.W	(A5)+,D6	;LONGUEUR EN PIXELS
	MOVE.W	(A5)+,D0	;LONGUEUR EN MOTS-1
	MOVE.W	(A5)+,D1	;HAUTEUR
	MOVE.L	(A5)+,A4	;ADRESSE
	MOVE.W	D6,(A6)+	;LONGUEUR EN PIXELS
	MOVE.W	D0,(A6)
	ADDQ.W	#1,(A6)+
	MOVE.W	D1,(A6)+
	MOVE.L	A2,(A6)+
	SUBQ.W	#1,D1
.DEC_Y	MOVEQ	#0,D3
	MOVE.W	D0,D4
.DEC_X	MOVEQ	#0,D2
	MOVE.W	(A4)+,D2
	ROR.L	#1,D2
	OR.W	D3,D2
	MOVE.W	D2,(A2)+
	SWAP	D2
	MOVE.W	D2,D3
	DBRA	D4,.DEC_X
	OR.W	D3,(A2)+
	DBRA	D1,.DEC_Y
	DBRA	D7,.ALL_DEC

	;TIR VERS LA GAUCHE
SECOND_TIR	MOVE.W	(A0)+,D0	;LONGUEUR
	MOVE.W	(A0)+,D1	;HAUTEUR
	MOVE.L	(A0)+,A1	;ADRESSE DU SPRITE
	LEA	TABLE_VIRE_DROITE(PC),A3
	MOVE.W	PAS_SCROLL_TIR,D2
	MOVE.W	D0,D3
	SUBQ.W	#1,D3
	LSR.W	#4,D3
	ADDQ.W	#1,D3
	LSL.W	#3,D3
	MOVE.W	D3,LONGUEUR_TEMP_2

	MOVEQ	#0,D3
	MOVEQ	#NB_PASSES_TIR-1,D7
.ALL_CUTS	ADD.W	D2,D3	;X2
	MOVE.W	D3,-(SP)
	MOVE.W	D3,D4
	ANDI.W	#15,D4
	ADD.W	D4,D4
	MOVE.W	(A3,D4.W),D4	;MASK POUR LA DROITE
	LSR.W	#4,D3	;NB DE MOTS-1
	MOVE.W	D0,(A6)+	;LONGUEUR EN PIXELS
	MOVE.W	D3,(A6)+	;LONGUEUR EN MOTS-1
	MOVE.W	D1,(A6)+	;HAUTEUR
	MOVE.L	A2,(A6)+	;ADRESSE DU SPRITE
	MOVE.L	A1,A4
	MOVE.W	D1,D6
	SUBQ.W	#1,D6
.COPY_Y	MOVE.L	A4,A5
	MOVE.W	D3,D5
	SUBQ.W	#1,D5
	BLT.S	.Hê_HO
.COPY_X	MOVE.W	(A5),(A2)+
	ADDQ.W	#8,A5
	DBRA	D5,.COPY_X
.Hê_HO	MOVE.W	(A5),D5
	ADDQ.W	#8,A5
	AND.W	D4,D5
	MOVE.W	D5,(A2)+
LONGUEUR_TEMP_2 = *+2
	LEA	$1234(A4),A4
	DBRA	D6,.COPY_Y
	MOVE.W	(SP)+,D3
	DBRA	D7,.ALL_CUTS

	;ON DECALE LA DEUXIEME DêCOUPE !
	LEA	ADR_DECA_TIR+2*5*NB_PASSES_TIR*16,A5
	MOVE.W	#NB_PASSES_TIR*15-1,D7
.ALL_DEC	MOVE.W	(A5)+,D6	;LONGUEUR EN PIXELS
	MOVE.W	(A5)+,D0	;LONGUEUR EN MOTS-1
	MOVE.W	(A5)+,D1	;HAUTEUR
	MOVE.L	(A5)+,A4	;ADRESSE
	MOVE.W	D6,(A6)+	;LONGUEUR EN PIXELS
	MOVE.W	D0,(A6)
	ADDQ.W	#1,(A6)+
	MOVE.W	D1,(A6)+
	MOVE.L	A2,(A6)+
	SUBQ.W	#1,D1
.DEC_Y	MOVEQ	#0,D3
	MOVE.W	D0,D4
.DEC_X	MOVEQ	#0,D2
	MOVE.W	(A4)+,D2
	ROR.L	#1,D2
	OR.W	D3,D2
	MOVE.W	D2,(A2)+
	SWAP	D2
	MOVE.W	D2,D3
	DBRA	D4,.DEC_X
	OR.W	D3,(A2)+
	DBRA	D1,.DEC_Y
	DBRA	D7,.ALL_DEC

	RTS

FLAG_SORT	DS.B	1
	EVEN

TABLE_VIRE_GAUCHE
	DC.W	$FFFF,$7FFF,$3FFF,$1FFF,$FFF,$7FF,$3FF,$1FF,$FF,$7F,$3F,$1F,$F,7,3,1

TABLE_VIRE_DROITE
	DC.W	$8000,$C000,$E000,$F000,$F800,$FC00,$FE00,$FF00,$FF80,$FFC0,$FFE0,$FFF0,$FFF8,$FFFC,$FFFE,$FFFF


INIT_ADR_ACTU	MOVE.W	NO_ARME,D0
	MULU.W	#20,D0
	LEA	SERIES(PC),A0
	ADDA.W	D0,A0
	MOVE.L	(A0)+,ADR_BANK
	MOVE.L	(A0)+,ADR_FIN_BANK
	MOVE.L	(A0)+,ADR_COL_BANK
	MOVE.L	(A0)+,ADR_COOR_TIR
	MOVE.L	(A0)+,ADR_TIR_PLAYER
	RTS

PALETTE	INCBIN	KEOPS_3.PAL

TEMPO_TIR	DS.W	1

ADR_BANK	DS.L	1
ADR_FIN_BANK	DS.L	1
ADR_COL_BANK	DS.L	1
ADR_COOR_TIR	DS.L	1
ADR_TIR_PLAYER	DS.L	1

SERIES	DC.L	0,0,0,0,0
	DC.L	BANK_PLAYER,FIN_BANK_1,COL_PLAYER,COOR_TIR_PLAYER,TIR_PLAYER
	DC.L	BANK_PLAYER_2,FIN_BANK_2,COL_PLAYER_2,COOR_TIR_PLAYER_2,TIR_PLAYER_2

BANK_PLAYER	INCBIN	ARME_1.BPK
FIN_BANK_1
COL_PLAYER	INCBIN	ARME_1.COL
COOR_TIR_PLAYER	INCBIN	ARME_1.TIR
TIR_PLAYER	INCBIN	TIR_1.BNK

BANK_PLAYER_2	INCBIN	ARME_2.BPK
FIN_BANK_2
COL_PLAYER_2	INCBIN	ARME_2.COL
COOR_TIR_PLAYER_2
	INCBIN	ARME_2.TIR
TIR_PLAYER_2	INCBIN	TIR_1.BNK

BANK_PLAYER_3	INCBIN	ARME_3.BPK
FIN_BANK_3
COL_PLAYER_3	INCBIN	ARME_3.COL
COOR_TIR_PLAYER_3
	INCBIN	ARME_3.TIR
TIR_PLAYER_3	INCBIN	TIR_3.BNK

NO_ARME	DC.W	0

	;CONTIENT LE CARRE POUR LE DECOR, LES DRAGONBALLS,...
DIVERS	INCBIN	DIVERS.BNK
FIN_BANK_DIVERS

;ZIK	INCBIN	LEVEL4.ZIK
;	EVEN

	SECTION	BSS
NB_VBL	DS.W	1
TIME	DS.W	1
	DS.B	256+160*40
BUFFER	DS.B	64000+16000
SCREEN_MAP	DS.B	32000
SCREEN1	DS.L	1
SCREEN2	DS.L	1
TEMPO_NEXT_FIRE	DS.W	1
PAS_SCROLL_TIR	DS.W	1
	;X,Y,SENS (0=GAUCHE, 1=DROITE)
BUF_TIRS	DS.W	3*10
TABLO_MASK_MAP	DS.W	8*2
	;MAXIMUM 20 CARRêS, BUFFER OU ON METTRA LES CARRêS DU
	;PLAYER EN ATTENTE, POUR CAUSE DE TRANSLATION.
BUF_CARRê_TEMP	DS.W	4*20
	;NB DE CARRêS-1, LES CARRê(S):(X1,Y1,X2,Y2)
COLLISION_DECORS
	DS.W	1+4*15
COOR_PLAYER	DS.W	10
TABLE_ADR_PLAYER DS.B	8000
BUF_ANIM_PLAYER	DS.B	620000
CODE_MAP	DS.B	25000
STOCK_REGISTERS	DS.L	8*20
ADR_DECA_TIR	;DS.W	3*2+2*16*2
	DS.W	5*NB_PASSES_TIR*16*2
BUF_DECA_TIR	DS.B	25000
