;!!! ATTENTION POUR LA 3D FULL CA NE MARCHE PAS ENCORE CAR LES OFFSETS
;Y SONT  N E G A T I F S !!!!

;A0 = buffer de 3D g‚n‚r‚e
;A1 = buffer donn‚es
;A2 = buffer offset
;D7 = pointeur pour A2 ( pour le BSET )
;D6 = compteur pour bits ( d‚but/fin de passe )


	OPT	O+,W-
MAIN
	CLR.L	-(SP)
	MOVE	#$20,-(SP)
	TRAP	#1
	ADDQ.L	#6,SP

*********** 1er passage: d‚gager les offsets relatifs au plan 4

	LEA	COD1,A0
LOOP	MOVE	(A0),D0
	CMPI	#$317C,D0	MOVE.W #XX,0(A0)
	BEQ	ROUT1

	CMPI	#$217C,D0	MOVE.L #XX,0(A0)
	BEQ	ROUT2

	CMPI	#$2140,D0	MOVE.L D0,0(A0)
	BLT	SUITE_0C
	CMPI	#$2147,D0	MOVE.L D7,0(A0)
	BLE	ROUT3
SUITE_0C	
	CMPI	#$3140,D0	MOVE   D0,0(A0)
	BLT	SUITE_1C
	CMPI	#$3147,D0	MOVE   D7,0(A0)
	BLE	ROUT4
SUITE_1C
	CMPI	#$42A8,D0	CLR.L 0(A0)
	BEQ	ROUT3
	CMPI	#$4268,D0	CLR 0(A0)
	BEQ	ROUT4
	CMPI	#$4E75,D0
	BEQ	LOOP2
	CMPI	#$9999,D0
	BEQ.S	LET_S_GO
LOOP2	ADDQ	#2,A0
	BRA	LOOP

;MOVE.W #XX,0(A0)
ROUT1	MOVE	4(A0),D0	D0=OFFSET
	MOVE	D0,D1
	LSR	#3,D1
	LSL	#3,D1
	SUB	D1,D0
	BEQ	OK	PLAN1 EN .W DC OK
	SUBQ	#6,4(A0)
OK	ADDQ	#6,A0
	BRA	LOOP

ROUT2	SUBQ	#6,6(A0)
	ADDQ	#8,A0
	BRA	LOOP

ROUT3	SUBQ	#6,2(A0)
	ADDQ	#4,A0
	BRA	LOOP

ROUT4	MOVE	2(A0),D0	D0=OFFSET
	MOVE	D0,D1
	LSR	#3,D1
	LSL	#3,D1
	SUB	D1,D0
	BEQ	OK2	PLAN1 EN .W DC OK
	SUBQ	#6,2(A0)
OK2	ADDQ	#4,A0
	BRA	LOOP

***********
LET_S_GO	LEA	COD1,A0
	LEA	BUF1,A1
	LEA	BUF2,A2
ANEW	MOVEQ	#0,D0
	MOVEQ	#7,D7
	MOVEQ	#0,D6
	CLR	MEMORY_OFFSET

	REPT	8	donn‚es les plus r‚p‚t‚es
	MOVE.L	(A0)+,(A1)+	… copier pour chaque passe
	ENDR		dans le buf de donnees

	JSR	DEBUT	routine qui repŠre le 1er
;			offset utilis‚
	CMP.L	#BUF1,A0	Au cas o—...
	BGE	W_A_R_N_I_N_G

BOUCLE	MOVE	(A0)+,D0
	CMPI	#$317C,D0	MOVE.W #XX,0(A0)
	BEQ	MOVE_W
	CMPI	#$217C,D0	MOVE.L #XX,0(A0)
	BEQ	MOVE_L
	CMPI	#$2140,D0	MOVE.L D0,0(A0)
	BLT	SUITE_0
	CMPI	#$2147,D0	MOVE.L D7,0(A0)
	BLE	MOVE_L_DN
SUITE_0	CMPI	#$3140,D0	MOVE   D0,0(A0)
	BLT	SUITE_1
	CMPI	#$3147,D0	MOVE   D7,0(A0)
	BLE	MOVE_W_DN
SUITE_1
	CMPI	#$42A8,D0	CLR.L 0(A0)
	BEQ	CLR_L
	CMPI	#$4268,D0	CLR 0(A0)
	BEQ	CLR_W
	CMPI	#$4E75,D0
	BEQ	RTS_
;	CMPI	#$9999,D0
;	BEQ	FINI2
PROBLEME	MOVE	#$700,$FFFF8240.W
	BRA.S	PROBLEME
;FINI2	MOVE	#$070,$FFFF8240.W
;	BRA.S	FINI2

MOVE_W	MOVE	(A0)+,(A1)+	donn‚e dans buffer
	JSR	MISE_A_JOUR
	MOVE	(A0),MEMORY_OFFSET
	ADDQ	#2,A0	saute l'offset
	BSET	D7,(A2)	bit … 1
	ADDQ	#1,D6	cnt+1
	SUBQ	#1,D7	si >$FFFF
	BGE	BOUCLE	ok
	MOVEQ	#7,D7	sinon remise … 7
	ADDQ	#1,A2	et a2=a2+1 octet
	BRA	BOUCLE

MOVE_L	MOVE.L	(A0)+,(A1)+	2 mots ds buffer
	JSR	MISE_A_JOUR
	MOVE	(A0),MEMORY_OFFSET
	ADDQ	#8,MEMORY_OFFSET
	ADDQ	#2,A0	saute l'offset
	BSET	D7,(A2)
	ADDQ	#1,D6
	SUBQ	#1,D7
	BGE	PLUS_1
	MOVEQ	#7,D7
	ADDQ	#1,A2
PLUS_1	BSET	D7,(A2)
	ADDQ	#1,D6
	SUBQ	#1,D7
	BGE	BOUCLE
	MOVEQ	#7,D7
	ADDQ	#1,A2
	BRA	BOUCLE

CLR_W	CLR	(A1)+
	JSR	MISE_A_JOUR
	MOVE	(A0),MEMORY_OFFSET
	ADDQ	#2,A0
	BSET	D7,(A2)
	ADDQ	#1,D6
	SUBQ	#1,D7
	BGE	BOUCLE
	MOVEQ	#7,D7
	ADDQ	#1,A2
	BRA	BOUCLE

CLR_L	CLR.L	(A1)+
	JSR	MISE_A_JOUR
	MOVE	(A0),MEMORY_OFFSET
	ADDQ	#8,MEMORY_OFFSET
	ADDQ	#2,A0
	BSET	D7,(A2)
	ADDQ	#1,D6
	SUBQ	#1,D7
	BGE	PLUS_1B
	MOVEQ	#7,D7
	ADDQ	#1,A2
PLUS_1B	BSET	D7,(A2)
	ADDQ	#1,D6
	SUBQ	#1,D7
	BGE	BOUCLE
	MOVEQ	#7,D7
	ADDQ	#1,A2
	BRA	BOUCLE
     
RTS_	ADDQ	#1,CNT_RTS
	CLR	MEMORY_OFFSET
	MOVE	#4000,D5
	SUB	D6,D5
	BEQ	FINITO
;D5 = NB DE BITS NULS A SAUTER
	MOVE.L	D5,D4
	MOVE.L	D5,D3
	LSR	#3,D4	D4=D4/8
;D4 = NB D'OCTETS A SAUTER
	ADD	D4,A2	SAUT
	LSL	#3,D4	D4=D4*8
	SUB	D4,D3	NB DE BITS RESTANTS
	BEQ	FINITO	SI AUCUN, C'EST BON
;	MOVEQ	#7,D7	*
	SUBQ	#1,D3	*
YYB	SUBQ	#1,D7	* OK JE PENSE
	BGE	YY2B	*
	MOVEQ	#7,D7	*
	ADDQ	#1,A2	*
YY2B	DBF	D3,YYB	*
	
FINITO	BRA	ANEW

MOVE_W_DN	MOVE	-2(A0),(A1)+
	JSR	MISE_A_JOUR
	MOVE	(A0),MEMORY_OFFSET
	ADDQ	#2,A0
	BSET	D7,(A2)
	ADDQ	#1,D6
	SUBQ	#1,D7
	BGE	BOUCLE
	MOVEQ	#7,D7
	ADDQ	#1,A2
	BRA	BOUCLE
MOVE_L_DN	MOVE	-2(A0),(A1)+
	JSR	MISE_A_JOUR
	MOVE	(A0),MEMORY_OFFSET
;	ADDQ	#8,MEMORY_OFFSET	8???
	ADDQ	#2,A0
	BSET	D7,(A2)
	ADDQ	#1,D6
	SUBQ	#1,D7
	BGE	BOUCLE
	MOVEQ	#7,D7
	ADDQ	#1,A2
	BRA	BOUCLE


;CETTE PARTIE PLANTE!!
;MISE_A_JOUR2 ;POUR LES MOVE.L
;	MOVEM.L	D0-D1,-(SP)
;	MOVE	MEMORY_OFFSET,D0
;	MOVE	(A0),D1	MAIS IL ECRIT AUSSI EN 2(A0) !
MISE_A_JOUR ;  ex: si offset = 8 puis 24. Il faut un bit nul entre les
;	2 bits allum‚s.
;a0=offset
	MOVEM.L	D0-D1,-(SP)
	MOVE	MEMORY_OFFSET,D0
	MOVE	(A0),D1
	SUB	D0,D1	D1=DIFFERENCE ENTRE 2 OFFSETS
	BEQ	CA_VA	PEUT ETRE NUL...SI!
	CMPI	#8,D1	SI DIFF=8
	BEQ	CA_VA	C'EST NORMAL
	LSR	#3,D1	D1=NB DE BITS NULS A SAUTER
	SUBQ	#1,D1
	MOVE	D1,D4
;D4 = NB DE BITS NULS A SAUTER
	ADD	D4,D6	MISE A JOUR DU D6
	MOVE.L	D4,D3
	LSR	#3,D4	D4=D4/8
;D4 = NB D'OCTETS A SAUTER
	ADD	D4,A2	SAUT
	LSL	#3,D4	D4=D4*8
	SUB	D4,D3	NB DE BITS RESTANTS
	BEQ	CA_VA	SI AUCUN, C'EST BON
;	MOVEQ	#7,D7	*
	SUBQ	#1,D3	*
YYC	SUBQ	#1,D7	* OK JE PENSE
	BGE	YY2C	*
	MOVEQ	#7,D7	*
	ADDQ	#1,A2	*
YY2C	DBF	D3,YYC	*
	
CA_VA	MOVEM.L	(SP)+,D0-D1
	RTS
****************************************************************************
DEBUT	
	MOVE	(A0),D0
	CMPI	#$317C,D0
	BEQ	ROUTINE1
	CMPI	#$217C,D0
	BEQ	ROUTINE2
	CMPI	#$2140,D0
	BLT	SUITE_0B
	CMPI	#$2147,D0
	BLE	ROUTINE3
SUITE_0B	CMPI	#$3140,D0
	BLT	SUITE_1B
	CMPI	#$3147,D0
	BLE	ROUTINE3
SUITE_1B	CMPI	#$42A8,D0
	BEQ	ROUTINE3
	CMPI	#$4268,D0
	BEQ	ROUTINE3
	CMPI	#$4E75,D0
	BEQ	ANEW2
	CMPI	#$9999,D0
	BEQ	FINI
PROB2	MOVE	#$700,$FFFF8240.W
FINI	BRA.S	FINI
ANEW2	ADDQ	#2,A0
	BRA	ANEW
ROUTINE1	MOVE	4(A0),D4
	BRA.S	CONT
ROUTINE2	MOVE	6(A0),D4
	BRA.S	CONT
ROUTINE3	MOVE	2(A0),D4
CONT	MOVE	D4,MEMORY_OFFSET
	LSR	#3,D4	D4=D4/8 ==> 0 < D4 < 4000
	TST	D4	SI D4=0	
	BEQ	BOUCLE	ALORS PAS DE BIT A ANNULER
;D4 = NB DE BITS NULS A SAUTER
	ADD	D4,D6	MISE A JOUR DU D6
	MOVE.L	D4,D3
	LSR	#3,D4	D4=D4/8
;D4 = NB D'OCTETS A SAUTER
	ADD	D4,A2	SAUT
	LSL	#3,D4	D4=D4*8
	SUB	D4,D3	NB DE BITS RESTANTS
	BEQ	BOUCLE	SI AUCUN, C'EST BON
;	MOVEQ	#7,D7	*
	SUBQ	#1,D3	*
YY	SUBQ	#1,D7	* OK JE PENSE
	BGE	YY2	*
	MOVEQ	#7,D7	*
	ADDQ	#1,A2	*
YY2	DBF	D3,YY	*
	BRA	BOUCLE
W_A_R_N_I_N_G	MOVE	#$007,$FFFF8240.W
	BRA.S	W_A_R_N_I_N_G
	DATA
CNT_RTS	DC	0
MEMORY_OFFSET	DC	0
COD1	INCBIN	FUCK.COD	37348
	DCB.L	20,$99999999
	BSS
BUF1	DS.B	100000
BUF2	DS.B	100000
