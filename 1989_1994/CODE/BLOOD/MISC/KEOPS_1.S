MAIN	CLR.L	-(SP)
	MOVE.W	#$20,-(SP)
	TRAP	#1
	ADDQ.W	#6,SP

	BSR	PREPARE_PLAYER
	BSR	INIT_SYSTEME

	MOVEQ	#11,D0
	MOVE.W	#1000,D1	;X
	MOVE.W	#$2700,SR
	CLR.B	$FFFFFA07.W
	CLR.B	$FFFFFA09.W
	MOVE.L	#VBLR,$70.W
	MOVE.W	#$2300,SR

J	BRA.S	J

VBLR	BSR	EFFAC_SCREEN
	MOVE.W	#0,D2	;Y
	MOVEM.L	D0/D1,-(SP)
	BSR	AFF_PLAYER
	MOVEM.L	(SP)+,D0/D1
	SUBQ.W	#1,TIME
	BGT.S	.NOT_NOW
	MOVE.W	#6,TIME
	ADDQ.W	#1,D0
	CMPI.W	#21,D0
	BLT.S	.NOT_NOW
	MOVEQ	#12,D0
	SUBI.W	#31,D1
.NOT_NOW	SUBQ.W	#1,TIME

	BSR	SWAPEC
	RTE

	;No DES ANIMS POUR LA MARCHE VERS LA DROITE
	;LE NOMBRE APRES LE -1 (FIN DE L'ANIM) EST L'OFFSET
	;POUR LE LOOPING, LE NB D'APRES EST L'INCREMENT POUR LE
	;X APRES LE LOOPING
ANIM_DROITE	DC.W	0,1,2,3,4,5,6,7,8,9,10,-1,2,31
ANIM_GAUCHE	DC.W	11,12,13,14,15,16,17,18,19,20,21,-1,2,-31

PT_ANIM_PERSO	DC.L	0

	;D0=No DE L'ANIM
	;D1=X DE BASE
	;D2=Y DE BASE
AFF_PLAYER	LEA	TABLE_ADR_PLAYER,A0
	MULU.W	#102,D0
	ADDA.W	D0,A0
	;A0=ADRESSE DE L'INFO DE L'ANIM
	MOVE.W	(A0)+,D0	;HAUTEUR-1
	ADD.W	(A0)+,D1	;X+OFFSET X
	ADD.W	(A0)+,D2	;Y+OFFSET Y
	MULU.W	#160,D2
	MOVE.W	D1,D3
	ANDI.W	#$FFF0,D3
	ASR.W	#1,D3
	ADD.W	D2,D3
	MOVE.L	SCREEN2,A2
	ADDA.W	D3,A2
	ANDI.W	#15,D1
	MULU.W	#6,D1
	ADDA.W	D1,A0
	MOVE.W	(A0)+,D1	;NB DE MOTS-1
	MOVE.L	(A0),A1	;A1=ADRESSE DE L'ANIM
	MOVE.W	D1,D3
	ADDQ.W	#1,D3
	LSL.W	#3,D3
	SUBI.W	#160,D3
	NEG.W	D3	;D3=OFFSET FIN DE LIGNE

.AFF_Y	MOVE.W	D1,D2
.AFF_X	MOVE.L	(A1)+,(A2)+
	MOVE.L	(A1)+,(A2)+
	DBRA	D2,.AFF_X
	ADDA.W	D3,A2
	DBRA	D0,.AFF_Y
	RTS

PREPARE_PLAYER	LEA	BANK_PLAYER,A0
	LEA	FIN_BANK_1,A1
	LEA	BUF_ANIM_PLAYER,A2
.COPY	MOVE.B	(A0)+,(A2)+
	CMPA.L	A0,A1
	BGT.S	.COPY
	LEA	BUF_ANIM_PLAYER,A0
	BSR	unpack
	ADDA.L	D0,A0
	MOVE.L	A0,A6    ;A6=ADRESSE DE FIN DES DECALAGES 0
	LEA	BUF_ANIM_PLAYER,A0
	MOVE.L	A0,D0
	MOVE.W	(A0)+,D7	;D7=NB D'ANIMS
	SUBQ.W	#1,D7
.PREP_ANIMS	ADDQ.W	#4,A0
	ADD.L	D0,(A0)
	LEA	10(A0),A0
	DBRA	D7,.PREP_ANIMS

	LEA	TABLE_ADR_PLAYER,A0
	LEA	BUF_ANIM_PLAYER+2,A1
	MOVEQ	#22-1,D6
NEXT_ONE	MOVE.W	(A1)+,D0	;LONGUEUR
	MOVE.W	(A1)+,D1
	SUBQ.W	#1,D1	;HAUTEUR-1
	MOVE.L	(A1)+,A2	;ADRESSE DE L'ANIM DEC. 0
	CMPA.L	#TABLE_ADR_PLAYER,A0
	BEQ.S	PREMIERE_FOIS
	LEA	TABLE_ADR_PLAYER,A3
NEXT_TRY	CMPA.L	8(A3),A2
	BEQ.S	RECOPY_INTEGRALE
	LEA	102(A3),A3
	CMPA.L	A3,A0
	BGT.S	NEXT_TRY
PREMIERE_FOIS	MOVE.W	D1,(A0)+
	MOVE.W	(A1)+,(A0)+	;OFFSET X
	MOVE.W	(A1)+,(A0)+	;OFFSET Y
	ADDQ.W	#2,A1	;ON SAUTE LE TEMPO
	SUBQ.W	#1,D0
	LSR.W	#4,D0	;NB DE MOTS-1
	MOVE.W	D0,(A0)+	;DECALAGE 0
	MOVE.L	A2,(A0)+
	MOVE.W	D0,D2
	ADDQ.W	#1,D2

	MOVEQ	#15-1,D7
.ALL_DECS	MOVE.W	D2,(A0)+	;DECALAGE >0
	MOVE.L	A6,(A0)+
	BSR	RECOPY
	MOVE.L	A6,A2
	MOVE.W	D2,D0
	BSR	DECAL
	DBRA	D7,.ALL_DECS
NEXT_ANIMS	DBRA	D6,NEXT_ONE
	RTS

RECOPY_INTEGRALE
	MOVE.W	(A3)+,(A0)+	;HAUTEUR
	ADDQ.W	#4,A3
	MOVE.W	(A1)+,(A0)+	;OFFSET_X
	MOVE.W	(A1)+,(A0)+	;OFFSET_Y
	MOVEQ	#16-1,D7
.ALL_DECS	MOVE.W	(A3)+,(A0)+	;NB DE MOTS
	MOVE.L	(A3)+,(A0)+	;ADRESSE
	DBRA	D7,.ALL_DECS
	ADDQ.W	#2,A1	;ON SAUTE OFF_X,OFF_Y,TEMPO
	BRA.S	NEXT_ANIMS

	;D0=LARGEUR
	;D1=HAUTEUR-1
	;A6=ADRESSE DU SPRITE A DECALER
DECAL	MOVEM.L	D0/D1,-(SP)
	MOVE.W	D0,D5
	ADDQ.W	#1,D5
	LSL.W	#3,D5
	SUBQ.W	#8,D5	;PSEUDO OFFSET FIN DE LIGNE
.DEC_ALL_SPR	MOVEQ	#4-1,D4
.DEC_ALL_P	MOVE.L	A6,A5
	MOVE.W	D0,D3
.DEC_P	ROXR	(A5)
	ADDQ.W	#8,A5
	DBRA	D3,.DEC_P
	ADDQ.W	#2,A6
	DBRA	D4,.DEC_ALL_P
	ADDA.W	D5,A6
	DBRA	D1,.DEC_ALL_SPR
	MOVEM.L	(SP)+,D0/D1
	RTS

	;D0=LARGEUR SOURCE EN PATêS DE 16 PIXELS
	;D1=HAUTEUR-1
	;D2=LARGEUR DESTINATION
	;A2=SOURCE
	;A6=DESTINATION
RECOPY	MOVEM.L	D0-D2/A2/A6,-(SP)
	SUB.W	D0,D2
	LSL.W	#3,D2
.AFF_Y	MOVE.W	D0,D3
.AFF_X	MOVE.L	(A2)+,(A6)+
	MOVE.L	(A2)+,(A6)+
	DBRA	D3,.AFF_X
	ADDA.W	D2,A6
	DBRA	D1,.AFF_Y
	MOVEM.L	(SP)+,D0-D2/A2/A6
	RTS

EFFAC_SCREEN	MOVE.L	SCREEN2,A0
	MOVEQ	#0,D6
	MOVE.W	#4000-1,D7
.EFF	MOVE.L	D6,(A0)+
	MOVE.L	D6,(A0)+
	DBRA	D7,.EFF
	RTS

SWAPEC	MOVE.L	SCREEN1,D5
	MOVE.L	SCREEN2,SCREEN1
	MOVE.L	D5,SCREEN2
	MOVE.B	SCREEN1+1,$FFFF8201.W
	MOVE.B	SCREEN1+2,$FFFF8203.W
	RTS

INIT_SYSTEME	CLR.B	$FFFF8260.W

	MOVE.L	#BUFFER,D0
	CLR.B	D0
	MOVE.L	D0,SCREEN1
	ADDI.L	#32000,D0
	MOVE.L	D0,SCREEN2
	MOVE.B	SCREEN1+1,$FFFF8201.W
	MOVE.B	SCREEN1+2,$FFFF8203.W

	MOVEM.L	PALETTE,D0-D7
	MOVEM.L	D0-D7,$FFFF8240.W
	RTS

	;d0-->d3:x1,y1,x2,y2 du premier carrÇ
	;d4-->d7:x1,y1,x2,y2 du second carrÇ

TEST_CARRê	CMP.W	D4,D2
	BLT.S	.PAS_COMPRIS	;SI D2<D4 LE CARRê A TESTER EST A DROITE DU PREMIER ( DONC PAS COMPRIS )
	CMP.W	D6,D0
	BGT.S	.PAS_COMPRIS	;SI D0>D6 LE CARRê A TESTER EST A GAUCHE DU PREMIER ( DONC PAS COMPRIS )
    ;ICI ON SAIT QUE LE CARRê A TESTER INTERCEPTE LE PREMIER EN X
	CMP.W	D7,D1
	BGT.S	.PAS_COMPRIS	;SI D1>D7 LE CARRê A TESTER EST AU-DESSUS DU PREMIER ( DONC PAS COMPRIS )
	CMP.W	D5,D3
	BLT.S	.PAS_COMPRIS	;SI D3<D5 LE CARRê A TESTER EST AU-DESSOUS DU PREMIER ( DONC PAS COMPRIS )
    ;ICI LE CARRê INTERCEPTE EN PLUS LE PREMIER EN Y
	MOVEQ	#0,D4
	RTS
.PAS_COMPRIS	MOVEQ	#-1,D4
	RTS

	INCLUDE	UNPACK3.S

PALETTE	INCBIN	KEOPS.PAL

BANK_PLAYER	INCBIN	WALK_Z_1.BPK
FIN_BANK_1
COL_PLAYER	INCBIN	MARCHE_Z.COL

	SECTION	BSS
TIME	DS.W	1
	DS.B	256+160*4
BUFFER	DS.B	64000
SCREEN1	DS.L	1
SCREEN2	DS.L	1
TABLE_ADR_PLAYER DS.B	10000
BUF_ANIM_PLAYER	DS.B	180000*2