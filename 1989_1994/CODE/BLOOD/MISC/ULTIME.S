MODE:	EQU	0
PIC_ALGO:	EQU	0
DEC_SPACE:	EQU	$80
RESTORE_SPACE:	EQU	0
DONNEE_INIT = -200
TIME_PRêC = 128
NB_PTS_=8+6

X1	EQU	0
X2	EQU	4
X3	EQU	8
X4	EQU	12
X5	EQU	16
X6	EQU	20
X7	EQU	24
X8	EQU	28
X9	EQU	32
X10	EQU	36
X11	EQU	40
X12	EQU	44
X13	EQU	48
X14	EQU	52

MAIN	CLR.L	-(SP)
	MOVE.W	#$20,-(SP)
	TRAP	#1
	ADDQ.W	#6,SP

	CLR	-(SP)
	PEA	-1.W
	PEA	-1.W
	MOVE	#5,-(SP)
	TRAP	#14
	LEA	12(SP),SP
*************************************************************************
	JMP	DEBUT
	DS.L	256
NEW_PILE	DS.L	1

depack:	movem.l	d0-a6,-(a7)
	cmp.l	#"ATM5",(a0)+
	bne	not_packed
	link	a2,#-28
	move.l	(a0)+,d0
	ifne	MODE
	lea	4(a0,d0.l),a5
	move.l	d0,-(a7)
	elseif
	move.l	a1,a5
	add.l	d0,a5
	endc
	move.l	a5,a4
	ifne	MODE
	ifne	DEC_SPACE
	lea	DEC_SPACE(a4),a5
	endc
	endc
	lea	-$c(a4),a4
	move.l	(a0)+,d0
	move.l	a0,a6
	add.l	d0,a6
	ifne	PIC_ALGO
	moveq	#0,d0
	move.b	-(a6),d0
	move	d0,-2(a2)
	ifne	RESTORE_SPACE
	lsl	#2,d0
	sub	d0,a4
	endc
	elseif
	ifne	RESTORE_SPACE
	clr	-2(a2)
	endc
	subq	#1,a6
	endc
	ifne	RESTORE_SPACE
	lea	buff_marg(pc),a3
	move	-2(a2),d0
	lsl	#2,d0
	add	#DEC_SPACE+$C,d0
	bra.s	.save
.save_m:	move.b	(a4)+,(a3)+
	subq	#1,d0
.save:	bne.s	.save_m
	movem.l	a3-a4,-(a7)
	endc
	ifne	PIC_ALGO
	pea	(a5)
	endc
	move.b	-(a6),d7
	bra	take_type
decrunch:	move	d3,d5
take_lenght:	add.b	d7,d7
.cont_take:	dbcs	d5,take_lenght
	beq.s	.empty1
	bcc.s	.next_cod
	sub	d3,d5
	neg	d5
	bra.s	.do_copy1
.next_cod:	moveq	#3,d6
	bsr.s	get_bit2
	beq.s	.next_cod1
	bra.s	.do_copy
.next_cod1:	moveq	#7,d6
	bsr.s	get_bit2
	beq.s	.next_cod2
	add	#15,d5
	bra.s	.do_copy
.empty1:	move.b	-(a6),d7
	addx.b	d7,d7
	bra.s	.cont_take
.next_cod2:	moveq	#13,d6
	bsr.s	get_bit2
	add	#255+15,d5
.do_copy:	add	d3,d5
.do_copy1:	lea	decrun_table(pc),a4
	move	d5,d2
	bne.s	bigger
	add.b	d7,d7
	bne.s	.not_empty
	move.b	-(a6),d7
	addx.b	d7,d7
.not_empty:	bcs.s	.ho_kesako
	moveq	#1,d6
	bra.s	word
.ho_kesako:	moveq	#3,d6
	bsr.s	get_bit2
	tst.b	-28(a2)
	beq.s	.ho_kesako1
	move.b	10-28(a2,d5.w),-(a5)
	bra	tst_end
.ho_kesako1:	move.b	(a5),d0
	btst	#3,d5
	bne.s	.ho_kesako2
	bra.s	.ho_kesako3
.ho_kesako2:	add.b	#$f0,d5
.ho_kesako3:	sub.b	d5,d0
	move.b	d0,-(a5)
	bra	tst_end
get_bit2:	clr	d5
.get_bits:	add.b	d7,d7
	beq.s	.empty
.cont:	addx	d5,d5
	dbf	d6,.get_bits
	tst	d5
	rts
.empty:	move.b	-(a6),d7
	addx.b	d7,d7
	bra.s	.cont
bigger:	moveq	#2,d6
word:	bsr.s	get_bit2
contus:	move	d5,d4
	move.b	14(a4,d4.w),d6
	ext	d6
	tst.b	1-28(a2)
	bne.s	.spe_ofcod1
	addq	#4,d6
	bra.s	.nospe_ofcod1
.spe_ofcod1:	bsr.s	get_bit2
	move	d5,d1
	lsl	#4,d1
	moveq	#2,d6
	bsr.s	get_bit2
	cmp.b	#7,d5
	blt.s	.take_orof
	moveq	#0,d6
	bsr.s	get_bit2
	beq.s	.its_little
	moveq	#2,d6
	bsr.s	get_bit2
	add	d5,d5
	or	d1,d5
	bra.s	.spe_ofcod2
.its_little:	or.b	2-28(a2),d1
	bra.s	.spe_ofcod3
.take_orof:	or.b	3-28(a2,d5.w),d1
.spe_ofcod3:	move	d1,d5
	bra.s	.spe_ofcod2
.nospe_ofcod1:	bsr.s	get_bit2
.spe_ofcod2:	add	d4,d4
	beq.s	.first
	add	-2(a4,d4.w),d5
.first:	lea	1(a5,d5.w),a4
	move.b	-(a4),-(a5)
.copy_same:	move.b	-(a4),-(a5)
	dbf	d2,.copy_same
	bra.s	tst_end
make_jnk:	add.b	d7,d7
	bne.s	.not_empty
	move.b	-(a6),d7
	addx.b	d7,d7
.not_empty:	bcs.s	string
	move.b	-(a6),-(a5)
tst_end:	cmp.l	a5,a3
	bne.s	make_jnk
	cmp.l	a6,a0
	beq.s	work_done
take_type:	moveq	#0,d6
	bsr	get_bit2
	beq.s	.nospe_ofcod
	move.b	-(a6),d0
	lea	2-28(a2),a1
	move.b	d0,(a1)+
	moveq	#1,d1
	moveq	#6,d2
.next:	cmp.b	d0,d1
	bne.s	.no_off_4b
	addq	#2,d1
.no_off_4b:	move.b	d1,(a1)+
	addq	#2,d1
	dbf	d2,.next
	st	1-28(a2)
	bra.s	.spe_ofcod
.nospe_ofcod:	sf	1-28(a2)
.spe_ofcod:	moveq	#0,d6
	bsr	get_bit2
	beq.s	.relatif
	lea	10-28(a2),a1
	moveq	#15,d0
.next_f:	move.b	-(a6),(a1)+
	dbf	d0,.next_f
	st	-28(a2)
	bra.s	.freq
.relatif:	sf	-28(a2)
.freq:	clr	d3
	move.b	-(a6),d3
	move.b	-(a6),d0
	lsl	#8,d0
	move.b	-(a6),d0
	move.l	a5,a3
	sub	d0,a3
	bra.s	make_jnk
string:	bra	decrunch
work_done:
	ifne	PIC_ALGO
	move.l	(a7)+,a0
	pea	(a2)
	bsr.s	decod_picture
	move.l	(a7)+,a2
	endc
	ifne	RESTORE_SPACE
	movem.l	(a7)+,a3-a4
	endc
	ifne	MODE
	move.l	(a7)+,d0
	bsr	copy_decrun
	endc
	ifne	RESTORE_SPACE
	move	-2(a2),d0
	lsl	#2,d0
	add	#DEC_SPACE+$C,d0
	bra.s	.restore
.restore_m:	move.b	-(a3),-(a4)
	subq	#1,d0
.restore:	bne.s	.restore_m
	endc
	unlk	a2
not_packed:	movem.l	(a7)+,d0-a6
 	rts
decrun_table:	dc.w	32,32+64,32+64+256,32+64+256+512,32+64+256+512+1024
	dc.w	32+64+256+512+1024+2048,32+64+256+512+1024+2048+4096
	dc.b	0,1,3,4,5,6,7,8
	ifne	PIC_ALGO
decod_picture:	move	-2(a2),d7
.next_picture:	dbf	d7,.decod_algo
	rts
.decod_algo:	move.l	-(a0),d0
	lea	0(a5,d0.l),a1
.no_odd:	lea	$7d00(a1),a2
.next_planes:	moveq	#3,d6
.next_word:	move	(a1)+,d0
	moveq	#3,d5
.next_bits:	add	d0,d0
	addx	d1,d1
	add	d0,d0
	addx	d2,d2
	add	d0,d0
	addx	d3,d3
	add	d0,d0
	addx	d4,d4
	dbf	d5,.next_bits
	dbf	d6,.next_word
	movem	d1-d4,-8(a1)
	cmp.l	a1,a2
	bne.s	.next_planes
	bra.s	.next_picture
	endc
	ifne	MODE
copy_decrun:	lsr.l	#4,d0
	lea	-12(a6),a6
.copy_decrun:	rept	4
	move.l	(a5)+,(a6)+
	endr
	dbf	d0,.copy_decrun
	rts
	endc
	ifne	RESTORE_SPACE
buff_marg:	dcb.b	$90+DEC_SPACE+$C
	endc

ZIK	INCBIN	kill.mus
	EVEN

DEBUT	LEA	NEW_PILE,A7
	MOVE.L	#FIN,$008.W
	MOVE.L	#FIN,$00C.W
	MOVE.L	#FIN,$010.W
	MOVE.L	#FIN,$014.W
	MOVE.L	#FIN,$018.W
	MOVE.L	#FIN,$01C.W
	MOVE.L	#FIN,$020.W

	MOVEQ	#1,D0
	JSR	ZIK

	LEA	DEB_BSS,A0
	LEA	END_BSS,A1
.KILL_IT	CLR.L	(A0)+
	CMP.L	A1,A0
	BLE.S	.KILL_IT

	MOVE.L	#BUFFER,D0
	CLR.B	D0
	MOVE.L	D0,SCREEN1
	ADDI.L	#32000,D0
	MOVE.L	D0,SCREEN2

	MOVE.B	SCREEN1+1,$FFFF8201.W
	MOVE.B	SCREEN1+2,$FFFF8203.W

	LEA	MOVEW,A0
	LEA	MOVEW_DEP,A1
	JSR	depack

	LEA	MOVEL,A0
	LEA	MOVEL_DEP,A1
	JSR	depack
	JSR	RE_BUILD
;Now, reconstruit la table...
	LEA	TABLE_ADR,A0
	LEA	BUF_COD,A1
.NOT_END	MOVE.L	A1,(A0)+
.LOOK_FOR_IT	CMPI	#$4E75,(A1)+
	BNE.S	.LOOK_FOR_IT
	CMPI	#$9999,(A1)
	BNE.S	.NOT_END

	LEA	MOVEW_DEP,A0
	MOVEQ	#0,D0
	MOVE	#24999,D7
.NET	MOVE.L	D0,(A0)+
	DBF	D0,.NET

	LEA	TABLE_ADR_COD,A0
	MOVE	#5279,D7
.C	MOVE.L	#RT_COOL,(A0)+
	DBF	D7,.C

	BSR	PREPA_LOG_EXP
	CLR	CHOICE
	;MOVE	#1,CHOICE
	JSR	INIT_ROUT_POLY
	MOVE.L	#RT_COOL,TABLE_ADR_COD+40
	MOVE	#DONNEE_INIT,DONNEE

	CLR.W	Z_BASE
	JSR	GERE_Z

	LEA	SINUS,A0
	LEA	SINUS+LONG_SINUS,A1
	MOVE.W	#(LONG_SINUS/8)-1,D7
.RECOPY	MOVE.W	(A0)+,(A1)+
	DBRA	D7,.RECOPY

	MOVE.L	#BUF_TABLOS,SAVE_ADR_TABLOS

	MOVE.W	#$2700,SR
	CLR.B	$FFFFFA07.W
	CLR.B	$FFFFFA09.W
	MOVE.L	#VBLR,$70.W
	CLR.W	NB_VBL
	MOVE.W	#$2300,SR

MAIN_LOOP	LEA	POINTS,A0
	LEA	ANGLES,A1
	LEA	TRANS,A6
	LEA	BUF_PTS,A2
	BSR	ROTATE
	BSR	AFFICH
	JSR	GERE_Z
	LEA	ANGLES,A0
	MOVE.W	(A0),D0
	ADD	ADX,D0
	ANDI.W	#1023,D0
	MOVE.W	D0,(A0)+
	MOVE.W	(A0),D0
	ADD	ADY,D0
	ANDI.W	#1023,D0
	MOVE.W	D0,(A0)+
	MOVE.W	(A0),D0
	ADD	ADZ,D0
	ANDI.W	#1023,D0
	MOVE.W	D0,(A0)+

	ADDQ	#1,TIME
	CMPI	#TIME_PRêC,TIME
	BEQ.S	.STOP
	BRA	MAIN_LOOP
.STOP
NEW_DEAL	MOVE.L	#BUFFER,D0
	CLR.B	D0
	MOVE.L	D0,SCREEN1
	ADDI.L	#32000,D0
	MOVE.L	D0,SCREEN2
	MOVE.B	SCREEN1+1,$FFFF8201.W
	MOVE.B	SCREEN1+2,$FFFF8203.W

	MOVEM.L	$FFFF8240.W,D0-D3
	MOVEM.L	D0-D3,$FFFF8250.W
	MOVE	#$223,$FFFF8250.W

	MOVE.L	SCREEN1,A1
	MOVE.L	SCREEN2,A2
	MOVEQ	#0,D0
	MOVEQ	#-1,D1
	MOVE	#3999,D7
.KILL_EM	
	MOVE.L	D0,(A1)+
	MOVE	D0,(A1)+
	MOVE	D1,(A1)+
	
	MOVE.L	D0,(A2)+
	MOVE	D0,(A2)+
	MOVE	D1,(A2)+
	DBF	D7,.KILL_EM

	MOVE.L	#BUF_TABLOS,SAVE_ADR_TABLOS
	MOVE.L	#TABLE_ADR,SAVE_A1+2
	CLR	TIME
	LEA	ANGLES,A0
	CLR.L	(A0)+
	CLR	(A0)

MAIN_LOOP2	BSR	VSYNC
	MOVE	#$011,$FFFF8240.W

	LEA	COLORS,A0
MOD_COLORS	EQU	*+2
	LEA	0(A0),A0
	CMPI	#$1234,(A0)
	BNE.S	.DO_IT
	CLR	MOD_COLORS
	LEA	COLORS,A0
.DO_IT	MOVE	(A0),$FFFF8250.W
	ADDQ	#2,MOD_COLORS

	LEA	COLORS2,A0
MOD_COLORS2	EQU	*+2
	LEA	0(A0),A0
	CMPI	#$1234,(A0)
	BNE.S	.DO_IT2
	CLR	MOD_COLORS2
	LEA	COLORS2,A0
.DO_IT2	MOVE	(A0)+,D0
	MOVE	(A0)+,D1
	MOVE	(A0)+,D2
	ADDQ	#2*3,MOD_COLORS2

	MOVE	D0,$FFFF8252.W 1001
	MOVE	D1,$FFFF8254.W 1010
	MOVE	D1,$FFFF8256.W 1011
	MOVE	D2,$FFFF8258.W 1100
	MOVE	D2,$FFFF825A.W 1101
	MOVE	D2,$FFFF825C.W 1110
	MOVE	D2,$FFFF825E.W 1111

	JSR	ZIK+8
	LEA	POINTS,A0
	LEA	ANGLES,A1
	LEA	TRANS,A6
	LEA	BUF_PTS,A2
	BSR	ROTATE

	
SAVE_A1	LEA	TABLE_ADR,A1
	;TST	(A1)
	;BNE.S	.CA_TOURNE
	;MOVE.L	#TABLE_ADR,SAVE_A1+2
	;LEA	TABLE_ADR,A1
.CA_TOURNE	MOVE.L	(A1)+,A2
	MOVE.L	A1,SAVE_A1+2
	MOVE.L	SCREEN2,A0
	MOVEQ	#0,D0
	CMPI.B	#$43,$FFFFFC02.W
	BNE.S	.DO
	JSR	EFFACE
	BRA.S	.DO_NOT
.DO	JSR	(A2)
.DO_NOT
	BSR	AFFICH2
	BSR	SWAPEC
	JSR	GERE_Z

	CMPI.B	#$F,$FFFFFC02.W
	BNE.S	.NO_TIME
	ST	$FFFF8240.W
.NO_TIME


	LEA	ANGLES,A0
	MOVE.W	(A0),D0
	ADD	ADX,D0
	ANDI.W	#1023,D0
	MOVE.W	D0,(A0)+

	MOVE.W	(A0),D0
	ADD	ADY,D0
	ANDI.W	#1023,D0
	MOVE.W	D0,(A0)+

	MOVE.W	(A0),D0
	ADD	ADZ,D0
	ANDI.W	#1023,D0
	MOVE.W	D0,(A0)+

	CMPI.B	#$1,$FFFFFC02.W
	BNE.S	.NOT_ESC
	JMP	NEW_DEAL
.NOT_ESC

	ADDQ	#1,TIME
	CMPI	#TIME_PRêC,TIME
	BNE	MAIN_LOOP2
	
	MOVE.L	#BUF_TABLOS,SAVE_ADR_TABLOS
	MOVE.L	#TABLE_ADR,SAVE_A1+2
	CLR	TIME
	LEA	ANGLES,A0
	CLR.L	(A0)+
	CLR	(A0)

	BRA	MAIN_LOOP2

COLORS	DC	$001,$002,$002,$003,$003
	DCB	128-10,$004
	DC	$003,$003,$002,$002,$001
	
	DC	$100,$200,$200,$300,$300
	DCB	128-10,$400
	DC	$300,$300,$200,$200,$100
	
	DC	$011,$122,$122,$233,$233
	DCB	128-10,$344
	DC	$233,$233,$122,$122,$011

	DC	$002,$003,$004,$005,$006
	DCB	128-10,$007
	DC	$006,$005,$004,$003,$002
	
	DC	$200,$300,$400,$500,$600
	DCB	128-10,$700
	DC	$600,$500,$400,$300,$200
	
	DC	$212,$323,$434,$545,$656
	DCB	128-10,$767
	DC	$656,$545,$434,$323,$212
	DC	$1234

COLORS2	dcb	128*3*3-5*3,$666
	DCB	3,$555
	DCB	3,$444
	DCB	3,$333
	DCB	3,$222
	DCB	3,$111

	DC	$001,$001,$111
	DC	$002,$001,$001
	DC	$003,$001,$001
	DC	$004,$002,$001
	DC	$005,$003,$001
	REPT	128-10
	DC	$006,$004,$002
	ENDR
	DC	$005,$003,$001
	DC	$004,$002,$001
	DC	$003,$001,$001
	DC	$002,$001,$001
	DC	$001,$001,$001

	DC	$100,$100,$100
	DC	$200,$100,$100
	DC	$300,$100,$100
	DC	$400,$200,$100
	DC	$500,$300,$100
	REPT	128-10
	DC	$600,$400,$200
	ENDR
	DC	$500,$300,$100
	DC	$400,$200,$100
	DC	$300,$100,$100
	DC	$200,$100,$100
	DC	$100,$100,$100

	DC	$101,$101,$101
	DC	$202,$101,$101
	DC	$313,$101,$101
	DC	$424,$212,$101
	DC	$535,$323,$101
	REPT	128-10
	DC	$646,$434,$212
	ENDR
	DC	$656,$545,$323
	DC	$666,$656,$434
	DC	$666,$666,$545
	DC	$666,$666,$656
	DC	$666,$666,$666
	DC	$1234

GERE_Z
	LEA	POINTS+2,A0
	MOVE	DONNEE,D0
	MOVE	D0,D1
	NEG	D1
	MOVE	D1,(A0)+
	MOVE	D0,(A0)+
	MOVE	D0,(A0)+
	MOVE	D1,(A0)+
	MOVE	D1,(A0)+
	MOVE	D0,(A0)+
	MOVE	D0,(A0)+
	MOVE	D1,(A0)+
	MOVE	D0,(A0)+
	MOVE	D0,(A0)+
	MOVE	D0,(A0)+
	MOVE	D0,(A0)+

	MOVE	D0,(A0)+
	MOVE	D0,(A0)+
	MOVE	D1,(A0)+
	MOVE	D0,(A0)+
	MOVE	D1,(A0)+
	MOVE	D1,(A0)+
	MOVE	D1,(A0)+
	MOVE	D1,(A0)+
	MOVE	D1,(A0)+
	MOVE	D1,(A0)+
	MOVE	D0,(A0)+
	MOVE	D1,(A0)+

	CLR.L	(A0)+
	MOVE	D0,(A0)
	;ADD	D0,(A0)
	ADD	D0,(A0)+
	CLR.L	(A0)+
	MOVE	D1,(A0)
	;ADD	D1,(A0)
	ADD	D1,(A0)+

	MOVE	D0,(A0)
	;ADD	D0,(A0)
	ADD	D0,(A0)+
	CLR.L	(A0)+
	MOVE	D1,(A0)
	;ADD	D1,(A0)
	ADD	D1,(A0)+
	CLR.L	(A0)+

	CLR	(A0)+
	MOVE	D0,(A0)
	;ADD	D0,(A0)
	ADD	D0,(A0)+
	CLR.L	(A0)+
	MOVE	D1,(A0)
	;ADD	D1,(A0)
	ADD	D1,(A0)+
	CLR	(A0)+
	RTS

DONNEE	DC	194
TIME	DC	0
VSYNC	CMPI.W	#1,NB_VBL
	BLT.S	VSYNC
	CLR.W	NB_VBL
	RTS

VBLR	ADDQ.W	#1,NB_VBL
	RTE

SWAPEC	MOVE.L	SCREEN1,D0
	MOVE.L	SCREEN2,SCREEN1
	MOVE.L	D0,SCREEN2

	MOVE.B	SCREEN1+1,$FFFF8201.W
	MOVE.B	SCREEN1+2,$FFFF8203.W
	RTS

FIN	MOVE.L	4.W,A0
	JMP	(A0)

EFFAC
	MOVE.L	SCREEN2,A0
	MOVEQ	#0,D0
	MOVE.W	#200-1,D7
.ALL
N	SET	0
	REPT	20
	MOVE	D0,N(A0)
N	SET	N+8
	ENDR
	LEA	160(A0),A0
	DBRA	D7,.ALL
	RTS
EFFACE
	MOVE.L	SCREEN2,A0
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	MOVEQ	#0,D2
	MOVEQ	#0,D3
	MOVEQ	#0,D4
	MOVEQ	#0,D5
	MOVEQ	#0,D6
	MOVE.L	D0,A1
	MOVE.L	D0,A2
	MOVE.L	D0,A3
	MOVE.L	D0,A4
	MOVE.L	D0,A5
	MOVE.L	D0,A6
	MOVE	#200-1,D7
.EFF	MOVEM.L	D0-D6/A1-A6,(A0)
	MOVEM.L	D0-D6/A1-A6,4*13(A0)
	MOVEM.L	D0-D6/A1-A6,4*13*2(A0)
	MOVE.L	D0,4*13*3(A0)
	LEA	160(A0),A0
	DBF	D7,.EFF
	RTS

AFFICH	LEA	BUF_PTS,A0
	JSR	PROJETTE

	MOVE	#$4E71,MOD_PLAN

	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X1(a0),(a1)+
	move.l	X9(a0),(a1)+
	move.l	X4(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY

	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X2(a0),(a1)+
	move.l	X3(a0),(a1)+
	move.l	X9(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY

	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X8(a0),(a1)+
	move.l	X1(a0),(a1)+
	move.l	X13(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY

	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X13(a0),(a1)+
	move.l	X4(a0),(a1)+
	move.l	X5(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY

	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X8(a0),(a1)+
	move.l	X7(a0),(a1)+
	move.l	X12(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY

	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X12(a0),(a1)+
	move.l	X2(a0),(a1)+
	move.l	X1(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY

	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X4(a0),(a1)+
	move.l	X3(a0),(a1)+
	move.l	X11(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY

	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X11(a0),(a1)+
	move.l	X6(a0),(a1)+
	move.l	X5(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY

	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X2(a0),(a1)+
	move.l	X7(a0),(a1)+
	move.l	X14(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY

	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X14(a0),(a1)+
	move.l	X6(a0),(a1)+
	move.l	X3(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY

	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X7(a0),(a1)+
	move.l	X10(a0),(a1)+
	move.l	X6(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY

	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X10(a0),(a1)+
	move.l	X8(a0),(a1)+
	move.l	X5(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY
	RTS

AFFICH2	LEA	BUF_PTS,A0
	JSR	PROJETTE

	MOVE.L	SAVE_ADR_TABLOS,A3

	MOVE	#$4E71,MOD_PLAN
	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X1(a0),(a1)+
	move.l	X9(a0),(a1)+
	move.l	X4(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY2

	MOVE	#$5446,MOD_PLAN
	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X2(a0),(a1)+
	move.l	X3(a0),(a1)+
	move.l	X9(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY2

	MOVE	#$5446,MOD_PLAN
	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X8(a0),(a1)+
	move.l	X1(a0),(a1)+
	move.l	X13(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY2

	MOVE	#$5446,MOD_PLAN
	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X13(a0),(a1)+
	move.l	X4(a0),(a1)+
	move.l	X5(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY2

	MOVE	#$4E71,MOD_PLAN
	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X8(a0),(a1)+
	move.l	X7(a0),(a1)+
	move.l	X12(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY2

	MOVE	#$5846,MOD_PLAN
	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X12(a0),(a1)+
	move.l	X2(a0),(a1)+
	move.l	X1(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY2

	MOVE	#$5846,MOD_PLAN
	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X4(a0),(a1)+
	move.l	X3(a0),(a1)+
	move.l	X11(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY2

	MOVE	#$4E71,MOD_PLAN
	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X11(a0),(a1)+
	move.l	X6(a0),(a1)+
	move.l	X5(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY2

	MOVE	#$4E71,MOD_PLAN
	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X2(a0),(a1)+
	move.l	X7(a0),(a1)+
	move.l	X14(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY2

	MOVE	#$4E71,MOD_PLAN
	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X14(a0),(a1)+
	move.l	X6(a0),(a1)+
	move.l	X3(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY2

	MOVE	#$5446,MOD_PLAN
	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X7(a0),(a1)+
	move.l	X10(a0),(a1)+
	move.l	X6(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY2

	MOVE	#$5846,MOD_PLAN
	lea	COORD,a0
	lea	face_en_cours+2,a1
	move.l	X10(a0),(a1)+
	move.l	X8(a0),(a1)+
	move.l	X5(a0),(a1)+
	lea	face_en_cours,a0
	JSR	RT_POLY2

	MOVE.L	A3,SAVE_ADR_TABLOS
	RTS

face_en_cours	dC.w	3
	ds.l	3

PROJETTE	LEA	CORES_X,A2
	MOVE.L	SCREEN2,A3
	LEA	COEFF+410*2,A1
	LEA	COORD,A5
	MOVE.W	#NB_PTS_-1,D7
AFF_ALL	MOVE.W	(A0)+,D0
	MOVE.W	(A0)+,D1
	MOVE.W	(A0)+,D2
	ADD.W	Z_BASE,D2
	ADD.W	D2,D2
	MOVE.W	(A1,D2.W),D2
	MULS.W	D2,D0
	ASR.L	#8,D0
	MULS.W	D2,D1
	ASR.L	#8,D1
MOD_X	ADDI.W	#160,D0
MOD_Y	ADDI.W	#100,D1
	MOVE	D0,(A5)+
	MOVE	D1,(A5)+
	;MULS.W	#160,D1
	;ADD.W	D0,D0
	;ADD.W	D0,D0
	;ADD.W	2(A2,D0.W),D1
	;MOVE.W	(A2,D0.W),D0
	;OR.W	D0,(A3,D1.W)
	DBRA	D7,AFF_ALL
	RTS

COORD	DCB	2*NB_PTS_,0

;ENTRêES : A0=TABLE DE POINTS ( .W:NB DE POINTS, ET LES POINTS)
;          A1=TABLE D'ANGLE ( ANGLE X, ANGLE Y, ANGLE Z)
;          A6=TABLE DE TRANSLATION ( U_X, U_Y, U_Z)
;          A2=TABLE DE DESTINATION POUR LES POINTS

;Formules de rotation 3 axes:
;X'=X[SIN(T)SIN(U)SIN(V)+COS(T)COS(V)]+Y[COS(T)SIN(U)SIN(V)-SIN(T)COS(V)]+Z[COS(U)SIN(V)]
;Y'=X[SIN(T)COS(U)]+Y[COS(T)COS(U)]-ZSIN(U)
;Z'=X[SIN(T)SIN(U)COS(V)-COS(T)SIN(V)]+Y[COS(T)SIN(U)COS(V)+SIN(T)SIN(V)]+Z[COS(U)COS(V)]

ROTATE	LEA	SINUS(PC),A4	;SINUS
	LEA	LONG_SINUS/4(A4),A3	;COSINUS

	MOVE.W	(A1)+,D0	;ANGLE_X
	ADD.W	D0,D0
	MOVE.W	(A3,D0.W),D1	;COSINUS TETA_X
	MOVE.W	(A4,D0.W),D0	;SINUS TETA_X

	MOVE.W	(A1)+,D2	;ANGLE_Y
	ADD.W	D2,D2
	MOVE.W	(A3,D2.W),D3	;COSINUS TETA_Y
	MOVE.W	(A4,D2.W),D2	;SINUS TETA_Y

	MOVE.W	(A1)+,D4	;ANGLE_Z
	ADD.W	D4,D4
	MOVE.W	(A3,D4.W),D5	;COSINUS TETA_Z
	MOVE.W	(A4,D4.W),D4	;SINUS TETA_Z

	LEA	MATRICE,A4
	LEA	LOGARITHMES+512*2(PC),A3
	;ON FABRIQUE SIN(T)*SIN(U)*SIN(V)+COS(T)*COS(V)
	MOVE.W	D0,D6	;D6=SIN(T)
	MULS.W	D2,D6	;D6=SIN(T)*SIN(U)
	ASR.L	#8,D6
	MULS.W	D4,D6	;D6=SIN(T)*SIN(U)*SIN(V)
	MOVE.W	D1,D7	;D7=COS(T)
	MULS.W	D5,D7	;D7=COS(T)*COS(V)
	ADD.L	D7,D6
	ASR.L	#8,D6
	ADD.W	D6,D6
	TST.W	D6
	BNE.S	.OK1
	MOVEQ	#1*2,D6
.OK1	MOVE.W	(A3,D6.W),(A4)+

	;ON FABRIQUE COS(T)*SIN(U)*SIN(V)-SIN(T)*COS(V)
	MOVE.W	D1,D6	;D6=COS(T)
	MULS.W	D2,D6	;D6=COS(T)*SIN(U)
	ASR.L	#8,D6
	MULS.W	D4,D6	;D6=COS(T)*SIN(U)*SIN(V)
	MOVE.W	D0,D7	;D7=SIN(T)
	MULS.W	D5,D7	;D7=SIN(T)*COS(V)
	SUB.L	D7,D6
	ASR.L	#8,D6
	ADD.W	D6,D6
	TST.W	D6
	BNE.S	.OK2
	MOVEQ	#1*2,D6
.OK2	MOVE.W	(A3,D6.W),(A4)+

	;ON FABRIQUE COS(U)*SIN(V)
	MOVE.W	D3,D6	;D6=COS(U)
	MULS.W	D4,D6	;D6=COS(U)*SIN(V)
	ASR.L	#8,D6
	ADD.W	D6,D6
	TST.W	D6
	BNE.S	.OK3
	MOVEQ	#1*2,D6
.OK3	MOVE.W	(A3,D6.W),(A4)+

	;ON FABRIQUE SIN(T)*COS(U)
	MOVE.W	D0,D6	;D6=SIN(T)
	MULS.W	D3,D6	;D6=SIN(T)*COS(U)
	ASR.L	#8,D6
	ADD.W	D6,D6
	TST.W	D6
	BNE.S	.OK4
	MOVEQ	#1*2,D6
.OK4	MOVE.W	(A3,D6.W),(A4)+

	;ON FABRIQUE COS(T)*COS(U)
	MOVE.W	D1,D6	;D6=COS(T)
	MULS.W	D3,D6	;D6=COS(T)*COS(U)
	ASR.L	#8,D6
	ADD.W	D6,D6
	TST.W	D6
	BNE.S	.OK5
	MOVEQ	#1*2,D6
.OK5	MOVE.W	(A3,D6.W),(A4)+

	;ON FABRIQUE -SIN(U)
	MOVE.W	D2,D6
	NEG.W	D6
	ADD.W	D6,D6
	TST.W	D6
	BNE.S	.OK6
	MOVEQ	#1*2,D6
.OK6	MOVE.W	(A3,D6.W),(A4)+

	;ON FABRIQUE SIN(T)*SIN(U)*COS(V)-COS(T)*SIN(V)
	MOVE.W	D0,D6	;D6=SIN(T)
	MULS.W	D2,D6	;D6=SIN(T)*SIN(U)
	ASR.L	#8,D6
	MULS.W	D5,D6	;D6=SIN(T)*SIN(U)*COS(V)
	MOVE.W	D1,D7	;D7=COS(T)
	MULS.W	D4,D7	;D7=COS(T)*SIN(V)
	SUB.L	D7,D6
	ASR.L	#8,D6
	ADD.W	D6,D6
	TST.W	D6
	BNE.S	.OK7
	MOVEQ	#1*2,D6
.OK7	MOVE.W	(A3,D6.W),(A4)+

	;ON FABRIQUE COS(T)*SIN(U)*COS(V)+SIN(T)*SIN(V)
	MOVE.W	D1,D6	;D6=COS(T)
	MULS.W	D2,D6	;D6=COS(T)*SIN(U)
	ASR.L	#8,D6
	MULS.W	D5,D6	;D6=COS(T)*SIN(U)*COS(V)
	MOVE.W	D0,D7	;D7=SIN(T)
	MULS.W	D4,D7	;D7=SIN(T)*SIN(V)
	ADD.L	D7,D6
	ASR.L	#8,D6
	ADD.W	D6,D6
	TST.W	D6
	BNE.S	.OK8
	MOVEQ	#1*2,D6
.OK8	MOVE.W	(A3,D6.W),(A4)+

	;ON FABRIQUE COS(U)*COS(V)
	MULS.W	D3,D5	;D5=COS(U)*COS(V)
	ASR.L	#8,D5
	ADD.W	D5,D5
	TST.W	D5
	BNE.S	.OK9
	MOVEQ	#1*2,D5
.OK9	MOVE.W	(A3,D5.W),(A4)+

	MOVE.W	(A6)+,D0
	ADD.W	D0,D0	;U_X*2
	MOVE.W	D0,TRANSLATE_X
	MOVE.W	(A6)+,D0
	ADD.W	D0,D0	;U_Y*2
	MOVE.W	D0,TRANSLATE_Y
	MOVE.W	(A6),D0
	ADD.W	D0,D0	;U_Z*2
	MOVE.W	D0,TRANSLATE_Z

	MOVE.W	(A0)+,D7	;D7=NB DE POINTS
	SUBQ.W	#1,D7
	MOVE.L	#MATRICE,D6
	LEA	BUF_EXP,A5

ROTATE_ALL	MOVE.L	D6,A4
	MOVE.W	(A0)+,D0	;X*2
TRANSLATE_X = *+2
	ADDI.W	#$1234,D0
	MOVE.W	(A0)+,D1	;Y*2
TRANSLATE_Y = *+2
	ADDI.W	#$1234,D1
	MOVE.W	(A0)+,D2	;Z*2
TRANSLATE_Z = *+2
	ADDI.W	#$1234,D2

	REPT	3
	MOVE.W	(A3,D0.W),D3	;LOG(X)
	ADD.W	(A4)+,D3	;LOG(X)+LOG(COEFF)
	MOVE.W	(A5,D3.W),D3	;D3=X*COEFF
	MOVE.W	(A3,D1.W),D4	;LOG(Y)
	ADD.W	(A4)+,D4	;LOG(Y)+LOG(COEFF)
	MOVE.W	(A5,D4.W),D4	;D4=Y*COEFF
	MOVE.W	(A3,D2.W),D5	;LOG(Z)
	ADD.W	(A4)+,D5	;LOG(Z)+LOG(COEFF)
	MOVE.W	(A5,D5.W),D5	;D5=Z*COEFF
	ADD.W	D4,D3
	ADD.W	D5,D3
	MOVE.W	D3,(A2)+
	ENDR

	DBRA	D7,ROTATE_ALL
	RTS

PREPA_LOG_EXP	;ON ARRANGE LA PARTIE NEGATIVE DE LA TABLE DES LOG.
	LEA	LOGARITHMES(PC),A0
	MOVE.W	#512-1,D7
LOG_NEGATIFS	MOVE.W	(A0),D0
	ADD.W	D0,D0
	ADDI.W	#LONG_EXP/2,D0
	MOVE.W	D0,(A0)+
	DBRA	D7,LOG_NEGATIFS
	MOVE.W	#LONG_EXP/2,D7
	MULU.W	#3,D7
	MOVE.W	D7,(A0)+	;D7=LONG_EXP*3 (ZERO)
	MOVE.W	#512-1,D7
LOG_POSITIFS	MOVE.W	(A0),D0
	ADD.W	D0,D0
	MOVE.W	D0,(A0)+	;LOG*2
	DBRA	D7,LOG_POSITIFS

;ON CREE LA PARTIE NEGATIVE ET LA 2EME PARTIE POSITIVE DES EXPONENTIELLES.
	LEA	EXPONENTIELLES(PC),A0
	LEA	BUF_EXP,A1
	LEA	LONG_EXP/2(A1),A2
	LEA	LONG_EXP/2(A2),A3
	MOVE.W	#LONG_EXP/4-1,D7
MAKE_EXP	MOVEQ	#0,D0
	MOVE.L	(A0)+,D0
	LSR.L	#8,D0	;VALEUR REELLE DU RESULTAT
	MOVE.W	D0,(A1)+
	MOVE.W	D0,(A3)+
	NEG.W	D0
	MOVE.W	D0,(A2)+
	DBRA	D7,MAKE_EXP

;ON CREE LES 2 TABLES DE ZERO LONGUES CHACUNES DE LONG_EXP.
	LEA	BUF_EXP+(LONG_EXP/2)*3,A0
	MOVE.W	#(LONG_EXP/4)*2-1,D7
MAKE_ZERO_TABLE	CLR.W	(A0)+
	DBRA	D7,MAKE_ZERO_TABLE
	RTS

*** Partie affichage
CHOICE	DC	0	;0=MOVE
				;1=OR
INIT_ROUT_POLY	LEA	BUF_COD_GEN,A0
	LEA	TABLE_ADR_COD,A1

	MOVE.L	#RETOUR_POLY,(A1)+
	MOVEQ	#9-1,D3
.GO	MOVE.L	#RT_COOL,(A1)+
	DBRA	D3,.GO

	MOVE.W	#$FFFF,D0	;1ER MOTIF
	MOVE.W	#$8000,D1	;DERNIER MOTIF
	MOVEQ	#0,D3	;DECALAGE

	MOVEQ	#16-1,D6
.DECAL	
	MOVEQ	#16+1,D5
	ADD.W	#18*16,D5	;D5=LONGUEUR DE LA LIGNE
	ADD.W	D3,D5

	MOVE.W	#-144,D4
	MOVEQ	#18-1,D7
.COPY_MOVED7	BSR	POZ_ADRESSE
	MOVE.W	#$3B47,(A0)+	;MOVE.W D7,d16(A5)
	MOVE.W	D4,(A0)+
	ADDQ.W	#8,D4
	SUBI.W	#16,D5
	DBRA	D7,.COPY_MOVED7

	MOVE.W	#16+1,D5
	ADD.W	D3,D5
	BSR	POZ_ADRESSE
	CMPI.W	#-1,D0
	BNE.S	.PAS_D7_1
	MOVE.W	#$3887,(A0)+	;MOVE.W D7,(A4)
	BRA.S	.RETOUR_1
.PAS_D7_1
	TST	CHOICE
	BNE.S	.OR1
	MOVE.W	#$38BC,(A0)+	;MOVE.W #$Imm,(A4)
	BRA.S	.MOV1
.OR1	MOVE	#$0054,(A0)+	OR.W #$Imm,(A4)
.MOV1	MOVE.W	D0,(A0)+
.RETOUR_1	MOVE.W	#1,D5
	ADD.W	D3,D5
	BSR	POZ_ADRESSE
	CMPI.W	#-1,D1
	BNE.S	.PAS_D7_2
	MOVE.W	#$3A87,(A0)+	;MOVE.W D7,(A5)
	BRA.S	.RETOUR_2
.PAS_D7_2
	TST	CHOICE
	BNE.S	.OR2
	MOVE.W	#$3ABC,(A0)+	;MOVE.W #$Imm,(A5)
	BRA.S	.MOV2
.OR2	MOVE	#$0055,(A0)+	OR "             "
.MOV2	MOVE.W	D1,(A0)+
.RETOUR_2
	BSR	COPY_RT_COOL

	ASR.W	#1,D1
	ADDQ.W	#1,D3	;LONGUEUR SUIVANT
	DBRA	D6,.DECAL

	LEA	TABLE_ADR_COD+1320,A1

	MOVE.W	#$7FFF,D3	;1ER MOTIF
	MOVEQ	#14,D5

	MOVEQ	#14,D2
ALL_RT	
	MOVE.L	#RETOUR_POLY,(A1)+
	MOVEQ	#9-1,D0
.GO	MOVE.L	#RT_COOL,(A1)+
	DBRA	D0,.GO

	MOVE.W	#1,A3

	MOVEQ	#0,D0
	MOVE.W	D5,D6
LITTLE	BSR	POZ_ADRESSE2
	BSET	D6,D0
	CMPI.W	#-1,D0
	BNE.S	.PAS_D7_LITTLE
	MOVE.W	#$3887,(A0)+
	BRA.S	.RETOUR_LITTLE
.PAS_D7_LITTLE
	TST	CHOICE
	BNE.S	.OR3
	MOVE.W	#$38BC,(A0)+	;MOVE.W #$Imm,(A4)
	BRA.S	.MOV3
.OR3	MOVE	#$0054,(A0)+
.MOV3	MOVE.W	D0,(A0)+

.RETOUR_LITTLE
	BSR	COPY_RT_COOL

	ADDQ.W	#1,A3
	DBRA	D6,LITTLE

	MOVE.W	D3,D0
	MOVE.W	#$8000,D1	;DERNIER MOTIF

	MOVEQ	#16-1,D6
DECAL
	MOVE.W	#18*16,A3
	ADD.W	D5,A3
	ADDQ.W	#1,A3
	MOVEQ	#16,D4
	SUB.W	D6,D4
	ADDA.W	D4,A3

	MOVE.W	#-144,D4
	MOVEQ	#18-1,D7
COPY_MOVED7	BSR	POZ_ADRESSE2
	MOVE.W	#$3B47,(A0)+	;MOVE.W D7,d16(A5)
	MOVE.W	D4,(A0)+
	ADDQ.W	#8,D4
	LEA	-16(A3),A3
	DBRA	D7,COPY_MOVED7

	MOVE.W	D5,A3
	ADDQ.W	#1,A3
	MOVEQ	#16,D4
	SUB.W	D6,D4
	ADDA.W	D4,A3
	BSR	POZ_ADRESSE2
	CMPI.W	#-1,D0
	BNE.S	.PAS_D7_3
	MOVE.W	#$3887,(A0)+	;MOVE.W D7,(A4)
	BRA.S	.RETOUR_3
.PAS_D7_3
	TST	CHOICE
	BNE.S	.OR4
	MOVE.W	#$38BC,(A0)+	;MOVE.W #$Imm,(A4)
	BRA.S	.MOV4
.OR4	MOVE	#$0054,(A0)+
.MOV4	MOVE.W	D0,(A0)+
.RETOUR_3	CMPI.W	#-1,D1
	BNE.S	.PAS_D7_4
	MOVE.W	#$3A87,(A0)+	;MOVE.W D7,(A5)
	BRA.S	.RETOUR_4
.PAS_D7_4
	TST	CHOICE
	BNE.S	.OR5
	MOVE.W	#$3ABC,(A0)+	;MOVE.W #$Imm,(A5)
	BRA.S	.MOV5
.OR5	MOVE	#$0055,(A0)+
.MOV5	MOVE.W	D1,(A0)+
.RETOUR_4
	BSR	COPY_RT_COOL

	ASR.W	#1,D1
	DBRA	D6,DECAL

	SUBQ.W	#1,D5
	LSR.W	#1,D3
	LEA	1280(A1),A1
	DBRA	D2,ALL_RT

*******
TBL4:	LEA	TABLE_A4,A0
	MOVE	#319,D7
.DEBT	CLR.L	(A0)+
	DBF	D7,.DEBT

	LEA	MINI_TABLE,A1
	MOVEQ	#0,D6	D6=X
	MOVEQ	#20-1,D7
.F	MOVEQ	#16-1,D0
.SXTEEN	MOVE	D6,(A0)+
	MOVE	(A1),(A0)+
	ADDQ	#4,D6
	DBF	D0,.SXTEEN
	ADDQ	#2,A1
	DBF	D7,.F

	MOVE	#319,D7
.FINT	MOVE	#319*4,(A0)+
	MOVE	#152,(A0)+
	;CLR	(A0)+
	DBF	D7,.FINT
TBL2:
	LEA	TABLE_A2,A0
	MOVE	#319,D7
.DEBT	CLR.L	(A0)+
	DBF	D7,.DEBT

	LEA	MINI_TABLE,A1
	MOVEQ	#0,D6	D6=X
	MOVEQ	#20-1,D7
.F	MOVEQ	#16-1,D0
.SXTEEN	MOVE	(A1),(A0)+
	MOVE	D6,(A0)
	MOVE	D6,D5
	LSR	#2,D5
	AND	#15,D5
	MULU	#1320,D5
	SUB	D5,(A0)+
	ADDQ	#4,D6
	DBF	D0,.SXTEEN
	ADDQ	#2,A1
	DBF	D7,.F

	MOVE	#319,D7
.FINT	;CLR	(A0)+
	MOVE	#152,(A0)+
	MOVE	#319*4,(A0)+
	DBF	D7,.FINT

	RTS

MINI_TABLE
N	SET	0
	REPT	20
	DC	N
N	SET	N+8
	ENDR


POZ_ADRESSE2	MOVEM.L	D5/A0,-(SP)
	MOVE.W	A3,D5
	SUBQ.W	#1,D5
	ADD.W	D5,D5
	ADD.W	D5,D5
;	SUBA.L	#BUF_COD_GEN,A0
	MOVE.L	A0,(A1,D5.W)
	MOVEM.L	(SP)+,D5/A0
	RTS
	

POZ_ADRESSE	MOVEM.L	D5/A0,-(SP)
	SUBQ.W	#1,D5
	ADD.W	D5,D5
	ADD.W	D5,D5
;	SUBA.L	#BUF_COD_GEN,A0
	MOVE.L	A0,(A1,D5.W)
	MOVEM.L	(SP)+,D5/A0
	RTS
	
COPY_RT_COOL	LEA	RT_COOL,A6
	MOVE.W	#LONG_RT_COOL,D7
.COPY	MOVE.W	(A6)+,(A0)+
	DBRA	D7,.COPY
	RTS

RT_COOL
	ADD.L	D5,D6	1  PROCHAINE LIGNE:+160
	MOVE.L	D6,A4	1  A3=ADR ECRAN EN .W, WARNING!
	MOVE.L	A4,A5	1  A6=ECRAN TOO (LE A5 DE FULBERT)

	MOVEQ	#0,D3	1
	MOVE.B	(A3)+,D3	2
	ADD	D3,A5	2

	MOVEQ	#0,D3	1
	MOVE.B	(A3)+,D3	2
	ADD	D3,A4	2

	MOVE	(A3)+,D3	2
	MOVE.L	(A6,D3.W),A2	5
	JMP	(A2)	2

LONG_RT_COOL = ((*-RT_COOL)/2)-1


	ADD.W	D5,D6	1  PROCHAINE LIGNE:+160
	MOVE.L	D6,A4	1  A3=ADR ECRAN EN .W, WARNING!
	MOVE.L	A4,A5	1  A6=ECRAN TOO (LE A5 DE FULBERT)
	MOVE.L	D4,A2	1  D4=A2=TABLE_A2

	MOVE.W	(A1)+,D1	2  X2
	ADD.W	D1,D1	1  
	ADD.W	D1,D1	1

	MOVE.L	(A3,D1.W),D3	5
	ADD	D3,A5	2
	SWAP	D3	1

	MOVE.W	(A0)+,D1	2  X1
	ADD	D1,D1	1
	ADD	D1,D1	1
	ADD	D1,A2	2  A2=TABLE_A2+X1*4
	ADD	(A2)+,A4	3  OFFSET. A3=>1ER MOT
	SUB	(A2),D3	2  (A2)=X1*2-LE DêCALAGE... RUSê, HEIN?
	   ;D'OU D3=X2*2-(X1*2-DêCALAGE)=(X2-X1)*2+DêCALAGE, ZOU.
	MOVE.L	(A6,D3.W),A2	;5
	JMP	(A2)	;2

;TOTAL:31 NOPS. +58=89 NOPS.

RT_POLY	MOVE.L	A0,ADR_DEPART

	LEA	2(A0),A1	;A1 POINTE SUR LES POINTS
	MOVE.W	(A1),D3
	SUB.W	4(A1),D3
	MOVE.W	2(A1),D4
	SUB.W	6(A1),D4
	MOVE.W	8(A1),D6
	SUB.W	4(A1),D6
	MOVE.W	$A(A1),D5
	SUB.W	6(A1),D5
	MULS.W	D3,D5
	MULS.W	D6,D4
	SUB.L	D4,D5
	BGT.S	.VISIBLE
	RTS
.VISIBLE
	MOVE	#25,REMP_GAUCHE+249*2
	MOVE	#15,REMP_DROIT+249*2

;	LEA	REMP_GAUCHE,A1
;	MOVE	#(500/2)-1,D6
;.EFF_TBX	CLR.L	(A1)+
;	DBF	D6,.EFF_TBX

	MOVEQ	#0,D0
	MOVEQ	#0,D1
	MOVEQ	#0,D2
	MOVEQ	#0,D3
	MOVEQ	#0,D4
	MOVEQ	#0,D5
	MOVEQ	#0,D6
	MOVEQ	#0,D7

	CMPI.B	#$F,$FFFFFC02.W
	BNE.S	.NO_TIMEB
	MOVE	#$034,$FFFF8240.W
.NO_TIMEB

	MOVE.W	(A0)+,D0	;NB DE POINTS COMPOSANT LA SURFACE
	LEA	BUF_EXAM,A1
	MOVE.L	A0,A2
	SUBQ.W	#1,D0
	MOVE.W	D0,NB_PTS
.COPYING	MOVE.L	(A0)+,(A1)+
	DBRA	D0,.COPYING
	MOVE.L	(A2),(A1)+

	LEA	BUF_EXAM,A0
	LEA	BUF_GAUCHE,A2
	LEA	BUF_DROIT,A3
	ADDQ.W	#4,A0
	MOVE.W	-2(A0),D3	;Y DE REFERENCE
NB_PTS = *+2
	MOVE.W	#$1234,D0
	MOVEQ	#-1,D6
	MOVEQ	#-1,D7
ALL_PTS	MOVE.W	(A0),D1	;X
	MOVE.W	2(A0),D2	;Y
	CMP.W	D2,D3
	BGE.S	ON_MONTE
ON_DESCEND	MOVE.L	-4(A0),(A2)+
	MOVE.L	(A0)+,(A2)+
	MOVE.W	D2,D3
	ADDQ.W	#1,D6
	DBRA	D0,ALL_PTS
	BRA.S	FINITO
ON_MONTE	MOVE.L	-4(A0),(A3)+
	MOVE.L	(A0)+,(A3)+
	MOVE.W	D2,D3
	ADDQ.W	#1,D7
	DBRA	D0,ALL_PTS
FINITO	;ICI LES TABLEAU BUF_GAUCHE ET BUF_DROIT SONT CONSTITUêS
	;D6=NB DE PTS-1 DANS BUF_GAUCHE
	;D7=NB DE PTS-1 DANS BUF_DROIT

	LEA	BUF_GAUCHE,A0
MAKE_REMP_GAUCHE
	LEA	REMP_GAUCHE,A1
	MOVE.W	(A0)+,D0	;X1
	MOVE.W	(A0)+,D1	;Y1
	MOVE.W	(A0)+,D2	;X2
	MOVE.W	(A0)+,D3	;Y2
	BSR	CLIPPING_Y
	TST.W	D5
	BLT.S	.NEXT
	SUB.W	D1,D3	;HAUTEUR-1 DU SEGMENT
	BEQ.S	.NEXT

	ADD.W	D1,D1
	ADDA.W	D1,A1

	ADDQ.W	#1,D3
	SUB.W	D0,D2
	BNE.S	.PAS_VERTICALE
.VERTICALE	SUBQ.W	#1,D3
.PUT	MOVE.W	D0,(A1)+
	DBRA	D3,.PUT
	BRA.S	.NEXT
.PAS_VERTICALE	EXT.L	D2
	MOVEQ	#8,D4
	ASL.L	D4,D2
	DIVS.W	D3,D2
	EXT.L	D2
	ASL.L	#8,D2
	SUBQ.W	#2,D3
	EXT.L	D0
	MOVEQ	#16,D4
	MOVE.W	D0,(A1)+
	ASL.L	D4,D0
.MK_X	ADD.L	D2,D0
	MOVE.L	D0,D1
	SWAP	D1
	MOVE.W	D1,(A1)+
	DBRA	D3,.MK_X
.NEXT	DBRA	D6,MAKE_REMP_GAUCHE

	LEA	BUF_DROIT,A0
MAKE_REMP_DROIT	LEA	REMP_DROIT,A1
	MOVE.W	(A0)+,D0	;X1
	MOVE.W	(A0)+,D1	;Y1
	MOVE.W	(A0)+,D2	;X2
	MOVE.W	(A0)+,D3	;Y2
	BSR	CLIPPING_Y
	TST.W	D5
	BLT.S	.NEXT
	SUB.W	D3,D1	;HAUTEUR-1 DU SEGMENT
	BEQ.S	.NEXT

	ADD.W	D3,D3
	ADDA.W	D3,A1

	ADDQ.W	#1,D1
	SUB.W	D2,D0
	BNE.S	.PAS_VERTICALE
.VERTICALE	SUBQ.W	#1,D1
.PUT	MOVE.W	D2,(A1)+
	DBRA	D1,.PUT
	BRA.S	.NEXT
.PAS_VERTICALE	EXT.L	D0
	MOVEQ	#8,D4
	ASL.L	D4,D0
	DIVS.W	D1,D0
	EXT.L	D0
	ASL.L	#8,D0
	SUBQ.W	#2,D1
	MOVE.W	D2,(A1)+
	EXT.L	D2
	MOVEQ	#16,D4
	ASL.L	D4,D2
.MK_X	ADD.L	D0,D2
	MOVE.L	D2,D3
	SWAP	D3
	MOVE.W	D3,(A1)+
	DBRA	D1,.MK_X
.NEXT	DBRA	D7,MAKE_REMP_DROIT

*****
ADR_DEPART= *+2
	LEA	$12345678,A0
	MOVE.W	(A0)+,D7
	SUBQ.W	#1,D7
	MOVE.W	#-1000,D0	;MAXIMUM
	MOVE.W	#20000,D1	;MINIMUM
.TEST_MAX	CMP.W	2(A0),D0
	BGE.S	.FUCK
	MOVE.W	2(A0),D0
.FUCK	CMP.W	2(A0),D1
	BLE.S	.FUCK_2
	MOVE.W	2(A0),D1
.FUCK_2	ADDQ.W	#4,A0
	DBRA	D7,.TEST_MAX

	;D0 = Y MAXIMUM
	;D1 = Y MINIMUM

	TST.W	D0
	BGE.S	.OK_Y_MIN2
	MOVEQ	#0,D0
.OK_Y_MIN2
	CMPI.W	#200,D0
	BLT.S	.OK_Y_MAX
	MOVE.W	#199,D0
.OK_Y_MAX
	TST.W	D1
	BGE.S	.OK_Y_MIN
	MOVEQ	#0,D1
.OK_Y_MIN
	CMPI.W	#200,D1
	BLT.S	.OK_Y_MAX2
	MOVE.W	#199,D1
.OK_Y_MAX2

	CMPI.B	#$F,$FFFFFC02.W
	BNE.S	.NO_TIMEA
	MOVE	#$023,$FFFF8240.W
.NO_TIMEA

INIT	LEA	REMP_GAUCHE,A0
	LEA	REMP_DROIT,A1
	ADDQ.W	#1,D0
	ADD.W	D0,D0
	MOVE.W	#15,(A1,D0.W)
	MOVE.W	#$9999,2(A1,D0.W)
	MOVE.W	#25,(A0,D0.W)
	ADD.W	D1,D1
	ADDA.W	D1,A0
	ADDA.W	D1,A1
	MULU.W	#80,D1       ;D1=Y_MIN*160 (POUR ADD ECRAN)
******
	;JMP	PRêCALC


*** ROUTINE NORMALE

;	LEA	TABLE_ADR_COD+40,A6
;	MOVE	#-1,D7
;	MOVE.L	SCREEN2,D6
;MOD_PLAN	NOP
;	ADD.W	D1,D6	;...+Y_MIN*160
;	SUBI.W	#160,D6
;	MOVE.L	#TABLE_A2+320*4,D4
;	MOVE.W	#160,D5
;	LEA	TABLE_A4+320*4,A3
;	MOVEQ	#0,D2
;
;	ADD.W	D5,D6	1  PROCHAINE LIGNE:+160
;	MOVE.L	D6,A4	1  A3=ADR ECRAN EN .W, WARNING!
;	MOVE.L	A4,A5	1  A6=ECRAN TOO (LE A5 DE FULBERT)
;	MOVE.L	D4,A2	1  D4=A2=TABLE_A2
;	MOVE.W	(A1)+,D1	2  X2
;	ADD.W	D1,D1	1  
;	ADD.W	D1,D1	1
;	MOVE.L	(A3,D1.W),D3	5
;	ADD	D3,A5	2
;	SWAP	D3	1
;	MOVE.W	(A0)+,D1	2  X1
;	ADD	D1,D1	1
;	ADD	D1,D1	1
;	ADD	D1,A2	2  A2=TABLE_A2+X1*4
;	ADD	(A2)+,A4	3  OFFSET. A3=>1ER MOT
;	SUB	(A2),D3	2  (A2)=X1*2-LE DêCALAGE*1320... RUSê, HEIN?   ;D'OU D3=X2*2-(X1*2-DêCALAGE)=(X2-X1)*2+DêCALAGE*1320, ZOU.
;	MOVE.L	(A6,D3.W),A2
;	JMP	(A2)
***** PREC
PRêCALC
	;LEA	TABLE_ADR_COD+40,A6
	;MOVE	#-1,D7
	;MOVE.L	SCREEN2,D6
;MOD_PLAN	NOP
;	ADD.W	D1,D6	;...+Y_MIN*160
;	SUBI.W	#160,D6
	MOVE.L	#TABLE_A2+320*4,D4
;	MOVE.W	#160,D5
	LEA	TABLE_A4+320*4,A3
;	MOVEQ	#0,D2

	MOVE.L	SAVE_ADR_TABLOS,A4
	MOVE	D1,(A4)+
.LOOP_PRê
	;ADD.W	D5,D6	1  PROCHAINE LIGNE:+160
	;MOVE.L	D6,A4	1  A3=ADR ECRAN EN .W, WARNING!
	;MOVE.L	A4,A5	1  A6=ECRAN TOO (LE A5 DE FULBERT)
	MOVE.L	D4,A2	1  D4=A2=TABLE_A2


	MOVE.W	(A1)+,D1	2  X2
	CMPI	#$9999,D1
	BNE.S	.NOT_END
	MOVE.L	A4,SAVE_ADR_TABLOS
	RTS
.NOT_END	ADD.W	D1,D1	1  
	ADD.W	D1,D1	1
	MOVE.L	(A3,D1.W),D3	5
	;ADD	D3,A5	2
	MOVE.B	D3,(A4)+
	SWAP	D3	1
	MOVE.W	(A0)+,D1	2  X1
	ADD	D1,D1	1
	ADD	D1,D1	1
	ADD	D1,A2	2  A2=TABLE_A2+X1*4
	;ADD	(A2)+,A4	3  OFFSET. A3=>1ER MOT
	MOVE	(A2)+,D1
	MOVE.B	D1,(A4)+

	SUB	(A2),D3	2  (A2)=X1*2-LE DêCALAGE*1320... RUSê, HEIN?   ;D'OU D3=X2*2-(X1*2-DêCALAGE)=(X2-X1)*2+DêCALAGE*1320, ZOU.
	MOVE	D3,(A4)+

	;MOVE.L	(A6,D3.W),A2
	;JMP	(A2)
	BRA.S	.LOOP_PRê
RETOUR_POLY	RTS

RT_POLY2
	LEA	2(A0),A1	;A1 POINTE SUR LES POINTS
	MOVE.W	(A1),D3
	SUB.W	4(A1),D3
	MOVE.W	2(A1),D4
	SUB.W	6(A1),D4
	MOVE.W	8(A1),D6
	SUB.W	4(A1),D6
	MOVE.W	$A(A1),D5
	SUB.W	6(A1),D5
	MULS.W	D3,D5
	MULS.W	D6,D4
	SUB.L	D4,D5
	BGT.S	.VISIBLE
	RTS
.VISIBLE
	MOVEQ	#0,D1
	MOVE	(A3)+,D1
APPEL	;MOVE.L	SAVE_ADR_TAB,A3

	LEA	TABLE_ADR_COD+40,A6
	MOVEQ	#-1,D7
	MOVE.L	SCREEN2,D6
MOD_PLAN	NOP
	ADD.L	D1,D6	;...+Y_MIN*160
	SUBI.L	#160,D6
	;MOVE.L	#TABLE_A2+320*4,D4
	MOVE.L	#160,D5
	;LEA	TABLE_A4+320*4,A3
	MOVEQ	#0,D2

	ADD.L	D5,D6	1  PROCHAINE LIGNE:+160
	MOVE.L	D6,A4	1  A3=ADR ECRAN EN .W, WARNING!
	MOVE.L	A4,A5	1  A6=ECRAN TOO (LE A5 DE FULBERT)

	MOVEQ	#0,D3	1
	MOVE.B	(A3)+,D3	2
	ADD	D3,A5	2

	MOVEQ	#0,D3	1
	MOVE.B	(A3)+,D3	2
	ADD	D3,A4	2

	MOVE	(A3)+,D3	2
	MOVE.L	(A6,D3.W),A2	5
	JMP	(A2)	2


CLIPPING_Y	MOVEM.L	D4/D6/A6,-(SP)
	MOVEQ	#0,D5
	LEA	TABLE_Y,A6
	ADD.W	D1,D1
	ADD.W	D3,D3
	MOVEQ	#0,D4
	ADD.W	(A6,D1.W),D4
	ADD.W	(A6,D3.W),D4
	ASR.W	#1,D1
	ASR.W	#1,D3
	TST.W	D4
	BEQ	FIN_NORMALE
	CMPI.W	#-2,D4
	BEQ	RIEN_DU_TOUT
	CMPI.W	#4,D4
	BEQ	RIEN_DU_TOUT
	CMPI.W	#-1,D4
	BEQ	CLIP_HAUT
	CMPI.W	#2,D4
	BEQ	CLIP_BAS

CLIP_HAUT_BAS	MOVE.W	D3,D4
	SUB.W	D1,D4	;D4=Y2-Y1
	MOVE.W	D2,D5
	MULS.W	D1,D5	;D5=Y1*X2
	MOVE.W	D3,D6
	MULS.W	D0,D6	;D6=X1*Y2
	SUB.L	D5,D6	;D6=X1*Y2-Y1*X2
	MOVE.W	D2,D5
	SUB.W	D0,D5	;D5=X2-X1
	MULS.W	#200,D5	;D5=200*(X2-X1)
	DIVS.W	D4,D5
	DIVS.W	D4,D6
	ADD.W	D5,D6	;D6=X2 CLIPPê
	CMPI.W	#200,D1
	BGE.S	.C_EST_Y1
.C_EST_Y2	MOVE.W	D6,D2
	MOVE.W	#199,D3
	BRA.S	SUIT
.C_EST_Y1	MOVE.W	D6,D0
	MOVE.W	#199,D1

SUIT	MOVE.W	D3,D4
	SUB.W	D1,D4	;D4=Y2-Y1
	MOVE.W	D2,D5
	MULS.W	D1,D5	;D5=Y1*X2
	MOVE.W	D3,D6
	MULS.W	D0,D6	;D6=X1*Y2
	SUB.L	D5,D6	;D6=X1*Y2-Y1*X2
	DIVS.W	D4,D6
	;D6=X CLIPPê
	TST.W	D1
	BGE.S	.C_EST_Y2
.C_EST_Y1	MOVE.W	D6,D0
	MOVEQ	#0,D1
	MOVEQ	#0,D5
	BRA.S	FIN_NORMALE
.C_EST_Y2	MOVE.W	D6,D2
	MOVEQ	#0,D3
	MOVEQ	#0,D5
	BRA.S	FIN_NORMALE

CLIP_BAS	MOVE.W	D3,D4
	SUB.W	D1,D4	;D4=Y2-Y1
	MOVE.W	D2,D5
	MULS.W	D1,D5	;D5=Y1*X2
	MOVE.W	D3,D6
	MULS.W	D0,D6	;D6=X1*Y2
	SUB.L	D5,D6	;D6=X1*Y2-Y1*X2
	MOVE.W	D2,D5
	SUB.W	D0,D5	;D5=X2-X1
	MULS.W	#200,D5	;D5=200*(X2-X1)
	DIVS.W	D4,D5
	DIVS.W	D4,D6
	ADD.W	D5,D6	;D6=X2 CLIPPê
	CMPI.W	#200,D1
	BGE.S	.C_EST_Y1
.C_EST_Y2	MOVE.W	D6,D2
	MOVE.W	#199,D3
	MOVEQ	#0,D5
	BRA.S	FIN_NORMALE
.C_EST_Y1	MOVE.W	D6,D0
	MOVE.W	#199,D1
	MOVEQ	#0,D5
	BRA.S	FIN_NORMALE

CLIP_HAUT	MOVE.W	D3,D4
	SUB.W	D1,D4	;D4=Y2-Y1
	MOVE.W	D2,D5
	MULS.W	D1,D5	;D5=Y1*X2
	MOVE.W	D3,D6
	MULS.W	D0,D6	;D6=X1*Y2
	SUB.L	D5,D6	;D6=X1*Y2-Y1*X2
	DIVS.W	D4,D6
	;D6=X CLIPPê
	TST.W	D1
	BGE.S	.C_EST_Y2
.C_EST_Y1	MOVE.W	D6,D0
	MOVEQ	#0,D1
	MOVEQ	#0,D5
	BRA.S	FIN_NORMALE
.C_EST_Y2	MOVE.W	D6,D2
	MOVEQ	#0,D3
	MOVEQ	#0,D5
	BRA.S	FIN_NORMALE

RIEN_DU_TOUT	MOVE.W	#-1,D5
FIN_NORMALE	MOVEM.L	(SP)+,D4/D6/A6
	RTS

	DCB.W	640,-1
TABLE_Y	DCB.W	200,0
	DCB.W	640,2

ADX	DC	2*2
ADY	DC	0
ADZ	DC	2*2*2


RE_BUILD	LEA	MOVEW_DEP,A1
	LEA	MOVEL_DEP,A2
	LEA	BUF_COD,A0
	MOVE	#129-1,D7	Nb d'Çtapes Ö dÇcompacter
.LOOP
	MOVEQ	#0,D1	Somme 1
	MOVEQ	#0,D2	Somme 2
;D'abord les MOVE.W:
.MOVE_W	MOVE	(A1)+,D0
	CMPI	#$4E75,D0
	BEQ.S	.SUITE
	MOVE	#$3140,(A0)+
	MOVE	D0,(A0)
	ADD	D1,(A0)
	MOVE	(A0)+,D1
	BRA.S	.MOVE_W
.SUITE
;Maintenant, les MOVE.L
.MOVE_L	MOVE	(A2)+,D0
	CMPI	#$4E75,D0
	BEQ.S	.ONCE_MORE
	MOVE	#$2140,(A0)+
	MOVE	D0,(A0)
	ADD	D2,(A0)
	MOVE	(A0)+,D2
	BRA.S	.MOVE_L
.ONCE_MORE	MOVE	#$4E75,(A0)+
	SUBQ	#1,D7
	BNE.S	.LOOP
	MOVE	#$9999,(A0)
	RTS

	DATA
POINTS
	DC	8+6
N	SET	150	       /\
	DC	-N,N,N	|       |
	DC	-N,-N,N	|       |
	DC	N,-N,N	|       |
	DC	N,N,N	---------

	DC	N,N,-N
	DC	N,-N,-N
	DC	-N,-N,-N
	DC	-N,N,-N

	DC	0,0,N*2
	DC	0,0,-N*2
	DC	N*2,0,0
	DC	-N*2,0,0
	DC	0,N*2,0
	DC	0,-N*2,0

ANGLES	DC.W	0,0,0
TRANS	DC.W	0,0,0
SINUS	INCBIN	SINUSROT.DAT
LONG_SINUS = *-SINUS
	DCB.W	LONG_SINUS/4,0

LOGARITHMES	INCBIN	LOG512.LOG

EXPONENTIELLES	INCBIN	EXP512.EXP
LONG_EXP = *-EXPONENTIELLES

COEFF	INCBIN	COEFF2.3D

	DCB.W	500,0
N	SET	0
CORES_X	REPT	20
	DC.W	32768,N,16384,N,8192,N,4096,N,2048,N,1024,N,512,N,256,N,128,N,64,N,32,N,16,N,8,N,4,N,2,N,1,N
N	SET	N+8
	ENDR
	DCB.W	500,0


TABLE_ADR_COD	;DS.B	(1280+40)*16
MOVEW	INCBIN	GLZ1_W.ATM
MOVEL	INCBIN	GLZ1_L.ATM
	ds.b	1900

	SECTION	BSS
;BSS gÇnÇrale
DEB_BSS
BUF_COD	DS.B	200000
;PrÇcalc tableaux
SCREEN1	DS.L	1
SCREEN2	DS.L	1
Z_BASE	DS.W	1
;Calcul des points
MATRICE	DS.W	9
BUF_EXP	DS.W	(LONG_EXP/4)*5
NB_VBL	DS.W	1
BUF_PTS	DS.W	500*3
;Routine d'affichage
TABLE_A4	DS.L	320*3
TABLE_A2	DS.L	320*3
BUF_EXAM	DS.W	2*50
BUF_GAUCHE	DS.W	4*50
BUF_DROIT	DS.W	4*50
REMP_GAUCHE	DS.W	250
REMP_DROIT	DS.W	250
;TABLE_ADR_COD	DS.B	(1280+40)*16
BUF_COD_GEN	DS.B	31000
MOVEL_DEP	DS.B	4000
TABLE_ADR	DS.L	200
SAVE_ADR_TABLOS	DS.L	1
	DS.B	1024
MOVEW_DEP
BUF_TABLOS	DS.B	410000
	DS.B	256
BUFFER	DS.B	32000*2
END_BSS