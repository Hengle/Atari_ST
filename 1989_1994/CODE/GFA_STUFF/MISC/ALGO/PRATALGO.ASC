/* Cahier d'algorithmie II, exemples pratiques en C */

#define     VRAI  1
#define     FAUX  0

int STRING_findPattern(analyse,modele)
char  *analyse,*modele;
{
register lgmodele;
register posmax;
int   posmodele=-1;
int   egal;
register    ianalyse=0;
register    imodele;

if((posmax=STRING_lenght(analyse)-(lgmodele=STRING_lenght(modele))) <0)
      NOTIFY("la chaine recherch‚e est trop longue");
while(iAnalyse<=posmax) {
      imodele=0;
      egal=VRAI;
      while(imodele<lgmodele) {
            if(*(analyse+ianalyse+imodele) == *(modele+imodele))
                  ++imodele;
            else  {
                  egal=FALSE;
                  imodele=lgmodele;
                  }
            }
      if(egal==VRAI) {
            posmodele=ianalyse;
            ianalyse=posmax;
            }
      ++ianalyse;
      }
return posmodele;
}


#define     NON_TROUVE  -1
int STRING_findpattern2(analyse,modele)
char *analyse,*modele;
{
register lgmodele=0;
register posmax=0;
register ianalyse=0;
register imodele;

while( *(modele+lgmodele))
   if(! *(analyse+lgmodele++)) NOTIFY("la chaine est trop longue");

while(! *(analyse+lgmodele+posmax++)) ;

while(ianalyse<=posmax) {
   imodele=0;
   while( *(analyse+ianalyse+imodele) == *(modele+imodele))
      if( ++imodele==lgmodele) return ianalyse;
   ++ianalyse;
   }
return NON_TROUVE; 
}

#define     NON_TROUVE  -1
int STRING_getUpstream(analyse,modele,preced)
char *analyse;
char *modele;
char *preced;
{
register char adel=0;
register lgpreced;
if((lgpreced=STRING_findPattern(analyse,modele))) {
      adel=0;
      if(lgpreced== NON_TROUVE) lgpreced=STRING_lenght(analyse);
      else                      {
                                adel=*(analyse+lgpreced);
                                *(analyse+lgpreced)=0;
                                }
      STRING_copy(analyse,preced);
      *(analyse+lgpreced)=adel;
      }
return lgpreced;
}
      
#define NON_TROUVE -1
int STRING_getDownstream(analyse,modele,suiv);
char *analyse;
char *modele;
char *suiv;
{
register posmod;
register lgmodele;
register lganalyse;

if((posmod=STRING_findPattern(analyse,modele)) == NON_TROUVE) return 0;
if(posmod==((lganalyse=STRING_lenght(analyse))
  -(lgmodele=STRING_lenght(modele)))) return 0;
STRING_copy(analyse+posmod+lgmodele,suiv);
return (lganalyse-lgmodele-posmod);
}
STRING_getDownstream2(analyse,modele,suiv);
char *analyse;
char *modele;
char *suiv;
{
register posmod;
register nbsuiv;
if((posmod=STRING_findPattern(analyse,modele))==NON_TROUVE ||
   !(nbsuiv=STRING_lenght(analyse)-(posmod+=STRING_lenght(modele))))
      return 0;
STRING_copy(analyse+posmod,suiv);
return suiv;
}

#define     MAX_TOKEN   25
#define     LG_TOKEN    80+1
STRING_scan(stream, separateur);
char  *stream;
char  *separateur;
{
register    i;
char        token[LG_TOKEN];

while(STRING_getUpstream(stream,separateur,token) {
   for(i=0;i<MAX_TOKEN;i++) if(!strcmp(token,TOKEN[i])) break;
   switch(i) {
      case 0:           /* commandes relatives au token TOKEN[0] */
                        break;
      case 1:           /* Commandes relatives au token TOKEN[1] */
                        break;
      /************ ... etc ... ************/
      case MAX_TOKEN-1: /* Commandes relatives au dernier token */
                        break;
      default :         /* instructions dans le cas ou le token n'est
                         * pas connu. */
      }
   if( !(*(stream+=STRING_getUpstream(stream,separateur)))) break;
   if( !(*(stream+=(STRING_lenght(separateur)))) break;
   }
}

; Cahier d'algorithmie II, exemples pratiques en Assembleur 68000.
FP	EQUR	A6
MAX_TOKx8	EQU		32

STRING_getUpstream:
	link	FP,#00
	movem.l	D1/A0,-(SP)
	move.l	$10(FP),-(SP)
	move.l	$C(FP),-(SP)
	bsr		STRING_fndpat2
	addq.l	#8,SP
	tst.w	D0
	beq		.3
	clr.b	D1
	cmpi.w	#-1,D0
	bne		.1
	move.l  $10(FP),-(SP)
	bsr		STRING_lenght
	addq.l	#4,SP
	bra		.2
.1	movea.l	$10(FP),A0
	move.b	$0(A0,D0),D1
	clr.b	$0(A0,D0)
.2	move.l	A0,-(SP)
	move.l	$8(FP),-(SP)
	bsr		STRING_copy
	addq.l	#8,SP
	move.b	D1,$0(A0,D0)
.3	movem.l	(SP)+,D1/A0
	unlk	FP
	rts

STRING_getDownstream:
	link	FP,#0
	move.l	D1,-(SP)
	clr.l	D1
	move.l	$10(FP),-(SP)
	move.l	$C(FP),-(SP)
	bsr		STRING_fndpat2
	addq.l	#8,SP
	cmpi.w	#-1,D0
	beq		.1
	move.w	D0,D1
	move.l	$C(FP),-(SP)
	bsr		STRING_lenght
	addq.l	#4,SP
	add.w	D0,D1
	move.l	$10(FP),-(SP)
	bsr		STRING_lenght
	addq.l	#4,SP
	sub.w	D1,D0
	beq		.2
	add.l	$10(FP),D1
	move.l	D1,-(SP)
	move.l	$8(FP),-(SP)
	bsr		STRING_copy
	addq.l	#8,SP
	bra		.2
.1	clr.w	D0
.2	move.l (SP)+,D1
	unlk	FP
	rts

STRING_fndpat2:
	link	FP,#00
	movem.l	D1-D4/A0-A1,-(SP)
	movea.l	$8(FP),A0
	movea.l	$C(FP),A1
	clr.l	D0
.1	tst.b	$0(A0,D0.W)
	beq		.3
	tst.b	(A1)+
	bne		.2
	pea		tolong
	bra		NOTIFY
.2	addq.w	#1,D0
	bra		.1
.3	clr.w	D1
.4	tst.b	$0(A1,D1.W)
	beq		.5
	addq.w	#1,D1
	bra		.4
.5	addq.w	#1,D1
	suba.l	D0,A1
	clr.w	D2
.6	clr.w	D3
.7	move.w	D2,D4
	add.w	D3,D4
	move.b	$0(A1,D4),D4
	cmp.b	$0(A0,D3),D4
	bne		.8
	addq.w	#1,D3
	cmp.w	D3,D0
	bne		.7
	move.w	D2,D0
	bra		return
.8	addq.w	#1,D2
	cmp.w	D2,D1
	bne		.6
	bra		reterr
NOTIFY:
	move.w	#9,-(SP)
	trap	#1
	lea		6(SP),SP
	move.w	#7,-(SP)
	trap	#1
	subq.l	#2,SP
reterr:
	moveq	#-1,D0
return:
	movem.l	(A7)+,D1-D4/A0-A1
	unlk	FP
	rts

STRING_lenght:
	move.l	A0,-(SP)
	movea.l	$8(SP),A0
	move.l	A0,D0
.1	tst.b	(A0)+
	bne		.1
	suba.l	D0,A0
	move.l	A0,D0
	subq.l	#1,D0
	movea.l (SP)+,A0
	rts

STRING_copy:
	movem.l	A0-A1,-(SP)
	movea.l	$10(SP),A0
	movea.l	$C(SP),A1
.1	move.b	(A0)+,(A1)+
	bne		.1
	movem.l	(SP)+,A0-A1
	rts

STRING_concatenate:
	link	FP,#0
	movem.l	A0-A1,-(SP)
	movea.l	$10(FP),A0
	movea.l	$8(FP),A1
.1	move.b	(A0)+,(A1)+
	bne		.1
	subq.l	#1,A1
	movea.l	$C(FP),A0
.2	move.b	(A0)+,(A1)+
	bne		.2
	movem.l	(SP)+,A0-A1
	unlk	FP
	rts

STRING_remove:
	link	FP,#0
	movem.l	A0-A1,-(SP)
	movea.l	$10(FP),A0
	suba.l	A1,A1
	movea.w	$8(FP),A1
	adda.l	A0,A1
.1	move.b	(A1)+,(A0)+
	bne		.1
	movem.l	(SP)+,A0-A1
	unlk	FP
	rts

STRING_insert:
	link	FP,#0
	movem.l	A0-A2,-(SP)
	movea.l	$12(FP),A0
	movea.l $E(FP),A1
	movea.l	$A(FP),A2
	move.w	$8(FP),D0
	subq.l	#1,D0
.1	move.b	(A0)+,(A2)+
	beq		.2
	dbra	D0,.1
	bra		.3
.2	move.b	-(A0),-(A2)
.3	move.b	(A1)+,(A2)+
	bne		.2
	subq.l	#1,A2
.4	move.b	(A0)+,(A2)+
	bne	.4
	movem.l	(SP)+,A0-A2
	unlk	FP
	rts

STRING_compare:
	movem.l	A0-A1,-(SP)
	movea.l $10(SP),A0
	movea.l	$C(SP),A1
.1	move.b	(A0)+,D0
	cmp.b	(A1)+,D0
	bne		.2
	tst.b	D0
	bne		.1
	bra		.3
.2	moveq	#-1,D0
.3	movem.l (SP)+,A0-A1
	rts

totox:			; Programme … ex‚cuter si re‡ue commande "toto".
	pea		toto
	move.w	#9,-(SP)
	trap	#1
	addq.l	#6,SP
	move.w	#7,-(SP)
	trap	#1
	addq.l	#2,SP
	rts

titix:			; Si re‡ue commande "titi".
	pea		titi
	move.w	#9,-(SP)
	trap	#1
	addq.l	#6,SP
	move.w	#7,-(SP)
	trap	#1
	addq.l	#2,SP
	rts

tatax:			; Si re‡ue commande "tata".
	pea		tata
	move.w	#9,-(SP)
	trap	#1
	addq.l	#6,SP
	move.w	#7,-(SP)
	trap	#1
	addq.l	#2,SP
	rts

tutux:			; Si re‡ue commande "tutu".
	pea		tutu
	move.w	#9,-(SP)
	trap	#1
	addq.l	#6,SP
	move.w	#7,-(SP)
	trap	#1
	addq.l	#2,SP
	rts

pacomprix:		; Si commande inconnue.
	pea		pacompri
	move.w	#9,-(SP)
	trap	#1
	addq.l	#6,SP
	move.w	#7,-(SP)
	trap	#1
	addq.l	#2,SP
	rts

STRING_scan:
	link	FP,#0
	movem.l	D1/A0,-(SP)
.1	move.l	$C(FP),-(SP)
	move.l	$8(FP),-(SP)
	pea		Token
	bsr		STRING_getUpstream
	lea		$c(SP),SP
	clr.l	D2
	move.w	D0,D2
	lea		TOKENLIST,A0
	clr.l	D1
	pea		Token
.2	move.l	$0(A0,D1),-(SP)
	bsr		STRING_compare
	addq.l	#4,SP
	tst.b	D0
	beq		.3
	addq.l	#8,D1
	cmpi.l	#MAX_TOKx8,D1
	bne		.2
.3  addq.l	#4,SP
	movea.l	$4(A0,D1),A0
	jsr		(A0)
	add.l	$C(FP),D2
	movea.l	D2,A0
	tst.b	(A0)
	beq		.4
	move.l	$8(FP),-(SP)
	bsr		STRING_lenght
	add.w	D0,D2
	move.l	D2,$c(FP)
	movea.l	D2,A0
	tst.b	(A0)
	bne		.1
.4  movem.l (SP)+,D1/A0
	unlk	FP
	rts 

	DATA

Token	DS.B	$100
pacompri DC.B	$a,$d,"Pas compris l'ordre!",$a,$d,$7,$0
toto	DC.B	"toto",$0
titi	DC.B	"titi",$0
tata	DC.B	"tata",$0
tutu	DC.B	"tutu",$0
TOKENLIST DC.L	toto,totox,titi,titix,tata,tatax,tutu,tutux,pacomprix,pacomprix
stream DC.B "toto tata titi toti toto tutu tata titi",$0
separ  DC.B " ",$0
tolong	DC.B	$7,"Chaine trop longue !",$7,$0
analyse	DC.B	"Mon perroquet va finir embroch‚!",$0
modele	DC.B	"va finir ",$0
prev	DS.B	256
suiv	DS.B	256
