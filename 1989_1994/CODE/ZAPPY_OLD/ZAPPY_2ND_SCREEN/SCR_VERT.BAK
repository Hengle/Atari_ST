IERA	EQU	$FFFA07		* INTERUPTION ENABLE A
IERB	EQU	$FFFA09		* INTERUPTION ENABLE B
ISRA	EQU	$FFFA0F		* INTERUPTION IN-SERVICE A
IMRA	EQU	$FFFA13		* INTERUPTION MASQUE A
TBCR	EQU	$FFFA1B		* TIMER B CONTROL REGISTER
TBDR	EQU	$FFFA21		* TIMER B DONNEE REGISTER
SYNCRO	EQU	$FF820A		* REGISTRE SYNCRO SHIFTER
COUL_0	EQU	$FF8240
COUL_1	EQU	$FF8242		* ADRESSES DES REGISTRES
COUL_2	EQU	$FF8244		* DE LA PALETTE DU SHIFTER
COUL_3	EQU	$FF8246
COUL_4	EQU	$FF8248
COUL_5	EQU	$FF824A
COUL_6	EQU	$FF824C
COUL_7	EQU	$FF824E
COUL_8	EQU	$FF8250
COUL_9	EQU	$FF8252
COUL_10	EQU	$FF8254
COUL_11	EQU	$FF8256
COUL_12	EQU	$FF8258
COUL_13	EQU	$FF825A
COUL_14	EQU	$FF825C
COUL_15	EQU	$FF825E
ACIA	EQU	$FFFC02		* LECTURE DE L'ACIA CLAVIER
PSG	EQU	$FF8800	        * pour le son...


 	SECTION TEXT
DEBUT:	MOVE.L  A7,A5
	LEA.L 	D_PILE,A7
	MOVE.L 	4(A5),A5
	MOVE.L 	$C(A5),D0
	ADD.L 	$14(A5),D0
	ADD.L 	$1C(A5),D0
	ADD.L 	#$100,D0		
	MOVE.L 	D0,-(SP)		
        MOVE.L 	A5,-(SP)
	MOVE.W 	#0,-(SP)
	MOVE.W 	#$4A,-(SP)
	TRAP 	#1
	LEA 	12(SP),SP
	
	CLR.L 	-(SP)			* PASSAGE EN SUPERVISEUR
	MOVE.W 	#$20,-(SP)		*
	TRAP 	#1			*
	ADDQ.L 	#6,SP			*
	MOVE.L 	D0,SAUVE		* SAUVE LA PILE UTILISATEUR
			
	MOVE.B	IERA,MFP1		*
	MOVE.B	IERB,MFP2		*
	MOVE.B	ISRA,MFP3		* SAUVE LES REGISTRES
	MOVE.B	IMRA,MFP4		* UTILISES DU MFP
	MOVE.B	TBCR,MFP5		*
	MOVE.B	TBDR,MFP6		*
	
	CLR.B	IERA			* VIRE TOUTES LES
	CLR.B	IERB			* INTERUPTIONS
	

	MOVE.L	#BUFFER,D0		* ADRESSE DU BUFFER POUR ECRAN
	ANDI.L	#$FFFFFF00,D0		* SUPRIME LES 8 BITS "FAIBLE"
	ADD.L	#512,D0			* ET FAIT MULTIPLE DE 256
	MOVE.L	D0,ECRAN
	
;	MOVE.L	#BUFFERF,D0		* ADRESSE DU BUFFER POUR ECRAN
;	ANDI.L	#$FFFFFF00,D0		* SUPRIME LES 8 BITS "FAIBLE"
;	ADD.L	#512,D0			* ET FAIT MULTIPLE DE 256
;	MOVE.L	D0,ADRFONT		* ON SAUVE L'ADRESSE CALCULEE
	
	MOVE.W	#4,-(SP)		* APPEL FONCTION GETREZ
	TRAP 	#14			* XBIOS...
	ADDQ.L	#2,SP			*
	MOVE.W	D0,RES			* SAUVE LA RESOLUTION
	
	MOVE.W	#2,-(SP)		* APPEL FONCTION PHYSBASE
	TRAP 	#14			* XBIOS
	ADDQ.L 	#2,SP			*
	MOVE.L	D0,ANC_ECR		* SAUVE L'ADRESSE ECRAN
	
	MOVE.W 	#0,-(SP)		* BASSE RESOLUTION
	MOVE.L	ECRAN,-(SP)		* PHYSBASE A ECRAN
	MOVE.L	ECRAN,-(SP)		* LOGBASE A ECRAN
	MOVE.W 	#5,-(SP)		* FONCTION SETSCREEN
	TRAP 	#14			* DU XBIOS
	LEA.L 	12(SP),SP		*

	LEA.L	COUL_0,A0		* ADRESSE PALETTE SHIFTER
	MOVEM.L	(A0),D0-D7		* RECUPERE LES 16 REGISTRES
	LEA.L	ANC_PAL,A0		* ADRESSE DE SAUVEGARDE
	MOVEM.L	D0-D7,(A0)		* SAUVE LES 16 REGISTRES
        MOVEA.L  ECRAN,A0
        MOVEA.L  #FONT+34,A1
        MOVE.L   #7999,D0
C       MOVE.L   (A1)+,(A0)+
        DBF  D0,C	
        
;        move.l ADRFONT,a3
;        lea  FONT+34,a5
;        JSR  decomp
;        move.l ADRLOGO,a3
;        lea  LOGO+34,a5
;        JSR  decomp
	
;	MOVE.L #MES_F,MES_PNT		* INIT POINTEUR MESSAGE
        ;MOVE.L #MES_F2,MES_PNT2

        MOVE.W  #0,POIROT1
	MOVE.W  #0,POIROT2

;	MOVEQ	#1,D0			* NETOIE D0
;	BSR	MUSIC		* INITIALISE LA MUSIQUE
;	MOVE.W  #1,MUS
	
;	bsr	SET_SCR		;preparation des ecrans
;        MOVEA.L  SCREEN2,A1
;        MOVEA.L  ADRLOGO,A0
;        BSR    AFF_LOGO

;        MOVEA.L  SCREEN1,A1
;        MOVEA.L  ADRLOGO,A0
;        BSR    AFF_LOGO

	MOVE.L	$70,ANC_VBL		* SAUVE L'ANCIEN VECTEUR VBL
	MOVE.L	#VBL_IR,$70		* ET PLACE LE MIEN...
	MOVE.L	$120,ANC_TB		* SAUVE ANCIEN VECTEUR TIMER B
	MOVE.L	#TB0_IR,$120		* ET PLACE LE MIEN...
	
	DC.W	$A00A			* CACHE LA SOURIS (LINE A)
	MOVE.B	#$12,ACIA		* INIT CLAV
	
	CLR.B	TBCR			* ARRET DU TIMER B (PLUS PRUDENT)
	BSET	#0,IERA			* AUTORISE LES INTERUPTIONS
	BSET	#0,IMRA			* SUR LE TIMER B



;	bsr	SET_SCR		;preparation des ecrans
	lea	TEXTE,a0	;debut du texte dans a0
	move.l	a0,MEM_LET	Position fonte (Table)
;	move.w	#0,PART_AFF	(2 Parties)



BOUCLE:	
	MOVE.B	VSYNC,D0		* ATTEND UNE SYNCRO VERTICALE
WAIT	CMP.B	VSYNC,D0		* POUR LE TESTS DES TOUCHES
	BEQ.S	WAIT
	CMP.B	#$39,ACIA		* TESTE ESPACE (CODE SCAN)
	BNE.S	BOUCLE			* SI ESPACE, ON SORT DE L'INTRO
***********************************************************************

FIN:	
        MOVE.B  #2,SYNCRO
	MOVE.B	#8,ACIA			* REMET LE CLAVIER
	MOVE.B	MFP1,IERA		* RESTAURE LE MFP
	MOVE.B	MFP2,IERB		*
	MOVE.B	MFP3,ISRA		*
	MOVE.B	MFP4,IMRA		*
	MOVE.B	MFP5,TBCR		*
	MOVE.B	MFP6,TBDR		*
	
	MOVE.L	ANC_VBL,$70		* REMET LE VECTEUR VBL
	MOVE.L	ANC_TB,$120		* REMET LE VECTEUR TIMER C
	
	LEA.L	ANC_PAL,A0		* ADRESSE PALETTE SAUVEE
	MOVEM.L	(A0),D0-D7		* RECUPERE LES 16 REGISTRES
	LEA.L	COUL_0,A0		* ADRESSE PALETTE SHIFTER
	MOVEM.L	D0-D7,(A0)		* RESTITUE LES COULEURS
	
	MOVE.W 	RES,-(SP)		* ANCIENNE RESOLUTION
	MOVE.L	ANC_ECR,-(SP)		* ANCIEN ECRAN PHYSIQUE
	MOVE.L	ANC_ECR,-(SP)		* ANCIEN ECRAN LOGIQUE
	MOVE.W 	#5,-(SP)		* FONCTION SETSCREEN
	TRAP 	#14			* DU XBIOS
	LEA.L 	12(SP),SP		* CORRIGE LA PILE
	
	MOVE.L	SAUVE,-(SP)		* RETOUR EN UTILISATEUR
	MOVE.W 	#$20,-(SP)		* AVEC LA FONCTION SUPER
	TRAP 	#1			* DU GEMDOS
	ADDQ.L 	#6,SP			*
	
	PEA	CHUT_DA	   		* ADRESSE DES PARAMETRES
	MOVE.W	#$20,-(A7) 		* FONCTION DOSOUND
	TRAP	#14        		* DU XBIOS
	ADDQ.L	#6,A7      		* CORIGE LA PILE

	CLR.W 	-(SP)			* FIN DU PROGRAMME
	TRAP	#1			* FONCTION PTERM
	


decomp:
 move.l #100,d4       * $C7
 move.l #6,a0
 moveq #4,d6
 moveq #$28,d7
  
dec9:
 clr.b d1
 movea.l a3,a4

dec8:
 move.l a4,-(sp)
 clr.b d3

dec7:
 move.b (a5)+,d0
 tst.b d0
 bmi.s dec1
 addq.b #1,d0

dec3:
 move.b (a5)+,(a4)+
 addq.b #1,d3
 move.l a4,d5
 btst #0,d5
 bne.s dec2
 adda.l a0,a4

dec2:
 subq.b #1,d0
 bne.s dec3
 bra.s dec4

dec1:
 neg.b d0
 addq.b #1,d0
 move.b (a5)+,d2

dec6:
 move.b d2,(a4)+
 addq.b #1,d3
 move.l a4,d5
 btst #0,d5
 bne.s dec5
 adda.l a0,a4

dec5:
 subq.b #1,d0
 bne.s dec6

dec4:
 cmp.b d7,d3
 bne.s dec7
 move.l (sp)+,a4
 addq.l #2,a4
 addq.b #1,d1
 cmp.b d6,d1
 bne.s dec8
 adda.l #$a0,a3
 dbra d4,dec9
 rts

AFF_LOGO REPT    100

	MOVEM.L	(A0),D0-D7/A2-A6
	MOVEM.L	D0-D7/A2-A6,160(A1)
	
	MOVEM.L	48(A0),D0-D7/A2-A6
	MOVEM.L	D0-D7/A2-A6,208(A1)
	
	MOVEM.L	96(A0),D0-D7/A2-A6
	MOVEM.L	D0-D7/A2-A6,256(A1)
	
	MOVEM.L	144(A0),D0-D3
	MOVEM.L	D0-D3,304(A1)

	LEA.L   160(A1),A1  *=SUBA.L	#160,A1
	LEA.L   160(A0),A0   *=ADDA.L	#320,A0

;INC     SET   INC+160

	ENDR
        RTS

VBL_IR	
        ;MOVE.W  #$777,$FF8240
	MOVEM.L	D0,-(SP)		* SAUVE LE REGISTRE
	CLR.B	TBCR			* ARRET DU TIMER B
	MOVE.B	#97,TBDR		* INTERUPTION SUR LIGNE 117
	MOVE.B	#8,TBCR			* TIMER C EN EVENT COUNT MODE
	LEA.L	COUL_0,A6		* ADRESSE PALETTE SHIFTER DANS A6
	MOVEA.L #FONT+2,A5              * ADRESSE COULEURS
     REPT 8
     	MOVE.L	(A5)+,(A6)+		* MET LA NOUVELLE PALETTE EN PLACE
     ENDR

        CMPI.B   #$42,ACIA
        BEQ   BLANC
        BRA.S  NOIR
BLANC   MOVE.W   #$777,$FF8240

NOIR 
        BSR SCROLL
        BSR AFF_FNT	
        MOVEM.L	(SP)+,D0		* RESTAURE LE REGISTRE
	NOT.B	VSYNC			* BASCULE POUR SYNCRO
        MOVE.W  #$0,$FF8240
	RTE				* FIN DE L'INTERUPTION VBL



TB0_IR	
        LEA.L	COUL_0,A6		* ADRESSE PALETTE SHIFTER DANS A6
	MOVEA.L #FONT+2,A5              * ADRESSE COULEURS
     REPT 8
     	MOVE.L	(A5)+,(A6)+		* MET LA NOUVELLE PALETTE EN PLACE
     ENDR
        
	CLR.B	TBCR			* ARRET DU TIMER
	MOVE.B	#33,TBDR		* PROCHAINE INTERUP DANS 74 LIGNES
	MOVE.B	#8,TBCR			* PASSE EN EVENT COUNT MODE
	MOVE.L	#TB1_IR,$120		* NOUVELLE ROUTINE TIMER B
	BCLR	#0,ISRA			* LIBERE L'INTERUPTION
	RTE				* FIN DE L'INTERUPTION (RETOUR)

TB1_IR	
        LEA.L	COUL_0,A6		* ADRESSE PALETTE SHIFTER DANS A6
	MOVEA.L #FONT+2,A5              * ADRESSE COULEURS
     REPT 8
     	MOVE.L	(A5)+,(A6)+		* MET LA NOUVELLE PALETTE EN PLACE
     ENDR
        
	CLR.B	TBCR			* ARRET DU TIMER
	MOVE.B	#69,TBDR		* PROCHAINE INTERUP DANS 74 LIGNES
	MOVE.B	#8,TBCR			* PASSE EN EVENT COUNT MODE
	MOVE.L	#TBF_IR,$120		* NOUVELLE ROUTINE TIMER B
	BCLR	#0,ISRA			* LIBERE L'INTERUPTION
	RTE				* FIN DE L'INTERUPTION (RETOUR)

;TB1_IR	
;        MOVE  #$001,COUL_0
;	CLR.B	TBCR			* ARRET DU TIMER
;	MOVE.B	#16,TBDR		* PROCHAINE INTERUP DANS 74 LIGNES
;	MOVE.B	#8,TBCR			* PASSE EN EVENT COUNT MODE
;	MOVE.L	#TBF_IR,$120		* NOUVELLE ROUTINE TIMER B
;	BCLR	#0,ISRA			* LIBERE L'INTERUPTION
;	RTE				* FIN DE L'INTERUPTION (RETOUR)






TBF_IR
     REPT 127
	NOP				* BOUCLE D'ATTENTE...
     ENDR
	MOVE.B	#0,SYNCRO		* PASSAGE EN 60 HZ
     REPT 8
     	NOP				* BOUCLE D'ATTENTE
     ENDR
	MOVE.B	#2,SYNCRO		* RETOUR EN 50 HZ
	CLR.B	TBCR			* ARRET DU TIMER B
	MOVE.L	#TB0_IR,$120		* NOUVELLE ROUTINE TIMER B
	BCLR	#0,ISRA			* INTERUPTION TRAITEE
	RTE				* RETOUR
**********************************************************************
	
**********************************************************************

**** Procedures ****
SCROLL:	

	MOVEA.L  ECRAN,A1
        MOVEA.L  ECRAN,A0
        LEA.L    160(A0),A0  

;INC     SET  0

	REPT    199      

	MOVEM.L	(A0),D0-D3
	MOVEM.L	D0-D3,(A1)
	
	;MOVEM.L	48(A0),D0-D7/A2-A6
	;MOVEM.L	D0-D7/A2-A6,208(A1)
	
	;MOVEM.L	96(A0),D0-D7/A2-A6
	;MOVEM.L	D0-D7/A2-A6,256(A1)
	
	;MOVEM.L	144(A0),D0-D3
	;MOVEM.L	D0-D3,304(A1)

	LEA.L   160(A1),A1  *=SUBA.L	#160,A1
	LEA.L   160(A0),A0   *=ADDA.L	#320,A0

;INC     SET   INC+160

	ENDR


       
	rts



AFF_FNT:	
	
	moveA.l	#FONT+34,a2	Pointe sur les fontes
;	moveA.l	MEM_LET,a0
;	adda.w	(a0),a2
	moveA.l	ECRAN,a1	(8 pixels de large)
	LEA.L   31840(A1),A1    *=adda.l	#152,a1
                                *=ADDA.L  #149*160,A1
	
	MOVEM.L	(A2),D0-D3
	MOVEM.L	D0-D3,(A1)
	addq   #1,POIROT1
        CMPI.W  #33,POIROT1
        BEQ     OTHER
        BRA.S   FIN_SCR

OTHER   MOVE.W  #0,POIROT1
;    	addq.l	#2,a0		On passe … une autre lettre
;	cmp.w	#$ffff,(a0)
;	bne	GO_LET
;	lea	TEXTE,a0
;GO_LET:	move.l	a0,MEM_LET	On sauvegarde le pointeur
FIN_SCR RTS
******************************



	
**** Variables ***

	section   data
;MUSIC:  INCBIN  GEAR.MUS
TEXTE:	INCBIN	SPEED.TXT
FONT:	INCBIN	FONTES1.PI1
;LOGO:   INCBIN  LOGOGEN4.PC1

;PART12  INCBIN  PART12.PI1
;        EVEN
;PART34  INCBIN  PART34.PI1
;        EVEN
;PART56  INCBIN  PART56.PI1
;        EVEN
;PART78  INCBIN  PART78.PI1
;        EVEN




MES_F	
        DC.B   0,1,2,3,4,5,6,7,8,9
        DC.B   9,8,7,6,5,4,3,2,1,0
	DC.B  -1
	EVEN

;MES_F2  DC.B   0,10,20,30,40,30,20,10
;        DC.B   -1
;        EVEN


CHUT_DA	DC.B	7,$FF,6,0,8,0,9,0,$A,0

 	SECTION BSS
 	EVEN
ECRAN   DS.L    1
ADRLOGO DS.L    1
MES_PNT DS.L    1
MES_PNT2 DS.L    1
BIDON   DS.L    1
F_PILE	DS.L 	128			* FIN DE LA PILE
D_PILE	DS.L 	1			* DEBUT DE LA PILE
SAUVE	DS.L	1			* SAUVE LA PILE UTILISATEUR
ANC_VBL DS.L	1			* SAUVE LE VECTEUR VBL
ANC_TB	DS.L	1			* SAUVE LE VECTEUR TIMER B
ANC_ECR	DS.L	1			* SAUVE L'ADRESSE DE L'ECRAN
POIROT1	DS.W	1			* COMPTEURS POUR FAIRE DEMARRER
POIROT2	DS.W	1			* LES ANIMATIONS, LES UNES
POIROT3	DS.W	1			* APRES LES AUTRES
POIROT4	DS.W	1			*
RES	DS.W	1			* SAUVE LA RESOLUTION
ANC_PAL	DS.W	16			* SAUVE LA PALETTE
MFP1	DS.B	1			* SAUVE LES REGISTRES DU MFP
MFP2	DS.B	1			*
MFP3	DS.B	1			*
MFP4	DS.B	1			*
MFP5	DS.B	1			*
MFP6	DS.B	1			*
VSYNC	DS.B	1			* POUR LA SYNCRO VERTICALE
BUFFER  DS.B    45000
SCREEN1:	ds.l	1	;ecran	courant
SCREEN2:	ds.l	1	;ecran	travail
MEM_LET:	ds.l	1
PART_AFF:	ds.l    1
